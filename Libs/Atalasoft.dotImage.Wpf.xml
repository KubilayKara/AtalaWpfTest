<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atalasoft.dotImage.Wpf</name>
    </assembly>
    <members>
        <member name="T:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2">
            <summary>Represents an observable collection of keys and values.</summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2"/>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2" /> class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2" /> class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.</summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2" /> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity" /> is less than 0.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2" /> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for the type of the key.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2" /> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2" /> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for the type of the key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity" /> is less than 0.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> and uses the default equality comparer for the key type.</summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2" />.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary" /> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the <see cref="T:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2" />.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for the type of the key.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary" /> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.Clear">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Clear"/>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.Count">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.Count"/>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.IsReadOnly">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.ContainsKey(`0)">
            <inheritdoc cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)"/>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.Add(`0,`1)">
            <inheritdoc cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)"/>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.Remove(`0)">
            <inheritdoc cref="M:System.Collections.Generic.IDictionary`2.Remove(`0)"/>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.Item(`0)">
            <inheritdoc cref="P:System.Collections.Generic.IDictionary`2.Item(`0)"/>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.Keys">
            <inheritdoc cref="P:System.Collections.Generic.IDictionary`2.Keys"/>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.Values">
            <inheritdoc cref="P:System.Collections.Generic.IDictionary`2.Values"/>
        </member>
        <member name="E:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.CollectionChanged">
            <inheritdoc cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Fires a <see cref="E:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.CollectionChanged"/> event with specified args.
            </summary>
            <param name="e"><see cref="E:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.CollectionChanged"/> arguments.</param>
        </member>
        <member name="E:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.PropertyChanged">
            <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.OnPropertyChanged(System.String)">
            <summary>
            Fires a <see cref="E:Atalasoft.Imaging.Wpf.AtalaObservableDictionary`2.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Property that has changed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ScaledAtalaImageViewer.GetCenterPosition">
            <summary>
            Calculates the position of the image within the control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ScaledAtalaImageViewer.CalculateZoom">
            <summary>
            Performs a 'best fit' zoom on the image.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.WpfConverter">
            <summary> This is a static class used to convert an <STRONG>AtalaImage</STRONG> to a <STRONG>BitmapSource</STRONG>
            and back. </summary>
            <example>
<code><![CDATA[ Dim dlg As Microsoft.Win32.OpenFileDialog = New Microsoft.Win32.OpenFileDialog()
dlg.Filter = "Images|*.jpg;*.png;*.tif;*.gif;*.bmp;*.wdp;*.xps"
If dlg.ShowDialog(Me).Value Then
    Dim image As Atalasoft.Imaging.AtalaImage = New Atalasoft.Imaging.AtalaImage(dlg.FileName)
    Dim source As BitmapSource = WpfConverter.AtalaImageToBitmapSource(image)
    image.Dispose()

    Me.Viewer.Source = source
End If ]]></code>

<code><![CDATA[ Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();
dlg.Filter = "Images|*.jpg;*.png;*.tif;*.gif;*.bmp;*.wdp;*.xps";
if (dlg.ShowDialog(this).Value)
{
    Atalasoft.Imaging.AtalaImage image = new Atalasoft.Imaging.AtalaImage(dlg.FileName);
    BitmapSource source = WpfConverter.AtalaImageToBitmapSource(image);
    image.Dispose();

    this.Viewer.Source = source;
} ]]></code>
</example>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.WpfConverter.AtalaImageToBitmapSource(Atalasoft.Imaging.AtalaImage)">
            <summary> Converts an <STRONG>AtalaImage</STRONG> to a <STRONG>BitmapSource</STRONG>. </summary>
            <returns> A <STRONG>BitmapSource</STRONG> for the image. </returns>
            <remarks> The <STRONG>AtalaImage</STRONG> can be disposed after the conversion to free up memory. </remarks>
            <param name="atalaImage"> The <STRONG>AtalaImage</STRONG> to convert. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.WpfConverter.BitmapSourceToAtalaImage(System.Windows.Media.Imaging.BitmapSource)">
            <summary> Converts a <STRONG>BitmapSource</STRONG> to an <STRONG>AtalaImage</STRONG>. </summary>
            <remarks> The image data is copied from the <STRONG>BitmapSource</STRONG>.  After processing the
            <STRONG>AtalaImage</STRONG>, a new <STRONG>BitmapSource</STRONG> can be created from the <see
            cref="M:Atalasoft.Imaging.Wpf.WpfConverter.AtalaImageToBitmapSource(Atalasoft.Imaging.AtalaImage)"/> method. </remarks>
            <returns> A copy of the image as an <STRONG>AtalaImage</STRONG> object. </returns>
            <param name="bitmapSource"> The BitmapSource to convert. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.WpfConverter.AtalaToWpfPixelFormat(Atalasoft.Imaging.PixelFormat)">
            <summary> Converts an <STRONG>Atalasoft.Imaging.PixelFormat</STRONG> to a
            <STRONG>System.Windows.Media.PixelFormat</STRONG> equivalent. </summary>
            <returns> The equivalent <STRONG>System.Windows.Media.PixelFormat</STRONG>. </returns>
            <exception> Thrown if there is no equivalent format. </exception>
            <param name="atalaFormat"> The <STRONG>Atalasoft.Imaging.PixelFormat</STRONG> to convert. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.WpfConverter.WpfToAtalaPixelFormat(System.Windows.Media.PixelFormat)">
            <summary> Converts an <STRONG>System.Windows.Media.PixelFormat</STRONG> to a
            <STRONG>Atalasoft.Imaging.PixelFormat</STRONG> equivalent. </summary>
            <returns> The equivalent <STRONG>Atalasoft.Imaging.PixelFormat</STRONG>. </returns>
            <exception> Thrown if there is no equivalent format. </exception>
            <param name="wpfFormat"> The <STRONG>System.Windows.Media.PixelFormat</STRONG> to convert. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.AtalaImageViewer">
            <summary> <para>The <STRONG>AtalaImageViewer</STRONG> is an image viewer with automatic zooming and mouse tool
            capabilities.</para>
            <para>The viewer takes advantage of DotImage codecs to <see cref="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.Open(System.String,System.Int32,Atalasoft.Imaging.ProgressEventHandler)" /> and <see cref="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)" /> images and image commands can be applied to the image using the <see cref="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.ApplyCommand(Atalasoft.Imaging.ImageProcessing.ImageCommand)" /> method.  The viewer contains a <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.Source" /> property
            for a <STRONG>BitmapSource</STRONG> object, making its use in WPF straight forward.</para> </summary>
            <example>
<code><![CDATA[ <Window x:Class="WpfControlsDemo.Window1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="clr-namespace:Atalasoft.Imaging.Wpf;assembly=Atalasoft.dotImage.Wpf"
    Title="WPF Controls Demo" Height="565" Width="756"
    Background="White"
    >
  <Grid>
    <Grid.ColumnDefinitions>
      <ColumnDefinition/>
    </Grid.ColumnDefinitions>
    <Grid.RowDefinitions>
      <RowDefinition Height="22"/>
      <RowDefinition/>
      <RowDefinition Height="22"/>
    </Grid.RowDefinitions>
    <Menu Grid.Column="0" Grid.Row="0">
      <MenuItem Header="_File">
        <MenuItem Header="_Open" Click="OnOpenFile"/>
        <MenuItem Header="_Save" Click="OnSaveFile"/>
        <Separator/>
        <MenuItem Header="E_xit" Click="OnExit"/>
      </MenuItem>
    </Menu>
    <mc:AtalaImageViewer Name="Viewer" Grid.Column="0" Grid.Row="1" ImageChanged="OnImageChanged" MouseMovePixel="OnViewerMouseMove">
      <mc:AtalaImageViewer.MouseTool>
        <mc:SelectionMouseTool SelectionChanged="MySelectionChanged"/>
      </mc:AtalaImageViewer.MouseTool>
    </mc:AtalaImageViewer>
    <StatusBar Name="statusBar1" Grid.Column="0" Grid.Row="2" VerticalAlignment="Bottom">
      <StatusBarItem>
        <TextBlock Name="statusInfo"></TextBlock>
      </StatusBarItem>
    </StatusBar>
  </Grid>
</Window> ]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.AutoZoomProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.AutoZoom"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.AutoZoom"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.ZoomProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.Zoom"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.Zoom"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.IsCenteredProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.IsCentered"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.IsCentered"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.IsColorManagedProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.IsColorManaged"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.IsColorManaged"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.DisplayProfileProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.DisplayProfile"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.DisplayProfile"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.OutputProfileProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.OutputProfile"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.OutputProfile"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.ProofIntentProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.ProofIntent"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.ProofIntent"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.RenderingIntentProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.RenderingIntent"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.RenderingIntent"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseToolProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseTool"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseTool"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.SourceProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.Source"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.Source"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseToolScrollingProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseToolScrolling"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseToolScrolling"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseToolScrollingZoneLengthProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseToolScrollingZoneLength"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseToolScrollingZoneLength"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.ResolutionScaleModeProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.ResolutionScaleMode"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.ResolutionScaleMode"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseWheelModeProperty">
            <summary>
            Identifies the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseWheelMode"/> dependency property. 
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.ImageChangedEvent">
            <summary> Identifies the <see cref="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.ImageChanged"/> routed event. </summary>
            <value> Identifies the <see cref="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.ImageChanged"/> routed event. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseMovePixelEvent">
            <summary> Identifies the <see cref="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseMovePixel"/> routed event. </summary>
            <value> Identifies the <see cref="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseMovePixel"/> routed event. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.ClientSizeChangedEvent">
            <summary> Identifies the <see cref="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.ClientSizeChanged"/> event. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.ZoomChangedEvent">
            <summary>
            Identifies the <see cref="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.ZoomChanged"/> event.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.IsCenteredChangedEvent">
            <summary>
            Identifies the <see cref="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.IsCenteredChanged"/> event.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseWheelZoomEvent">
            <summary>
            Identifies the <see cref="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseWheelZoom"/> event.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.#ctor">
            <summary> Creates a new instance of <STRONG>AtalaImageViewer</STRONG>. </summary>
        </member>
        <member name="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.ImageChanged">
            <summary> Raised when the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.Image"/> property or the image data has been changed.
            </summary>
            <remarks> Setting the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.Source"/> property will also replace the image and raise this
            event. </remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseMovePixel">
            <summary> Raised when the mouse is moved over an image pixel. </summary>
        </member>
        <member name="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.ClientSizeChanged">
            <summary> Raised when the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.ClientSize"/> property is changed. </summary>
        </member>
        <member name="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.ZoomChanged">
            <summary>
            Occurs when the zoom has changed.
            </summary>
        </member>
        <member name="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.IsCenteredChanged">
            <summary>
            Occurs when the centered setting changed.
            </summary>
        </member>
        <member name="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseWheelZoom">
            <summary>
            Occurs when the mouse wheel changes the zoom.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.OnApplyTemplate">
            <summary> Called when a template is applied to the control. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary> Called when the size of the control changes. </summary>
            <param name="info"> A <STRONG>SizeChangedInfo</STRONG> containing information about this event. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.OnScrollChanged(System.Windows.Controls.ScrollChangedEventArgs)">
            <summary> Called when the scroll position has changed. </summary>
            <param name="e"> A <STRONG>ScrollChangedEventArgs</STRONG> containing information for this event. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.OnClientSizeChanged">
            <summary> Called when the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.ClientSize"/> property value has changed and raises the <see
            cref="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.ClientSizeChanged"/> event. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.OnChildDesiredSizeChanged(System.Windows.UIElement)">
            <summary> Supports layout behavior when child elements of the control are resized. </summary>
            <param name="child"> The child element. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.MeasureOverride(System.Windows.Size)">
            <summary> Measures the content of the control. </summary>
            <returns> The size of the control content. </returns>
            <param name="constraint"> The size constraint placed on the control. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Responds to a click of the mouse wheel.
            </summary>
            <param name="e">Required arguments that describe this event.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.OnMouseWheelZoom(Atalasoft.Imaging.Wpf.MouseWheelZoomEventArgs)">
            <summary>
            Raises the <see cref="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseWheelZoom" /> event.
            </summary>
            <param name="e">The <see cref="T:Atalasoft.Imaging.Wpf.MouseWheelZoomEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary> Called when a mouse button is pressed on the control. </summary>
            <param name="e"> A <STRONG>MouseButtonEventArgs</STRONG> containing information for this event. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary> Called when the mouse is moved over the conrol. </summary>
            <param name="e"> A <STRONG>MouseEventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary> Called when a mouse button is released over the control. </summary>
            <param name="e"> A <STRONG>MouseButtonEventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.Open(System.String,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Opens an image from a filename. </summary>
            <exception> Thrown if the fileName argument is null (Nothing in VB). </exception>
            <exception> Thrown if the fileName cannot be found. </exception>
            <exception> Thrown if the frameIndex argument is invalid. </exception>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf~Atalasoft.Imaging.Wpf.AtalaImageViewer~Open(string,int,ProgressEventHandler)&quot;]/*" />
            <param name="fileName"> The filename of the image to open. </param>
            <param name="frameIndex"> The frame index to open.  This value must be zero or greater. </param>
            <param name="progress"> A <STRONG>ProgressEventHandler</STRONG> used to raise progress during the decoding process. 
            This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB). </param>
            <overloads> Opens an image into the viewer from a filename or stream. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.Open(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Opens an image from a stream. </summary>
            <exception> Thrown if the stream is null (Nothing in VB). </exception>
            <exception> Thrown if the frameIndex argument is invalid. </exception>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf~Atalasoft.Imaging.Wpf.AtalaImageViewer~Open(Stream,int,ProgressEventHandler)&quot;]/*" />
            <param name="stream"> The stream containing the image file. </param>
            <param name="frameIndex"> The frame index to open.  This value must be zero or greater. </param>
            <param name="progress"> A <STRONG>ProgressEventHandler</STRONG> used to raise progress during the decoding process. 
            This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB). </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Saves the image to a file using the provided encoder. </summary>
            <exception> Thrown if the encoder is null (Nothing in VB). </exception>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf~Atalasoft.Imaging.Wpf.AtalaImageViewer~Save(string,ImageEncoder,ProgressEventHandler)&quot;]/*" />
            <param name="fileName"> The filename for the new image.  If the file already exists, it will be overwritten.
            </param>
            <param name="encoder"> The <STRONG>ImageEncoder</STRONG> to use when saving the image. </param>
            <param name="progress"> A <STRONG>ProgressEventHandler</STRONG> used to provide progress during the save process. 
            This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB). </param>
            <overloads> Saves the image to a file or stream using the provided
            <STRONG>Atalasoft.Imaging.Codec.ImageEncoder</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Saves the image into a stream using the provided encoder. </summary>
            <exception> Thrown if the stream or encoder argument is null (Nothing in VB). </exception>
            <example>
<code><![CDATA[ Private Sub OnSaveFile(ByVal sender As Object, ByVal e As RoutedEventArgs)
    Dim dlg As Microsoft.Win32.SaveFileDialog = New Microsoft.Win32.SaveFileDialog()
    dlg.Filter = "PNG|*.png|HD Photo|*.wdp"
    If dlg.ShowDialog().Value Then
        Using fs As FileStream = New FileStream(dlg.FileName, FileMode.Create, FileAccess.Write)
            If dlg.FilterIndex = 1 Then
                Me.Viewer.Save(fs, New Atalasoft.Imaging.Codec.PngEncoder(), Nothing)
            Else
                Me.Viewer.Save(fs, New Atalasoft.Imaging.Codec.JpegXrEncoder(), Nothing)
            End If
        End Using
    End If
End Sub ]]></code>

<code><![CDATA[ private void OnSaveFile(object sender, RoutedEventArgs e)
{
    Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog();
    dlg.Filter = "PNG|*.png|HD Photo|*.wdp";
    if (dlg.ShowDialog().Value)
    {
        using (FileStream fs = new FileStream(dlg.FileName, FileMode.Create, FileAccess.Write))
        {
            if (dlg.FilterIndex == 1)
                this.Viewer.Save(fs, new Atalasoft.Imaging.Codec.PngEncoder(), null);
            else
                this.Viewer.Save(fs, new Atalasoft.Imaging.Codec.JpegXrEncoder(), null);
        }
    }
} ]]></code>
</example>
            <param name="stream"> A stream where the image will be saved. </param>
            <param name="encoder"> The <STRONG>ImageEncoder</STRONG> to use when saving the image. </param>
            <param name="progress"> A <STRONG>ProgressEventHandler</STRONG> used to provide progress during the save process. 
            This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB). </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.ApplyCommand(Atalasoft.Imaging.ImageProcessing.ImageCommand)">
            <summary> Applies a command to the current image. </summary>
            <overloads>
            <example>
<code><![CDATA[ Private Sub ApplyCommand(ByVal command As Atalasoft.Imaging.ImageProcessing.ImageCommand)
   Try
       If command Is Nothing Then
       Return
       End If

       ' If the selection tool is in use and the command
       ' supports region of interest, set it.
       Dim regCmd As Atalasoft.Imaging.ImageProcessing.ImageRegionCommand = TryCast(command, Atalasoft.Imaging.ImageProcessing.ImageRegionCommand)
       If regCmd IsNot Nothing Then
       regCmd.RegionOfInterest = GetRegionOfInterest()
       End If

       Me.Viewer.ApplyCommand(command)

       ' In case there is a selection used, clear it.
       If Me.Viewer.MouseTool IsNot Nothing Then
           Me.Viewer.MouseTool.Bounds = New Rect()
       End If
   Catch ex As Exception
       MessageBox.Show("There was an exception while processing a command."  Constants.vbCrLf  Constants.vbCrLf  ex.Message, "Error")
   End Try
End Sub ]]></code>

<code><![CDATA[ private void ApplyCommand(Atalasoft.Imaging.ImageProcessing.ImageCommand command)
{
    try
    {
        if (command == null) return;
        
        // If the selection tool is in use and the command
        // supports region of interest, set it.
        Atalasoft.Imaging.ImageProcessing.ImageRegionCommand regCmd = command as Atalasoft.Imaging.ImageProcessing.ImageRegionCommand;
        if (regCmd != null) regCmd.RegionOfInterest = GetRegionOfInterest();

        this.Viewer.ApplyCommand(command);

        // In case there is a selection used, clear it.
        if (this.Viewer.MouseTool != null)
            this.Viewer.MouseTool.Bounds = new Rect();
    }
    catch (Exception ex)
    {
        MessageBox.Show("There was an exception while processing a command.\r\n\r\n" + ex.Message, "Error");
    }
} ]]></code>
</example>
            </overloads>
            <exception> Thrown if the command argument is null (Nothing in VB). </exception>
            <param name="command"> The image command to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.PointToImage(System.Windows.Point)">
            <summary> This method returns the image pixel position at the specified viewer coordinate. </summary>
            <returns> The image pixel at the specified coordinate. </returns>
            <remarks> This method performs a simple conversion of the point and does not validate the position.  This could
            result in return values that are outside of the image area. </remarks>
            <param name="clientPoint"> The viewer coordinate to convert. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.PointFromImage(System.Windows.Point)">
            <summary> This method converts an image pixel position to viewer coordinate space. </summary>
            <returns> A point containing the viewer position. </returns>
            <remarks> This method performs a simple conversion of the point and does not validate the position.  This could
            result in return values that are outside of the viewable area. </remarks>
            <overloads>
            <example>
<code><![CDATA[ Private Function CenterIsVisible() As Boolean
    ' Find the center of the image in client space.
    Dim x As Integer = Me.Viewer.Image.Width / 2
    Dim y As Integer = Me.Viewer.Image.Height / 2

    Dim clientPoint As Point = Me.Viewer.PointFromImage(New Point(x, y))

    ' Return true if this point is visible.
    Return (clientPoint.X > 0 AndAlso clientPoint.Y > 0 AndAlso clientPoint.X < Me.Viewer.ClientSize.Width AndAlso clientPoint.Y < Me.Viewer.ClientSize.Height)
End Function ]]></code>

<code><![CDATA[ private bool CenterIsVisible()
{
    // Find the center of the image in client space.
    int x = this.Viewer.Image.Width / 2;
    int y = this.Viewer.Image.Height / 2;

    Point clientPoint = this.Viewer.PointFromImage(new Point(x, y));
    
    // Return true if this point is visible.
    return (clientPoint.X > 0  clientPoint.Y > 0 
        clientPoint.X < this.Viewer.ClientSize.Width 
        clientPoint.Y < this.Viewer.ClientSize.Height);
} ]]></code>
</example>
            </overloads>
            <param name="imagePoint"> The image pixel to convert. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.ScrollIntoView(System.Windows.Point,System.Double)">
            <summary> Scrolls an image pixel into view if it is not currently within the viewable area. </summary>
            <overloads>
            <example>
<code><![CDATA[ ' Find the center-most pixel of the image.
Dim x As Integer = Me.Viewer.Image.Width / 2
Dim y As Integer = Me.Viewer.Image.Height / 2

' Make sure it's within the viewable area.
Me.Viewer.ScrollIntoView(New Point(x, y), 10) ]]></code>

<code><![CDATA[ // Find the center-most pixel of the image.
int x = this.Viewer.Image.Width / 2;
int y = this.Viewer.Image.Height / 2;

// Make sure it's within the viewable area.
this.Viewer.ScrollIntoView(new Point(x, y), 10); ]]></code>
</example>
            </overloads>
            <param name="imagePixel"> The image pixel to bring into view. </param>
            <param name="padding"> The number of pixels around the viewable area that will trigger a scroll.  If the image pixel
            is within the viewable area but falls within this padding, it will be scrolled to force it outside of the padded
            area. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.ScrollImagePixel(System.Windows.Point,System.Windows.Point)">
            <summary> Scrolls an image pixel to the specified viewer coordinates. </summary>
            <overloads>
            <example>
<code><![CDATA[ ' Find the center-most pixel of the image.
Dim x As Integer = Me.Viewer.Image.Width / 2
Dim y As Integer = Me.Viewer.Image.Height / 2

' Find the control's visual center.
Dim x2 As Integer = CInt(Fix(Me.Viewer.ClientSize.Width)) / 2
Dim y2 As Integer = CInt(Fix(Me.Viewer.ClientSize.Height)) / 2

' Scroll the image so its center-most pixel is
' centered within the control.
Me.Viewer.ScrollImagePixel(New Point(x, y), New Point(x2, y2)) ]]></code>

<code><![CDATA[ // Find the center-most pixel of the image.
int x = this.Viewer.Image.Width / 2;
int y = this.Viewer.Image.Height / 2;

// Find the control's visual center.
int x2 = (int)this.Viewer.ClientSize.Width / 2;
int y2 = (int)this.Viewer.ClientSize.Height / 2;

// Scroll the image so its center-most pixel is
// centered within the control.
this.Viewer.ScrollImagePixel(new Point(x, y), new Point(x2, y2)); ]]></code>
</example>
            </overloads>
            <param name="imagePixel"> The image pixel to move. </param>
            <param name="clientPoint"> The position on the viewer where the pixel should be placed. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.CenterInViewer(System.Windows.Point)">
            <summary> Scrolls the image to center a pixel within the viewer (if possible). </summary>
            <remarks> The pixel provided cannot always be centered in the viewer.  For example, passing in point {0, 0} will
            show that pixel at the top left corner of the viewer because the image cannot be scrolled past this point.
            </remarks>
            <param name="imagePixel"> The pixel to center. </param>
            <overloads> These methods will attempt to scroll a pixel or rectangular area to the center of the viewer.
            </overloads>
            <overloads>
            <example>
<code><![CDATA[ ' Add an event handler for the MouseUp event.
Private Me.Viewer.MouseUp += New MouseButtonEventHandler(AddressOf Viewer_MouseUp)

'... 

Sub Viewer_MouseUp(ByVal sender As Object, ByVal e As MouseButtonEventArgs)
    If Me.Viewer.Image Is Nothing Then
        Return
    End If

    Dim pt As Point = Me.Viewer.PointToImage(e.GetPosition(Me.Viewer))
    Me.Viewer.CenterInViewer(pt)
End Sub ]]></code>

<code><![CDATA[ // Add an event handler for the MouseUp event.
this.Viewer.MouseUp += new MouseButtonEventHandler(Viewer_MouseUp);

//...

void Viewer_MouseUp(object sender, MouseButtonEventArgs e)
{
    if (this.Viewer.Image == null) return;

    Point pt = this.Viewer.PointToImage(e.GetPosition(this.Viewer));
    this.Viewer.CenterInViewer(pt);
} ]]></code>
</example>
            </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.CenterInViewer(System.Windows.Rect,System.Boolean)">
            <summary> Centers a rectangle, optionally changing the zoom level to fit the rectangle within the viewer. </summary>
            <param name="imageRect"> The rectangle to center. </param>
            <param name="zoomToFit"> If <STRONG>true</STRONG>, the zoom level will be modified to fit the entire rectangle
            within the viewer.  Setting this to <STRONG>false</STRONG> may not show the entire rectangular area within the
            viewer. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.ResolutionScaleMode">
            <summary> Gets or sets the scale mode used when the image has different X and Y resolution values. </summary>
            <value> the scale mode used when the image has different X and Y resolution values. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.ScaledResolutionHeightFactor">
            <summary> Gets the scaling being applied to the image height due to differences in the X and Y resolution values.
            </summary>
            <value> The scaling being applied to the image height due to differences in the X and Y resolution values. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.ClientSize">
            <summary> Returns the client size, excluding the scrollbars, of the viewer. </summary>
            <value> The client size of the viewer. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.RenderedImageBounds">
            <summary> Gets the bounds of the image in viewer coordinates. </summary>
            <value> The bounds of the image in viewer coordinates. </value>
            <remarks> This property takes the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.ScrollPosition"/> and <see
            cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.Zoom"/> into account when calculating the bounds. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.VisibleImageRectangle">
            <summary> Gets the visible area of the image in image coordinates. </summary>
            <value> The visible area of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.ScrollPosition">
            <summary> Gets or sets the scrollbar positions. </summary>
            <value> The scrollbar positions. </value>
            <remarks> These values must be greater than or equal to zero. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseToolScrolling">
            <summary> Gets or sets a value indicating whether the viewer will automatically scroll when a mouse tool is being
            dragged outside of the viewable area. </summary>
            <value> A value indicating if the viewer will scroll during mouse tool usage. </value>
            <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseToolScrollingZoneLength" />
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseToolScrollingZoneLength">
            <summary> Gets or sets the number of pixels around the viewable area that will trigger the viewer to scroll when a
            mouse tool is being used. </summary>
            <value> The number of pixels around the viewable area that will trigger scrolling. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.IsCentered">
            <summary> Gets or sets a value indicating whether the image will be centered within the viewable area. </summary>
            <value> A value indicating whether the image will be centered. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.Image">
            <summary> Gets or sets the <STRONG>AtalaImage</STRONG> used by the viewer. </summary>
            <value> The <STRONG>AtalaImage</STRONG> used by the viewer. </value>
            <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.Source" />
            <remarks> When this property is changed, the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.Source"/> property will also be updated to
            a new <STRONG>BitmapSource</STRONG>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.Source">
            <summary> Gets or sets the <STRONG>BitmapSource</STRONG> used by the viewer. </summary>
            <value> The <STRONG>BitmapSource</STRONG> for the viewer. </value>
            <remarks> Setting this property changes the <STRONG>AtalaImage</STRONG> used by the viewer. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.AtalaImageViewer.OnImageChanged(Atalasoft.Imaging.Wpf.ImageChangedEventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.Image"/> property has been changed or a command is applied to
            the image. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Imaging.Wpf.ImageChangedEventArgs"/> for this event. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseWheelMode">
            <summary>
            Gets or sets the mouse wheel mode.
            </summary>
            <value>
            The mouse wheel mode.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseTool">
            <summary> Gets or sets the mouse tool for the viewer. </summary>
            <value> The mouse tool for the viewer. </value>
            <example>
<code><![CDATA[ <Window x:Class="WpfControlsDemo.Window1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:atala="clr-namespace:Atalasoft.Imaging.Wpf;assembly=Atalasoft.dotImage.Wpf"
    Title="WPF Controls Demo" Height="565" Width="756"
    Background="White"
    >
  <Grid>
    <atala:AtalaImageViewer Name="Viewer">
      <atala:AtalaImageViewer.MouseTool>
        <atala:MagnifierMouseTool Size="120,120" Magnification="2.0">
          <atala:MagnifierMouseTool.Pen>
            <Pen Thickness="1">
              <Pen.Brush>
                <SolidColorBrush Color="Black"/>
              </Pen.Brush>
            </Pen>
          </atala:MagnifierMouseTool.Pen>
        </atala:MagnifierMouseTool>
      </atala:AtalaImageViewer.MouseTool>
    </atala:AtalaImageViewer>
  </Grid>
</Window> ]]></code>

<code><![CDATA[ Me.Viewer.MouseTool = New MagnifierMouseTool(New Size(120, 120), 2, New Pen(New SolidColorBrush(Colors.Black), 1)) ]]></code>

<code><![CDATA[ this.Viewer.MouseTool = new MagnifierMouseTool(new Size(120, 120), 2, new Pen(new SolidColorBrush(Colors.Black), 1)); ]]></code>
</example>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.AutoZoom">
            <summary> Gets or sets the automatic zooming performed on an image. </summary>
            <value> The automatic zooming performed on the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.Zoom">
            <summary> Gets or sets the zoom level applied to the image. </summary>
            <value> The zoom level applied to the image. </value>
            <remarks> A zoom value of 1.0 will display the image at normal size.  Values greater than zero but less than 1.0
            will reduce the size and values larger than 1.0 will increase the size. </remarks>
            <exception> Thrown if the value is less than or equal to zero. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.IsColorManaged">
            <summary> Get or set a value indicating if the control will automatically color correct images.
            </summary>
            <value> A value indicating if the control will automatically color correct images. </value>
            <remarks> When true, the control uses the <STRONG>DisplayProfile</STRONG> and the <STRONG>ColorProfile </STRONG>of
            the image to display to transform the colors to the display's colorspace.  If the
            <STRONG>OutputProfile</STRONG> is not null, then the image will be proofed to the
            <STRONG>OutputProfile</STRONG>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.RenderingIntent">
            <summary> Gets or sets the rendering intent when transforming colors to the display device. </summary>
            <value> The rendering intent when transforming colors to the display device. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.ProofIntent">
            <summary> Gets or sets the rendering intent of the color transform used when proofing images. </summary>
            <value> The rendering intent of the color transform used when proofing images. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.DisplayProfile">
            <summary> Gets or sets the <STRONG>ColorProfile</STRONG> of the display device. </summary>
            <value> The <STRONG>ColorProfile</STRONG> of the display device. </value>
            <remarks> Uses the color profile associated with the current display by default.  If no profile is associated with
            it, the sRGB profile is used. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.OutputProfile">
            <summary> Gets or sets the color profile used for proofing images to a target device.
            </summary>
            <value> The color profile used for proofing images to a target device. </value>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.ImageChangedEventArgs">
            <summary> This class is used with the <see cref="T:Atalasoft.Imaging.ImageEventHandler"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ImageChangedEventArgs._image">
            <summary> Gets the <STRONG>AtalaImage</STRONG> for the associated event. </summary>
            <value> The <STRONG>AtalaImage</STRONG> for the associated event. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ImageChangedEventArgs.#ctor(System.Windows.RoutedEvent,Atalasoft.Imaging.AtalaImage)">
            <summary> Creates a new instance of <STRONG>ImageChangedEventArgs</STRONG>. </summary>
            <param name="routedEvent"> The routed event for this event args. </param>
            <param name="image"> The <STRONG>AtalaImage</STRONG> for the associated event. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ImageChangedEventArgs.Image">
            <summary> Gets the <STRONG>AtalaImage</STRONG> for the associated event. </summary>
            <value> The <STRONG>AtalaImage</STRONG> for the associated event. </value>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.SelectionMouseToolChangedEventArgs">
            <summary> This class is used by the <see cref="E:Atalasoft.Imaging.Wpf.SelectionMouseTool.SelectionChanged"/> and <see cref="E:Atalasoft.Imaging.Wpf.SelectionMouseTool.SelectionChanging"/> events. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseToolChangedEventArgs._bounds">
            <summary> Gets the bounds for the selection. </summary>
            <value> The bounds for the selection. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseToolChangedEventArgs.#ctor(System.Windows.Rect)">
            <summary> Creates a new instance of <STRONG>SelectionMouseToolChangedEventArgs</STRONG>. </summary>
            <param name="bounds"> The bounds for the new selection. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseToolChangedEventArgs.Bounds">
            <summary> Gets the bounds for the selection. </summary>
            <value> The bounds for the selection. </value>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.ImagePixelEventArgs">
            <summary> This class is used by the <see cref="E:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseMovePixel"/> event. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ImagePixelEventArgs._pixel">
            <summary> Gets the pixel position for the associated event. </summary>
            <value> The pixel position for the associated event. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ImagePixelEventArgs.#ctor(System.Windows.RoutedEvent,System.Windows.Point)">
            <summary> Creates a new instance of <STRONG>ImagePixelEventArgs</STRONG>. </summary>
            <param name="routedEvent"> The routed event for this event args. </param>
            <param name="pixel"> The pixel position for the associated event. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ImagePixelEventArgs.Pixel">
            <summary> Gets the pixel position for the associated event. </summary>
            <value> The pixel position for the associated event. </value>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.MouseWheelZoomEventArgs">
            <summary>
            Represents an event that files when a mouse wheel action results in a zoom in or zoom out.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseWheelZoomEventArgs.#ctor(System.Windows.RoutedEvent,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Wpf.MouseWheelZoomEventArgs"/> class.
            </summary>
            <param name="routedEvent">The routed event.</param>
            <param name="zoom">The zoom.</param>
            <param name="delta">The change from last time.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.MouseWheelZoomEventArgs.Zoom">
            <summary>
            Gets or sets the zoom.
            </summary>
            <value>
            The zoom value
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">value;Zoom cannot be less than 0.001.</exception>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.MouseWheelZoomEventArgs.Delta">
            <summary>
            Gets the delta for the zoom
            </summary>
            <value>
            The change in the zoom.
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.MouseWheelMode">
            <summary>
            Defines how the mouse wheel will act in the control
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.MouseWheelMode.Scroll">
            <summary>
            The mouse wheel will act as a scroll controller
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.MouseWheelMode.Zoom">
            <summary>
            The mouse whell will act as a zoom in/zoom out controller
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.MouseToolBehavior">
            <summary> Describes the way a selection is created by the user. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.MouseToolBehavior.MultiClick">
            <summary> The selection is created by making two mouse clicks; one for the each opposite corner of the selection. 
            This is useful for users that may have a hard time dragging the mouse with a button pressed. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.MouseToolBehavior.ClickAndDrag">
            <summary> The selection is created by hold down a mouse button and dragging. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.SelectionMouseToolType">
            <summary> Describes the type of selection that will be drawn. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseToolType.Rectangle">
            <summary> A rectangular selection. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseToolType.Ellipse">
            <summary> An elliptical selection. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseToolType.Freehand">
            <summary> A freehand selection. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.AutoZoomMode">
            <summary> Describes the type of automatic zooming to perform on the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AutoZoomMode.None">
            <summary> No action is taken. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AutoZoomMode.BestFit">
            <summary> Zoom is calculated so the entire image can be seen in the viewer without scrollbars. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AutoZoomMode.BestFitReduceOnly">
            <summary> The same as <STRONG>BestFit</STRONG> but will not perform a zoom if the image is smaller than the viewer.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AutoZoomMode.FitToWidth">
            <summary> Zoom is calculated so the image will fit the width of the viewer. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AutoZoomMode.FitToHeight">
            <summary> Zoom is calculated so the image will fit the height of the viewer. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.ZoomToolMode">
            <summary> Describes the action taken by a button press. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomToolMode.None">
            <summary> No action is taken. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomToolMode.ZoomIn">
            <summary> The zoom level is increased. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomToolMode.ZoomOut">
            <summary> The zoom level is decreased. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomToolMode.ZoomSelection">
            <summary> A selection rectangle is started and zoom will be calculated so the selection fits within the viewer.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.AspectRatioMode">
            <summary> Describes the action taken when the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.AspectRatio"/> property of a <see
            cref="T:Atalasoft.Imaging.Wpf.SelectionMouseTool"/> is used and the user drags one of the corner grips. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AspectRatioMode.Adjust">
            <summary> The <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.AspectRatio"/> property is adjusted to the new ratio created by the
            user. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AspectRatioMode.Reset">
            <summary> The <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.AspectRatio"/> property is reset to 0. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.AspectRatioMode.Prevent">
            <summary> The user is not allowed to drag the corners of the selection. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.ResolutionScaleMode">
            <summary> Defines the scaling mode applied when an image has different X and Y resolution values. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ResolutionScaleMode.None">
            <summary> No scaling is performed. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ResolutionScaleMode.Fax">
            <summary> Only 1-bit images will perform scaling. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ResolutionScaleMode.All">
            <summary> All images will perform scaling. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.MagnifierMouseTool">
            <summary>
            This tool is used to provide a magnified area of the image. Use this class by
            setting the AtalaViewer.MouseTool property to an instance of the
            <strong>MagnifierMouseTool</strong> class.
            </summary>
            <summary> This mouse tool is used to magnify an area of the image.  The end-user initiates magnification by pressing
            a mouse button on the image.  Releasing the mouse button will hide the magnifier. </summary>
            <example>
<code><![CDATA[ <Window x:Class="WpfControlsDemo.Window1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:atala="clr-namespace:Atalasoft.Imaging.Wpf;assembly=Atalasoft.dotImage.Wpf"
    Title="WPF Controls Demo" Height="565" Width="756"
    Background="White"
    >
  <Grid>
    <atala:AtalaImageViewer Name="Viewer">
      <atala:AtalaImageViewer.MouseTool>
        <atala:MagnifierMouseTool Size="120,120" Magnification="2.0">
          <atala:MagnifierMouseTool.Pen>
            <Pen Thickness="1">
              <Pen.Brush>
                <SolidColorBrush Color="Black"/>
              </Pen.Brush>
            </Pen>
          </atala:MagnifierMouseTool.Pen>
        </atala:MagnifierMouseTool>
      </atala:AtalaImageViewer.MouseTool>
    </atala:AtalaImageViewer>
  </Grid>
</Window> ]]></code>

<code><![CDATA[ Me.Viewer.MouseTool = New MagnifierMouseTool(New Size(120, 120), 2, New Pen(New SolidColorBrush(Colors.Black), 1)) ]]></code>

<code><![CDATA[ this.Viewer.MouseTool = new MagnifierMouseTool(new Size(120, 120), 2, new Pen(new SolidColorBrush(Colors.Black), 1)); ]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.MagnifierMouseTool.PenProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.MagnifierMouseTool.Pen"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.MagnifierMouseTool.Pen"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.MagnifierMouseTool.MagnificationProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.MagnifierMouseTool.Magnification"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.MagnifierMouseTool.Magnification"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.MagnifierMouseTool.SizeProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.MagnifierMouseTool.Size"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.MagnifierMouseTool.Size"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.MagnifierMouseTool.RenderGeometryProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.MagnifierMouseTool.RenderGeometry"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.MagnifierMouseTool.RenderGeometry"/> dependency property. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MagnifierMouseTool.#ctor">
            <summary>
            Creates a new instance of <strong>MagnifierMouseTool</strong> with default
            settings.
            </summary>
            <summary> Creates a new instance of <STRONG>MagnifierMouseTool</STRONG>. </summary>
            <overloads> Creates a <STRONG>MagnifierMouseTool</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MagnifierMouseTool.#ctor(System.Windows.Size,Atalasoft.Imaging.Wpf.MouseToolBehavior,System.Double,System.Windows.Media.Pen)">
            <summary> Creates a new instance of <STRONG>MagnifierMouseTool</STRONG> at the specified size and magnification.
            </summary>
            <param name="size"> The size of the magnifier. </param>
            <param name="toolBehavior"> Indicates whether the magnifier will use the click-and-drag or two-click method.
            </param>
            <param name="magnification"> The magnification to apply. </param>
            <param name="pen"> The pen used to outline the magnifier. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MagnifierMouseTool.#ctor(System.Windows.Media.Geometry,Atalasoft.Imaging.Wpf.MouseToolBehavior,System.Double,System.Windows.Media.Pen)">
            <summary> Creates a new instance of <STRONG>MagnifierMouseTool</STRONG> from a <STRONG>Geometry</STRONG> object.
            </summary>
            <param name="renderGeometry"> The <STRONG>Geometry</STRONG> object used to define the shape of the magnifier.
            </param>
            <param name="toolBehavior"> Indicates whether the magnifier will use the click-and-drag or two-click method.
            </param>
            <param name="magnification"> The magnification to apply. </param>
            <param name="pen"> The pen used to outline the magnifier. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.MagnifierMouseTool.Pen">
            <summary> Gets or sets the pen used to outline the magnifier. </summary>
            <value> The pen used to outline the magnifier. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.MagnifierMouseTool.Magnification">
            <summary> Gets or sets the magnification level for the tool. </summary>
            <value> The magnification level for the tool. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.MagnifierMouseTool.Size">
            <summary> Gets or sets the size of the magnifier. </summary>
            <value> The size of the magnifier. </value>
            <remarks> Setting this property will remove the <see cref="P:Atalasoft.Imaging.Wpf.MagnifierMouseTool.RenderGeometry"/> and revert to a
            rectangular shape. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.MagnifierMouseTool.RenderGeometry">
            <summary> Gets or sets the <STRONG>Geometry</STRONG> used to define the shape of the magnifier. </summary>
            <value> The <STRONG>Geometry</STRONG> used to define the shape of the magnifier. </value>
            <remarks> Setting this property to a non-null value will automatically change the <see
            cref="P:Atalasoft.Imaging.Wpf.MagnifierMouseTool.Size"/> to fit the <STRONG>Geometry</STRONG>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.MagnifierMouseTool.SupportedMouseToolBehaviors">
            <summary>
            Gets an array of supported <see cref="T:Atalasoft.Imaging.Wpf.MouseToolBehavior" /> values for this tool.
            </summary>
            <value>
            An array of supported behaviors, defaulting to ClickAndDrag and MultiClick
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MagnifierMouseTool.CreateInstanceCore">
            <summary> Returns a new instance of <STRONG>MagnifierMouseTool</STRONG>. </summary>
            <returns> A new instance of <STRONG>MagnifierMouseTool</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MagnifierMouseTool.HitTestCore(System.Windows.Point)">
            <summary>
            Called by the <see cref="T:Atalasoft.Imaging.Wpf.AtalaImageViewer" /> to determine if a point is over the
            <STRONG>MouseTool</STRONG>.
            </summary>
            <param name="point">The point in image coordinates.</param>
            <returns>
              <STRONG>True</STRONG> if the point is over the <STRONG>MouseTool</STRONG>.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MagnifierMouseTool.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a mouse button is pressed.
            </summary>
            <param name="e">A <STRONG>MouseButtonEventArgs</STRONG> containing information for this event.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MagnifierMouseTool.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse is moved over the mouse tool bounds or when dragging the tool.
            </summary>
            <param name="e">A <STRONG>MouseEventArgs</STRONG> containing information for this event.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MagnifierMouseTool.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the mouse button is released.
            </summary>
            <param name="e">A <STRONG>MouseButtonEventArgs</STRONG> containing information for this event.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MagnifierMouseTool.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called when the tool must render itself.
            </summary>
            <param name="drawingContext">A <STRONG>DrawingContext</STRONG> used to render.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.MouseTool">
            <summary> This is an abstract class from which all mouse tools must derive. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.MouseTool.BoundsProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.MouseTool.Bounds"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.MouseTool.Bounds"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.MouseTool.CursorProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.MouseTool.Cursor"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.MouseTool.Cursor"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.MouseTool.ToolBehaviorProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.MouseTool.ToolBehavior"/> property. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.MouseTool._isCreating">
            <summary> Gets a value indicating whether the mouse tool is currently being created. </summary>
            <value> A value indicating if the mouse tool is being created. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.MouseTool.Viewer">
            <summary> Gets the <see cref="T:Atalasoft.Imaging.Wpf.AtalaImageViewer"/> which is using the <STRONG>MouseTool</STRONG>. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.Wpf.AtalaImageViewer"/> using this tool. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.MouseTool.IsCreating">
            <summary> Gets a value indicating whether the mouse tool is currently being created. </summary>
            <value> A value indicating if the mouse tool is being created. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.SetCreatingState(System.Boolean)">
            <summary> Sets the value for the <see cref="P:Atalasoft.Imaging.Wpf.MouseTool.IsCreating"/> property. </summary>
            <remarks> The value of <see cref="P:Atalasoft.Imaging.Wpf.MouseTool.IsCreating"/> is used by the <see cref="T:Atalasoft.Imaging.Wpf.AtalaImageViewer"/> for
            scrolling the viewer when <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.MouseToolScrolling"/> is enabled.  This method only needs to
            be used if the tool supports <STRONG>MouseToolBehavior.MultiClick</STRONG>. </remarks>
            <param name="isCreating"> The value to use for <see cref="P:Atalasoft.Imaging.Wpf.MouseTool.IsCreating"/>. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.MouseTool.Bounds">
            <summary> Gets or sets the bounds used by the <STRONG>MouseTool</STRONG>. </summary>
            <value> The bounds for the tool. </value>
            <remarks> Not all mouse tools have a bounds.  For instance, the <see cref="T:Atalasoft.Imaging.Wpf.ZoomMouseTool"/> applies a zoom change on
            click, but does not contain a bounding rectangle. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.MouseTool.ToolBehavior">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.MouseTool.ToolBehavior"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.MouseTool.ToolBehavior"/> dependency property. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.MouseTool.SupportedMouseToolBehaviors">
            <summary> Gets an array of supported <see cref="T:Atalasoft.Imaging.Wpf.MouseToolBehavior"/> values for this tool. </summary>
            <value> An array of supported behaviors. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.IsMouseToolBehaviorSupported(Atalasoft.Imaging.Wpf.MouseToolBehavior)">
            <summary> Indicates if the specified <see cref="T:Atalasoft.Imaging.Wpf.MouseToolBehavior"/> is supported by the <STRONG>MouseTool</STRONG>.
            </summary>
            <returns> A value indicating whether the specified behavior is supported. </returns>
            <param name="behavior"> The behavior to test. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.InvaidateVisual">
            <summary> Use this method to force the <see cref="T:Atalasoft.Imaging.Wpf.AtalaImageViewer"/> to redraw itself and call the <see
            cref="M:Atalasoft.Imaging.Wpf.MouseTool.OnRender(System.Windows.Media.DrawingContext)"/> method. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.GetImagePosition(System.Windows.Input.MouseEventArgs,System.Boolean)">
            <summary> Returns the image position from a <STRONG>MouseEventArgs</STRONG>. </summary>
            <returns> The converted position in image coordinates. </returns>
            <param name="e"> The <STRONG>MouseEventArgs</STRONG> from a mouse event. </param>
            <param name="confineToImage"> Indicates whether the point should be confined to the image area.  Setting this to
            <STRONG>false</STRONG> will allow positions outside of the image to be returned. </param>
            <overloads> These methods are used to get the image position from mouse events. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.GetImagePosition(System.Windows.Input.MouseButtonEventArgs,System.Boolean)">
            <returns> The converted position in image coordinates. </returns>
            <summary> Returns the image position from a <STRONG>MouseButtonEventArgs</STRONG>. </summary>
            <param name="e"> The <STRONG>MouseButtonEventArgs</STRONG> from a mouse event. </param>
            <param name="confineToImage"> Indicates whether the point should be confined to the image area.  Setting this to
            <STRONG>false</STRONG> will allow positions outside of the image to be returned. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.GetImagePosition(System.Windows.Point,System.Boolean)">
            <returns> The converted position in image coordinates. </returns>
            <summary> Returns the image position from a point in viewer coordinates. </summary>
            <param name="controlPoint"> The viewer point to convert. </param>
            <param name="confineToImage"> Indicates whether the point should be confined to the image area.  Setting this to
            <STRONG>false</STRONG> will allow positions outside of the image to be returned. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.ConfineToImage(System.Windows.Point)">
            <summary> Returns a modified <STRONG>Point</STRONG> that is confined to the image area. </summary>
            <returns> The confined point. </returns>
            <remarks> If no image is currently loaded, this method will return a new <STRONG>Point</STRONG>. </remarks>
            <param name="imagePoint"> The point to confine. </param>
            <overloads> These methods are used to confine a <STRONG>Point</STRONG> or <STRONG>Rect</STRONG> to the image area.
            </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.ConfineToImage(System.Windows.Rect)">
            <summary> Returns a <STRONG>Rect</STRONG> that is confined to the image. </summary>
            <returns> The confined <STRONG>Rect</STRONG>. </returns>
            <remarks> If no image is currently loaded, this method will return a new <STRONG>Rect</STRONG>. </remarks>
            <param name="imageRect"> The <STRONG>Rect</STRONG> to confine. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.ConfineToRenderedImage(System.Windows.Rect)">
            <summary> Returns a rectangle confined to the rendered size of the image. </summary>
            <returns> The constrained rectangle. </returns>
            <param name="imageRect"> The rectangle to constrain. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.MouseTool.Cursor">
            <summary> Gets or sets the cursor for the <STRONG>MouseTool</STRONG>. </summary>
            <value> The cursor for the <STRONG>MouseTool</STRONG>. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.OnViewerChanged">
            <summary> Called when the <STRONG>MouseTool</STRONG> becomes or is removed as the active tool for the <see
            cref="T:Atalasoft.Imaging.Wpf.AtalaImageViewer"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary> Called when the mouse button is released. </summary>
            <param name="e"> A <STRONG>MouseButtonEventArgs</STRONG> containing information for this event. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary> Called when the mouse is moved over the mouse tool bounds or when dragging the tool. </summary>
            <param name="e"> A <STRONG>MouseEventArgs</STRONG> containing information for this event. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary> Called when a mouse button is pressed. </summary>
            <param name="e"> A <STRONG>MouseButtonEventArgs</STRONG> containing information for this event. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.OnRender(System.Windows.Media.DrawingContext)">
            <summary> Called when the tool must render itself. </summary>
            <param name="drawingContext"> A <STRONG>DrawingContext</STRONG> used to render. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.OnScrollChanged(System.Windows.Controls.ScrollChangedEventArgs)">
            <summary> Called when the scroll position has changed. </summary>
            <param name="e"> A <STRONG>ScrollChangedEventArgs</STRONG> containing information about this event. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.OnImageChanged">
            <summary> Called when the image in the <see cref="T:Atalasoft.Imaging.Wpf.AtalaImageViewer"/> has changed. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.MouseTool.HitTestCore(System.Windows.Point)">
            <summary> Called by the <see cref="T:Atalasoft.Imaging.Wpf.AtalaImageViewer"/> to determine if a point is over the
            <STRONG>MouseTool</STRONG>. </summary>
            <returns> <STRONG>True</STRONG> if the point is over the <STRONG>MouseTool</STRONG>. </returns>
            <param name="point"> The point in image coordinates. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.PanningMouseTool">
            <summary> The <STRONG>PanningMouseTool</STRONG> is used give end-users the ability to drag an image around the
            viewport with the mouse. </summary>
            <example>
<code><![CDATA[ <Window x:Class="WpfControlsDemo.Window1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:atala="clr-namespace:Atalasoft.Imaging.Wpf;assembly=Atalasoft.dotImage.Wpf"
    Title="WPF Controls Demo" Height="565" Width="756"
    Background="White"
    >
  <Grid>
    <atala:AtalaImageViewer Name="Viewer">
      <atala:AtalaImageViewer.MouseTool>
        <atala:PanningMouseTool/>
      </atala:AtalaImageViewer.MouseTool>
    </atala:AtalaImageViewer>
  </Grid>
</Window> ]]></code>

<code><![CDATA[ Me.Viewer.MouseTool = New PanningMouseTool() ]]></code>

<code><![CDATA[ this.Viewer.MouseTool = new PanningMouseTool(); ]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.PanningMouseTool.GrabCursorProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.PanningMouseTool.GrabCursor"/> dependency property. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.PanningMouseTool.#ctor">
            <summary> Creates a new instance of <STRONG>PanningMouseTool</STRONG> with no grab cursor. </summary>
            <overloads> Creates a new instance of <STRONG>PanningMouseTool</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.PanningMouseTool.#ctor(System.Windows.Input.Cursor,System.Windows.Input.Cursor)">
            <summary> Creates a new instance of <STRONG>PanningMouseTool</STRONG> specifying the cursors to use. </summary>
            <param name="standardCursor"> The normal cursor that will be used for the tool. </param>
            <param name="grabCursor"> The cursor to use when the mouse button is pressed.  This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.PanningMouseTool.GrabCursor">
            <summary> Gets or sets the cursor to use when the mouse button is pressed. </summary>
            <value> The cursor used when the mouse button is pressed. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.PanningMouseTool.CreateInstanceCore">
            <summary> Returns a new instance of <STRONG>PanningMouseTool</STRONG>. </summary>
            <returns> A new instance of <STRONG>PanningMouseTool</STRONG>. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.PanningMouseTool.SupportedMouseToolBehaviors">
            <summary>
            Gets an array of supported <see cref="T:Atalasoft.Imaging.Wpf.MouseToolBehavior" /> values for this tool.
            </summary>
            <value>
            An array of supported behaviors. Current default is ClickAndDrag
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.PanningMouseTool.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a mouse button is pressed.
            </summary>
            <param name="e">A <STRONG>MouseButtonEventArgs</STRONG> containing information for this event.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.PanningMouseTool.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse is moved over the mouse tool bounds or when dragging the tool.
            </summary>
            <param name="e">A <STRONG>MouseEventArgs</STRONG> containing information for this event.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.PanningMouseTool.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the mouse button is released.
            </summary>
            <param name="e">A <STRONG>MouseButtonEventArgs</STRONG> containing information for this event.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.Properties.Resources.xpsLibrary_not_created">
             <summary>
               Looks up a localized string similar to An error has occurred in attempt to unpack Atalasoft.XPS.lib.dll. Error message: {0}
            
            If the problem still exists, please, contact with system administrator for further assistance..
             </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.Properties.Resources.xpsLibrary_not_found">
            <summary>
              Looks up a localized string similar to The library is corrupt. Try to reinstall Atalasoft dotImage and restart an application. If the problem still exists, please, contact with technical support for further assistance..
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.Properties.Resources.xpsLibrary_not_loaded">
            <summary>
              Looks up a localized string similar to An error has occured in attempt to initialize Atalasoft.XPS.lib.dll. See the inner exception for additional technical details..
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.SelectionMouseTool">
            <summary> <para>The <STRONG>SelectionMouseTool</STRONG> provides the ability for end-users to select an area of the
            image for processing.  </para>
            <para>The tool can be animated using the built-in animation feature or by providing custom animation.  A masked
            selection feature is provided which (by default) will darken the image except for the selected area.  This effect
            can be modified by setting the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.MaskedImageCommand" /> property.</para> </summary>
            <example>
<code><![CDATA[ <Window x:Class="WpfControlsDemo.Window1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:atala="clr-namespace:Atalasoft.Imaging.Wpf;assembly=Atalasoft.dotImage.Wpf"
    Title="WPF Controls Demo" Height="565" Width="756"
    Background="White"
    >
  <Grid>
    <atala:AtalaImageViewer Name="Viewer">
      <atala:AtalaImageViewer.MouseTool>
        <atala:SelectionMouseTool/>
      </atala:AtalaImageViewer.MouseTool>
    </atala:AtalaImageViewer>
  </Grid>
</Window> ]]></code>

<code><![CDATA[ Me.Viewer.MouseTool = New SelectionMouseTool() ]]></code>

<code><![CDATA[ this.Viewer.MouseTool = new SelectionMouseTool(); ]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseTool.LineColorProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.LineColor"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.LineColor"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseTool.IsAnimatedProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.IsAnimated"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.IsAnimated"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseTool.AnimationDurationProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.AnimationDuration"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.AnimationDuration"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseTool.ConfineSelectionToImageProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.ConfineSelectionToImage"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.ConfineSelectionToImage"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseTool.SelectionTypeProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.SelectionType"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.SelectionType"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseTool.IsMaskedProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.IsMasked"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.IsMasked"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseTool.MaskedImageCommandProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.MaskedImageCommand"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.MaskedImageCommand"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseTool.AspectRatioProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.AspectRatio"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.AspectRatio"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseTool.AspectRatioCornerModeProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.AspectRatioCornerMode"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.AspectRatioCornerMode"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseTool.LineBackgroundColorProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.LineBackgroundColor"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.LineBackgroundColor"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseTool.PenProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.Pen"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.Pen"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseTool.FillProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.Fill"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.Fill"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.SelectionMouseTool.MaintainPenThicknessProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.MaintainPenThickness"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.MaintainPenThickness"/> dependency property. </value>
        </member>
        <member name="E:Atalasoft.Imaging.Wpf.SelectionMouseTool.SelectionChanged">
            <summary> Raised when the selection has finished being modified. </summary>
        </member>
        <member name="E:Atalasoft.Imaging.Wpf.SelectionMouseTool.SelectionChanging">
            <summary> Raised while the selection is being modfied to provide live feedback to the user. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.#ctor">
            <summary> Creates a new instance of <STRONG>SelectionMouseTool</STRONG> using default values. </summary>
            <overloads> Creates a new instance of <STRONG>SelectionMouseTool</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.#ctor(System.Windows.Rect)">
            <summary> Creates a new instance of <STRONG>SelectionMouseTool</STRONG> specifying the selection bounds. </summary>
            <param name="bounds"> The selection bounds in image coordinates. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.#ctor(Atalasoft.Imaging.Wpf.SelectionMouseToolType)">
            <summary> Creates a new instance of <STRONG>SelectionMouseTool</STRONG> specifying the selection type. </summary>
            <param name="selectionType"> The type of selection for the tool. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.#ctor(Atalasoft.Imaging.Wpf.SelectionMouseToolType,Atalasoft.Imaging.Wpf.MouseToolBehavior,System.Boolean,System.Windows.Duration)">
            <summary> Creates a new instance of <STRONG>SelectionMouseTool</STRONG> specifying the selection type, behavior and
            animation options. </summary>
            <param name="selectionType"> The type of selection for the tool. </param>
            <param name="toolBehavior"> The behavior for the tool. </param>
            <param name="animated"> Indicates whether the built-in animation will be used. </param>
            <param name="animationDuration"> The duration for the built-in animation. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.#ctor(Atalasoft.Imaging.Wpf.SelectionMouseToolType,Atalasoft.Imaging.Wpf.MouseToolBehavior,System.Boolean,Atalasoft.Imaging.ImageProcessing.ImageCommand)">
            <summary> Creates a new instance of <STRONG>SelectionMouseTool</STRONG> specifying the selection type, behavior and
            masking options. </summary>
            <param name="selectionType"> The type of selection for the tool. </param>
            <param name="toolBehavior"> The behavior for the tool. </param>
            <param name="masked"> Indicates whether the selection using masking on the image. </param>
            <param name="maskedImageCommand"> The <STRONG>ImageCommand</STRONG> used for the masking effect. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.#ctor(Atalasoft.Imaging.Wpf.SelectionMouseToolType,Atalasoft.Imaging.Wpf.MouseToolBehavior,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Brush,System.Boolean,System.Boolean)">
            <summary> Creates a new instance of <STRONG>SelectionMouseTool</STRONG> specifying the selection type, behavior and
            colors. </summary>
            <param name="selectionType"> The type of selection for the tool. </param>
            <param name="toolBehavior"> The behavior for the tool. </param>
            <param name="lineColor"> The pen color for the line. </param>
            <param name="lineBackgroundColor"> The background pen color for the line. </param>
            <param name="fill"> The brush used to fill the selection. </param>
            <param name="maintainPenThickness"> Indicates whether the pen thickness will render the same size or scale with the
            zoom level. </param>
            <param name="confineSelectionToImage"> Indicates whether the selection should be confined to the image area.
            </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.#ctor(Atalasoft.Imaging.Wpf.SelectionMouseToolType,Atalasoft.Imaging.Wpf.MouseToolBehavior,System.Windows.Media.Pen,System.Windows.Media.Color,System.Windows.Media.Brush,System.Boolean,System.Boolean)">
            <summary> Creates a new instance of <STRONG>SelectionMouseTool</STRONG> specifying the selection type, behavior and
            pen. </summary>
            <param name="selectionType"> The type of selection for the tool. </param>
            <param name="toolBehavior"> The behavior for the tool. </param>
            <param name="pen"> The pen used to draw the line. </param>
            <param name="lineBackgroundColor"> The background pen color for the line. </param>
            <param name="fill"> The brush used to fill the selection. </param>
            <param name="maintainPenThickness"> Indicates whether the pen thickness will render the same size or scale with the
            zoom level. </param>
            <param name="confineSelectionToImage"> Indicates whether the selection should be confined to the image area.
            </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.#ctor(System.Windows.Rect,Atalasoft.Imaging.Wpf.SelectionMouseToolType,Atalasoft.Imaging.Wpf.MouseToolBehavior,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Brush,System.Boolean,System.Boolean)">
            <summary> Creates a new instance of <STRONG>SelectMouseTool</STRONG> specifying the bounds, selection type, behavior
            and colors. </summary>
            <param name="bounds"> The selection bounds in image coordinates. </param>
            <param name="selectionType"> The type of selection for the tool. </param>
            <param name="toolBehavior"> The behavior for the tool. </param>
            <param name="lineColor"> The pen color for the line. </param>
            <param name="lineBackgroundColor"> The background pen color for the line. </param>
            <param name="fill"> The brush used to fill the selection. </param>
            <param name="maintainPenThickness"> Indicates whether the pen thickness will render the same size or scale with the
            zoom level. </param>
            <param name="confineSelectionToImage"> Indicates whether the selection should be confined to the image area.
            </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.#ctor(System.Windows.Rect,Atalasoft.Imaging.Wpf.SelectionMouseToolType,Atalasoft.Imaging.Wpf.MouseToolBehavior,System.Windows.Media.Pen,System.Windows.Media.Color,System.Windows.Media.Brush,System.Boolean,System.Boolean)">
            <summary> Creates a new instance of <STRONG>SelectionMouseTool</STRONG> specifying the bounds, selection type,
            behavior and pen. </summary>
            <param name="bounds"> The selection bounds in image coordinates. </param>
            <param name="selectionType"> The type of selection for the tool. </param>
            <param name="toolBehavior"> The behavior for the tool. </param>
            <param name="pen"> The pen used to draw the line. </param>
            <param name="lineBackgroundColor"> The background pen color for the line. </param>
            <param name="fill"> The brush used to fill the selection. </param>
            <param name="maintainPenThickness"> Indicates whether the pen thickness will render the same size or scale with the
            zoom level. </param>
            <param name="confineSelectionToImage"> Indicates whether the selection should be confined to the image area.
            </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.#ctor(System.Windows.Rect,Atalasoft.Imaging.Wpf.SelectionMouseToolType,Atalasoft.Imaging.Wpf.MouseToolBehavior,System.Windows.Media.Pen,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Brush,System.Boolean,System.Boolean,System.Double,Atalasoft.Imaging.Wpf.AspectRatioMode,System.Boolean,System.Windows.Duration,System.Boolean,Atalasoft.Imaging.ImageProcessing.ImageCommand)">
            <summary> Creates a new instance of <STRONG>SelectionMouseTool</STRONG> specifying its property values. </summary>
            <param name="bounds"> The selection bounds in image coordinates. </param>
            <param name="selectionType"> The type of selection for the tool. </param>
            <param name="toolBehavior"> The behavior for the tool. </param>
            <param name="pen"> The pen used to draw the line. </param>
            <param name="lineColor"> The pen color for the line if the Pen is <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
            <param name="lineBackgroundColor"> The background pen color for the line. </param>
            <param name="fill"> The brush used to fill the selection. </param>
            <param name="maintainPenThickness"> Indicates whether the pen thickness will render the same size or scale with the
            zoom level. </param>
            <param name="confineSelectionToImage"> Indicates whether the selection should be confined to the image area.
            </param>
            <param name="aspectRatio"> The width to height aspect ratio of the bounds.  A value of zero will disable this
            feature. </param>
            <param name="aspectRatioCornerMode"> Determines how the selection will act when the user grabs a corner to resize
            and <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.AspectRatio"/> is not zero. </param>
            <param name="animated"> Indicates whether the built-in animation will be used. </param>
            <param name="animationDuration"> The duration for the built-in animation. </param>
            <param name="masked"> Indicates whether the selection using masking on the image. </param>
            <param name="maskedImageCommand"> The <STRONG>ImageCommand</STRONG> used for the masking effect. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.MaintainPenThickness">
            <summary> Gets or sets a value indicating whether the pen thickness will render at the same size or if it will be
            scaled along with the image zoom level. </summary>
            <value> A value indicating whether the pen thickness will render at the same size or if it will be scaled along with
            the image zoom level. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.Fill">
            <summary> Gets or sets the brush used to fill the selection. </summary>
            <value> The brush used to fill the selection. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.Pen">
            <summary> Gets or sets the pen used to draw the selection. </summary>
            <value> The pen used to draw the selection. </value>
            <remarks> When this property is set, the built-in animation feature will be disabled.  This allows developer to
            apply their own custom animations. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.IsEmpty">
            <summary> Gets a value indicating if the tool has a valid selection. </summary>
            <value> A value indicating if the tool has a valid selection. </value>
            <remarks> If either the width or height of the selection <see cref="P:Atalasoft.Imaging.Wpf.MouseTool.Bounds"/> is zero, this property will
            return <STRONG>false</STRONG>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.MaskedImageCommand">
            <summary> Gets or sets the <STRONG>ImageCommand</STRONG> used to for selection masking. </summary>
            <value> The <STRONG>ImageCommand</STRONG> used for selection masking. </value>
            <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.IsMasked" />
            <remarks> The default <STRONG>ImageCommand</STRONG> used is the <STRONG>BrightnessContrastCommand</STRONG> with its
            brightness level set to -40. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.ConfineSelectionToImage">
            <summary> Gets or sets a value indicating whether the selection is confined to the image area. </summary>
            <value> A value indicating whether the selection is confined to the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.IsMasked">
            <summary> Gets or sets a value indicating whether the selection will use masking. </summary>
            <value> A value indicating whether the selection will use masking. </value>
            <remarks> <para>Masking is a feature in which the image is processed with the <see
            cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.MaskedImageCommand"/> except for the selected area.</para>
            <para>Masked selection cannot be used with the freehand selection type.</para> </remarks>
            <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.MaskedImageCommand" />
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.LineColor">
            <summary> Gets or sets the line color used with the built-in pen. </summary>
            <value> The line color for the built-in pen. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.LineBackgroundColor">
            <summary> Gets or sets the color used as the background line. </summary>
            <value> The color used for the background line. </value>
            <remarks> Using a background line color helps the selection visibility when selecting over dark colored images.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.IsAnimated">
            <summary> Gets or sets a value indicating whether the built-in animation will be used. </summary>
            <value> A value indicating whether the built-in animation will be used. </value>
            <remarks> If the <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.Pen"/> property has been set, the animation feature is ignored.
            </remarks>
            <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.AnimationDuration" />
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.AnimationDuration">
            <summary> Gets or sets the duration used with the built-in animation. </summary>
            <value> The duration for the animation. </value>
            <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.IsAnimated" />
            <remarks> <see cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.IsAnimated"/> must be <STRONG>true</STRONG> for this property to take
            affect. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.SelectionType">
            <summary> Gets or sets the type of selection to render. </summary>
            <value> The type of selection to render. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.AspectRatio">
            <summary> Gets or sets the width-to-height ratio for the selection. </summary>
            <value> The width-to-height ratio for the selection. </value>
            <example>
<code><![CDATA[ <Window x:Class="WpfControlsDemo.Window1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:atala="clr-namespace:Atalasoft.Imaging.Wpf;assembly=Atalasoft.dotImage.Wpf"
    Title="WPF Controls Demo" Height="565" Width="756"
    Background="White"
    >
  <Grid>
    <atala:AtalaImageViewer Name="Viewer">
      <atala:AtalaImageViewer.MouseTool>
        <atala:SelectionMouseTool AspectRatio="1.5"/>
      </atala:AtalaImageViewer.MouseTool>
    </atala:AtalaImageViewer>
  </Grid>
</Window> ]]></code>

<code><![CDATA[ Me.Viewer.MouseTool = SelectionMouseTool tool = New SelectionMouseTool()
tool.AspectRatio = 1.5
Me.Viewer.MouseTool = tool ]]></code>

<code><![CDATA[ SelectionMouseTool tool = new SelectionMouseTool();
tool.AspectRatio = 1.5;
this.Viewer.MouseTool = tool; ]]></code>
</example>
            <remarks> Setting <STRONG>AspectRatio</STRONG> to zero will disable the feature. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.AspectRatioCornerMode">
            <summary> Gets or sets behavior applied when a selection corner is dragged and <see
            cref="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.AspectRatio"/> is greater than zero. </summary>
            <value> The behavior applied when a selection corner is dragged. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.SelectionMouseTool.SupportedMouseToolBehaviors">
            <summary>
            Gets an array of supported <see cref="T:Atalasoft.Imaging.Wpf.MouseToolBehavior" /> values for this tool.
            </summary>
            <value>
            An array of supported behaviors, defaulting to ClickAndDrag and MultiClick.
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.OnImageChanged">
            <summary>
            Called when the image in the <see cref="T:Atalasoft.Imaging.Wpf.AtalaImageViewer" /> has changed.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.CreateInstanceCore">
            <summary> Returns a new instance of <STRONG>SelectionMouseTool</STRONG>. </summary>
            <returns> A new instance of <STRONG>SelectionMouseTool</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a mouse button is pressed.
            </summary>
            <param name="e">A <STRONG>MouseButtonEventArgs</STRONG> containing information for this event.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse is moved over the mouse tool bounds or when dragging the tool.
            </summary>
            <param name="e">A <STRONG>MouseEventArgs</STRONG> containing information for this event.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the mouse button is released.
            </summary>
            <param name="e">A <STRONG>MouseButtonEventArgs</STRONG> containing information for this event.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called when the tool must render itself.
            </summary>
            <param name="drawingContext">A <STRONG>DrawingContext</STRONG> used to render.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.HitTestCore(System.Windows.Point)">
            <summary>
            Called by the <see cref="T:Atalasoft.Imaging.Wpf.AtalaImageViewer" /> to determine if a point is over the
            <STRONG>MouseTool</STRONG>.
            </summary>
            <param name="point">The point in image coordinates.</param>
            <returns>
              <STRONG>True</STRONG> if the point is over the <STRONG>MouseTool</STRONG>.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.SelectionMouseTool.GetRegion">
            <summary> Returns a <STRONG>RegionOfInterest</STRONG> object containing the region for the selection. </summary>
            <returns> A <STRONG>RegionOfInterest</STRONG> object for the selection. </returns>
            <remarks> The <STRONG>RegionOfInterest</STRONG> object can be used with <STRONG>ImageRegionCommand</STRONG> classes
            so only the selected region will be processed. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Wpf.ZoomMouseTool">
            <summary> This tool is used to zoom in and out of an image by either clicking a mouse button or selecting an area of
            the image which will be zoomed to fit in the viewer. </summary>
            <example>
<code><![CDATA[ <Window x:Class="WpfControlsDemo.Window1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:atala="clr-namespace:Atalasoft.Imaging.Wpf;assembly=Atalasoft.dotImage.Wpf"
    Title="WPF Controls Demo" Height="565" Width="756"
    Background="White"
    >
  <Grid>
    <atala:AtalaImageViewer Name="Viewer">
      <atala:AtalaImageViewer.MouseTool>
        <atala:ZoomMouseTool ZoomChangePercentage="0.2" LeftButtonTool="ZoomSelection"/>
      </atala:AtalaImageViewer.MouseTool>
    </atala:AtalaImageViewer>
  </Grid>
</Window> ]]></code>

<code><![CDATA[ Me.Viewer.MouseTool = New ZoomMouseTool(0.2, False, False, MouseToolBehavior.ClickAndDrag, Nothing, Colors.White, Nothing, True, ZoomToolMode.ZoomSelection, ZoomToolMode.None, ZoomToolMode.None) ]]></code>

<code><![CDATA[ this.Viewer.MouseTool = new ZoomMouseTool(0.2, false, false, MouseToolBehavior.ClickAndDrag, null, Colors.White, null, true, ZoomToolMode.ZoomSelection, ZoomToolMode.None, ZoomToolMode.None); ]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomMouseTool.CenterZoomProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.CenterZoom"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.CenterZoom"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomMouseTool.LeftButtonToolProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.LeftButtonTool"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.LeftButtonTool"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomMouseTool.MiddleButtonToolProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.MiddleButtonTool"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.MiddleButtonTool"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomMouseTool.RightButtonToolProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.RightButtonTool"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.RightButtonTool"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomMouseTool.XButton1ToolProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.XButton1Tool"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.XButton1Tool"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomMouseTool.XButton2ToolProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.XButton2Tool"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.XButton2Tool"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomMouseTool.AutoZoomSelectionProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.AutoZoomSelection"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.AutoZoomSelection"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomMouseTool.ZoomChangePercentageProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.ZoomChangePercentage"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.ZoomChangePercentage"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomMouseTool.MaximumZoomLevelProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.MaximumZoomLevel"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.MaximumZoomLevel"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomMouseTool.MinimumZoomLevelProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.MinimumZoomLevel"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.MinimumZoomLevel"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomMouseTool.LineBackgroundColorProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.LineBackgroundColor"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.LineBackgroundColor"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomMouseTool.PenProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.Pen"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.Pen"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomMouseTool.FillProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.Fill"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.Fill"/> dependency property. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Wpf.ZoomMouseTool.MaintainPenThicknessProperty">
            <summary> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.MaintainPenThickness"/> dependency property. </summary>
            <value> Identifies the <see cref="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.MaintainPenThickness"/> dependency property. </value>
        </member>
        <member name="E:Atalasoft.Imaging.Wpf.ZoomMouseTool.SelectionChanged">
            <summary> Raised when the selection has finished being modified. </summary>
        </member>
        <member name="E:Atalasoft.Imaging.Wpf.ZoomMouseTool.SelectionChanging">
            <summary> Raised while the selection is being modfied to provide live feedback to the user. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ZoomMouseTool.#ctor">
            <summary> Creates a new instance of <STRONG>ZoomMouseTool</STRONG> in which the left mouse button is for zooming in
            and the right button is used for zooming out. </summary>
            <overloads> Creates a new instance of <STRONG>ZoomMouseTool</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ZoomMouseTool.#ctor(Atalasoft.Imaging.Wpf.ZoomToolMode)">
            <summary> Creates a new instance of <STRONG>ZoomMouseTool</STRONG> specifying the tool used for all mouse buttons.
            </summary>
            <param name="toolForAllButtons"> The tool to use for any mouse button. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ZoomMouseTool.#ctor(Atalasoft.Imaging.Wpf.ZoomToolMode,Atalasoft.Imaging.Wpf.ZoomToolMode,Atalasoft.Imaging.Wpf.ZoomToolMode)">
            <summary> Creates a new instance of <STRONG>ZoomMouseTool</STRONG> specifying the tool to use for common mouse
            buttons. </summary>
            <param name="leftButtonTool"> The tool used when the left mouse button is clicked. </param>
            <param name="middleButtonTool"> The tool used when the middle mouse button is clicked. </param>
            <param name="rightButtonTool"> The tool used when the right mouse button is clicked. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ZoomMouseTool.#ctor(System.Double,System.Boolean,System.Boolean,Atalasoft.Imaging.Wpf.MouseToolBehavior,System.Windows.Media.Pen,System.Windows.Media.Color,System.Windows.Media.Brush,System.Boolean)">
            <summary> Creates a new instance of <STRONG>ZoomMouseTool</STRONG> specifying the pen, fill and common properties.
            </summary>
            <param name="zoomChangePercentage"> The percentage the zoom will change each time to tool is applied.  This has no
            effect when <STRONG>ZoomSelection</STRONG> is used. </param>
            <param name="centerZoom"> Indicates whether the pixel clicked will be centered in the viewer. </param>
            <param name="autoZoomSelection"> If <STRONG>true</STRONG>, the tool will automatically switch to
            <STRONG>ZoomSelection</STRONG> mode if the user clicks and drags the mouse.  Clicks without moving the mouse will
            use the tool specified for the mouse button. </param>
            <param name="toolBehavior"> Indicates if the <STRONG>ZoomSelection</STRONG> will use the click and drag or two click
            method. </param>
            <param name="pen"> The pen to use for the selection.  If <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB), a
            default pen will be used. </param>
            <param name="lineBackgroundColor"> The color used behind the selection line. </param>
            <param name="fill"> The brush used to fill the selection. </param>
            <param name="maintainPenThickness"> Indicates if the pen thickness will render the same size regardless of the zoom
            level. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ZoomMouseTool.#ctor(System.Double,System.Boolean,System.Boolean,Atalasoft.Imaging.Wpf.MouseToolBehavior,System.Windows.Media.Pen,System.Windows.Media.Color,System.Windows.Media.Brush,System.Boolean,Atalasoft.Imaging.Wpf.ZoomToolMode,Atalasoft.Imaging.Wpf.ZoomToolMode,Atalasoft.Imaging.Wpf.ZoomToolMode)">
            <summary> Creates a new instance of <STRONG>ZoomMouseTool</STRONG> specifying the pen, behavior and button tools.
            </summary>
            <param name="zoomChangePercentage"> The percentage the zoom will change each time to tool is applied.  This has no
            effect when <STRONG>ZoomSelection</STRONG> is used. </param>
            <param name="centerZoom"> Indicates whether the pixel clicked will be centered in the viewer. </param>
            <param name="autoZoomSelection"> If <STRONG>true</STRONG>, the tool will automatically switch to
            <STRONG>ZoomSelection</STRONG> mode if the user clicks and drags the mouse.  Clicks without moving the mouse will
            use the tool specified for the mouse button. </param>
            <param name="toolBehavior"> Indicates if the <STRONG>ZoomSelection</STRONG> will use the click and drag or two click
            method. </param>
            <param name="pen"> The pen to use for the selection.  If <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB), a
            default pen will be used. </param>
            <param name="lineBackgroundColor"> The color used behind the selection line. </param>
            <param name="fill"> The brush used to fill the selection. </param>
            <param name="maintainPenThickness"> Indicates if the pen thickness will render the same size regardless of the zoom
            level. </param>
            <param name="leftButtonTool"> The tool used when the left mouse button is clicked. </param>
            <param name="middleButtonTool"> The tool used when the middle mouse button is clicked. </param>
            <param name="rightButtonTool"> The tool used when the right mouse button is clicked. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ZoomMouseTool.#ctor(System.Double,System.Boolean,System.Double,System.Double,System.Boolean,Atalasoft.Imaging.Wpf.MouseToolBehavior,System.Windows.Media.Pen,System.Windows.Media.Color,System.Windows.Media.Brush,System.Boolean)">
            <summary> Creates a new instance of <STRONG>ZoomMouseTool</STRONG> specifying the pen, tool behavior and zoom level
            parameters. </summary>
            <param name="zoomChangePercentage"> The percentage the zoom will change each time to tool is applied.  This has no
            effect when <STRONG>ZoomSelection</STRONG> is used. </param>
            <param name="centerZoom"> Indicates whether the pixel clicked will be centered in the viewer. </param>
            <param name="minimumZoomLevel"> Specifies the minimum zoom level allowed. </param>
            <param name="maximumZoomLevel"> Specifies the maximum zoom level allowed. </param>
            <param name="autoZoomSelection"> If <STRONG>true</STRONG>, the tool will automatically switch to
            <STRONG>ZoomSelection</STRONG> mode if the user clicks and drags the mouse.  Clicks without moving the mouse will
            use the tool specified for the mouse button. </param>
            <param name="toolBehavior"> Indicates if the <STRONG>ZoomSelection</STRONG> will use the click and drag or two click
            method. </param>
            <param name="pen"> The pen to use for the selection.  If <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB), a
            default pen will be used. </param>
            <param name="lineBackgroundColor"> The color used behind the selection line. </param>
            <param name="fill"> The brush used to fill the selection. </param>
            <param name="maintainPenThickness"> Indicates if the pen thickness will render the same size regardless of the zoom
            level. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ZoomMouseTool.#ctor(System.Double,System.Boolean,System.Double,System.Double,System.Boolean,Atalasoft.Imaging.Wpf.MouseToolBehavior,System.Windows.Media.Pen,System.Windows.Media.Color,System.Windows.Media.Brush,System.Boolean,Atalasoft.Imaging.Wpf.ZoomToolMode)">
            <summary> Creates a new instance of <STRONG>ZoomMouseTool</STRONG> specifying the pen, tool behavior, zoom level
            parameters and tool used for all buttons. </summary>
            <param name="zoomChangePercentage"> The percentage the zoom will change each time to tool is applied.  This has no
            effect when <STRONG>ZoomSelection</STRONG> is used. </param>
            <param name="centerZoom"> Indicates whether the pixel clicked will be centered in the viewer. </param>
            <param name="minimumZoomLevel"> Specifies the minimum zoom level allowed. </param>
            <param name="maximumZoomLevel"> Specifies the maximum zoom level allowed. </param>
            <param name="autoZoomSelection"> If <STRONG>true</STRONG>, the tool will automatically switch to
            <STRONG>ZoomSelection</STRONG> mode if the user clicks and drags the mouse.  Clicks without moving the mouse will
            use the tool specified for the mouse button. </param>
            <param name="toolBehavior"> Indicates if the <STRONG>ZoomSelection</STRONG> will use the click and drag or two click
            method. </param>
            <param name="pen"> The pen to use for the selection.  If <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB), a
            default pen will be used. </param>
            <param name="lineBackgroundColor"> The color used behind the selection line. </param>
            <param name="fill"> The brush used to fill the selection. </param>
            <param name="maintainPenThickness"> Indicates if the pen thickness will render the same size regardless of the zoom
            level. </param>
            <param name="toolForAllButtons"> The tool to use for any mouse button. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ZoomMouseTool.#ctor(System.Double,System.Boolean,System.Double,System.Double,System.Boolean,Atalasoft.Imaging.Wpf.MouseToolBehavior,System.Windows.Media.Pen,System.Windows.Media.Color,System.Windows.Media.Brush,System.Boolean,Atalasoft.Imaging.Wpf.ZoomToolMode,Atalasoft.Imaging.Wpf.ZoomToolMode,Atalasoft.Imaging.Wpf.ZoomToolMode,Atalasoft.Imaging.Wpf.ZoomToolMode,Atalasoft.Imaging.Wpf.ZoomToolMode)">
            <summary> Creates a new instance of <STRONG>ZoomMouseTool</STRONG> specifying all of its property values. </summary>
            <param name="zoomChangePercentage"> The percentage the zoom will change each time to tool is applied.  This has no
            effect when <STRONG>ZoomSelection</STRONG> is used. </param>
            <param name="centerZoom"> Indicates whether the pixel clicked will be centered in the viewer. </param>
            <param name="minimumZoomLevel"> Specifies the minimum zoom level allowed. </param>
            <param name="maximumZoomLevel"> Specifies the maximum zoom level allowed. </param>
            <param name="autoZoomSelection"> If <STRONG>true</STRONG>, the tool will automatically switch to
            <STRONG>ZoomSelection</STRONG> mode if the user clicks and drags the mouse.  Clicks without moving the mouse will
            use the tool specified for the mouse button. </param>
            <param name="toolBehavior"> Indicates if the <STRONG>ZoomSelection</STRONG> will use the click and drag or two click
            method. </param>
            <param name="pen"> The pen to use for the selection.  If <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB), a
            default pen will be used. </param>
            <param name="lineBackgroundColor"> The color used behind the selection line. </param>
            <param name="fill"> The brush used to fill the selection. </param>
            <param name="maintainPenThickness"> Indicates if the pen thickness will render the same size regardless of the zoom
            level. </param>
            <param name="leftButtonTool"> The tool used when the left mouse button is clicked. </param>
            <param name="middleButtonTool"> The tool used when the middle mouse button is clicked. </param>
            <param name="rightButtonTool"> The tool used when the right mouse button is clicked. </param>
            <param name="xButton1Tool"> The tool used when the XButton1 is clicked. </param>
            <param name="xButton2Tool"> The tool used when the XButton2 is clicked. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.MaintainPenThickness">
            <summary> Gets or sets a value indicating whether the thickness of the zoom selection pen is rendered at the same
            size or scaled along with the image zoom value. </summary>
            <value> A value indicating whether the zoom selection pen thickness is kept the same size. </value>
            <remarks> Setting this property to <STRONG>true</STRONG> will keep the pen at the same size.  A setting of
            <STRONG>false</STRONG> will allow the pen to scale with the zoom level of the image. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.Fill">
            <summary> Gets or sets the brush used to fill the zoom selection. </summary>
            <value> The brush used to fill the zoom selection. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.Pen">
            <summary> Gets or sets the pen to use for the zoom selection. </summary>
            <value> The pen to use for the zoom selection. </value>
            <remarks> Setting this property to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) will cause a default
            (black 1-pixel dashed) pen to be used. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.LineBackgroundColor">
            <summary> Gets or sets the color used behind the zoom selection line. </summary>
            <value> The color behind the zoom selection line. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.CenterZoom">
            <summary> Gets or sets a value indicating whether a zoom in and zoom out will scroll the pixel clicked to the center
            of the viewer. </summary>
            <value> A value indicating whether the pixel clicked will be scrolled to the center of the viewer. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.LeftButtonTool">
            <summary> Gets or sets the tool to use for a left button click. </summary>
            <value> The tool to use for a left button click.  The default value is <STRONG>ZoomIn</STRONG>. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.MiddleButtonTool">
            <summary> Gets or sets the tool used for the middle mouse button. </summary>
            <value> The tool for the middle mouse button. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.RightButtonTool">
            <summary> Gets or sets the tool to use for the right mouse button. </summary>
            <value> The tool for the right mouse button. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.XButton1Tool">
            <summary> Gets or sets the tool used for the XButton1 mouse button. </summary>
            <value> The tool used for the XButton1 mouse button. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.XButton2Tool">
            <summary> Gets or sets the tool used for the XButton2 mouse button. </summary>
            <value> The tool used for the XButton2 mouse button. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.AutoZoomSelection">
            <summary> Gets or sets a value indicating whether the tool will automatically perform a zoom selection when an
            active button is pressed and dragged. </summary>
            <value> A value indicating whether a zoom selection is automatically taken when the user clicks and drags. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.ZoomChangePercentage">
            <summary> Gets or sets the percentage to change the zoom for each mouse click. </summary>
            <value> The percentage to change the zoom for each mouse click.  This value defaults to 0.2. </value>
            <remarks> When there is a click event, the <see cref="P:Atalasoft.Imaging.Wpf.AtalaImageViewer.Zoom"/> property will be changed by adding or
            subtracting the <STRONG>ZoomChangePercentage</STRONG> multiplied by the current zoom level. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.MaximumZoomLevel">
            <summary> Gets or sets the maximum allows zoom level. </summary>
            <value> The maximum allows zoom level.  This value defaults to 10,000. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.MinimumZoomLevel">
            <summary> Gets or sets the minimum allowed zoom level. </summary>
            <value> The minimum allowed zoom level.  This value defaults to 0.0001. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ZoomMouseTool.CreateInstanceCore">
            <summary> Returns a new instance of <STRONG>ZoomMouseTool</STRONG>. </summary>
            <returns> A new instance of <STRONG>ZoomMouseTool</STRONG>. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Wpf.ZoomMouseTool.SupportedMouseToolBehaviors">
            <summary>
            Gets an array of supported <see cref="T:Atalasoft.Imaging.Wpf.MouseToolBehavior" /> values for this tool.
            </summary>
            <value>
            An array of supported behaviors, defaulting to ClickAndDrag and MultiClick
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ZoomMouseTool.HitTestCore(System.Windows.Point)">
            <summary>
            Called by the <see cref="T:Atalasoft.Imaging.Wpf.AtalaImageViewer" /> to determine if a point is over the
            <STRONG>MouseTool</STRONG>.
            </summary>
            <param name="point">The point in image coordinates.</param>
            <returns>
              <STRONG>True</STRONG> if the point is over the <STRONG>MouseTool</STRONG>.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ZoomMouseTool.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a mouse button is pressed.
            </summary>
            <param name="e">A <STRONG>MouseButtonEventArgs</STRONG> containing information for this event.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ZoomMouseTool.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse is moved over the mouse tool bounds or when dragging the tool.
            </summary>
            <param name="e">A <STRONG>MouseEventArgs</STRONG> containing information for this event.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ZoomMouseTool.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the mouse button is released.
            </summary>
            <param name="e">A <STRONG>MouseButtonEventArgs</STRONG> containing information for this event.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ZoomMouseTool.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called when the tool must render itself.
            </summary>
            <param name="drawingContext">A <STRONG>DrawingContext</STRONG> used to render.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Wpf.ZoomMouseTool.PerformZoom(System.Windows.Point,System.Windows.Point,Atalasoft.Imaging.Wpf.ZoomToolMode)">
            <summary> This method applies the actual zoom change to the <see cref="T:Atalasoft.Imaging.Wpf.AtalaImageViewer"/>. </summary>
            <param name="ctrlPoint"> The point in viewer space that was clicked. </param>
            <param name="point"> The image pixel that was clicked. </param>
            <param name="tool"> The tool that was used. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegXrDecoder">
            <summary> The <STRONG>JpegXrDecoder</STRONG> class is a decoder for Microsoft Windows Media Photo encoded images.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegXrDecoder.#ctor">
            <summary> Creates a new instance of <STRONG>JpegXrDecoder</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegXrDecoder.GetImageInfo(System.IO.Stream)">
            <summary>
            Retreive information from an image stored in a file without decoding the image data.
            </summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <returns>
            An <see cref="T:Atalasoft.Imaging.Codec.ImageInfo" /> object containing information about the image such as size and bitdepth.
            </returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.ArgumentException">The stream must have read access.;stream</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegXrDecoder.IsValidFormat(System.IO.Stream)">
            <summary>
            Checks the stream to determine if the image can be read by the decoder that derives this class.
            </summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <returns>
              <STRONG>True </STRONG>if the encoded image can be read by this decoder, otherwise <STRONG>false</STRONG>.
            </returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.ArgumentException">The stream must have read access.;stream</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegXrDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>
            Decode an image in a specified image <STRONG>Stream</STRONG>.
            </summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic).</param>
            <returns>
            An <STRONG>AtalaImage</STRONG> containing the decoded image.
            </returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.ArgumentException">The stream must have read access.;stream</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegXrDecoder.GetColorProfile(System.IO.Stream)">
            <summary> Returns the color profile for this image. </summary>
            <returns> A <STRONG>ColorProfile</STRONG> for this image or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB)
            if there is no profile. </returns>
            <param name="stream"> A stream containing the image. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegXrEncoder">
            <summary> The <STRONG>JpegXrEncoder</STRONG> class is an encoder that is used to encode an
            <STRONG>AtalaImage</STRONG> to Microsoft Windows Media Photo images. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegXrEncoder.#ctor">
            <summary> Creates a new instance of <STRONG>JpegXrEncoder</STRONG>. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.AlphaDataDiscardLevel">
            <summary> Gets or sets the level of alpha frequency data to discard during a compressed domain transcode. </summary>
            <value> The level of alpha data to discard when encoding the image. The value range is 0 to 4. The default value is
            1. </value>
            <remarks> This parameter is only valid if <see cref="P:Atalasoft.Imaging.Codec.JpegXrEncoder.CompressedDomainTranscode"/> is set to
            <STRONG>true</STRONG> and the image contains either a planar or interleaved alpha channel; otherwise it is ignored.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.AlphaQualityLevel">
            <summary> Gets or sets the compression quality for a planar alpha channel. </summary>
            <value> The compression quality for a planar alpha channel image. A value of 1 is considered lossless and increasing
            values result in higher compression ratios and lower image quality. The value range is 0 to 255. The default value
            is 1. </value>
            <remarks> This parameter is only valid if <see cref="P:Atalasoft.Imaging.Codec.JpegXrEncoder.InterleavedAlpha"/> is <STRONG>false</STRONG>.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.CompressedDomainTranscode">
            <summary> Gets or sets a value that indicates whether compressed domain operations can be used. Compressed domain
            operations are transformation operations that are done without decoding the image data. </summary>
            <value> <STRONG>True</STRONG> if compressed domain operations can be used; otherwise, <STRONG>false</STRONG>. The
            default value is <STRONG>true</STRONG>. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.FlipHorizontal">
            <summary> Gets or sets a value indicating whether to flip the image horizontally. </summary>
            <value> <STRONG>True</STRONG> if the image is to be flipped horizontally; otherwise, <STRONG>false</STRONG>.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.FlipVertical">
            <summary> Gets or sets a value that indicates whether to flip the image vertically. </summary>
            <value> <STRONG>True</STRONG> if the image is to be flipped vertically; otherwise, <STRONG>false</STRONG>. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.FrequencyOrder">
            <summary> Gets or sets a value that indicates whether to encoding in frequency order. </summary>
            <value> <STRONG>True</STRONG> to encode the image in frequency order; <STRONG>false</STRONG> to encode the image by
            its spatial orientation. The default value is <STRONG>true</STRONG>. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.HorizontalTileSlices">
            <summary> Gets or sets the number of horizontal divisions to use during compression encoding. A single division
            creates two horizontal regions. </summary>
            <value> The number of horizontal divisions to use during compression encoding. The value range is 0 to 4095. The
            default value is 0. </value>
            <remarks> <para>If <see cref="P:Atalasoft.Imaging.Codec.JpegXrEncoder.CompressedDomainTranscode"/> is <STRONG>true</STRONG>,
            <STRONG>HorizontalTileSlices</STRONG> must be set to 0.</para>
            <para>A tile created by the division can never be smaller than 16 pixels. The value will be adjusted to maintain the
            minimum tile size.</para>
            <para>When used in combination with <see cref="P:Atalasoft.Imaging.Codec.JpegXrEncoder.VerticalTileSlices"/>, a grid of tiles is formed. For
            example, if both property has one division, the image will be divided into 4 tiles.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.IgnoreOverlap">
            <summary> Gets or sets a value that indicates whether to ignore region overlap pixels in sub-region compressed
            domain encoding. This feature is not currently implemented. </summary>
            <value> <STRONG>True</STRONG> if overlap is ignored; otherwise, <STRONG>false</STRONG>. The default value is
            <STRONG>false</STRONG>. </value>
            <remarks> This value is only valid when <see cref="P:Atalasoft.Imaging.Codec.JpegXrEncoder.CompressedDomainTranscode"/> is true and a
            sub-region encode is requested. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.ImageDataDiscardLevel">
            <summary> Gets or sets the level of image data to discard during a compressed domain transcode. </summary>
            <value> The level of image data to discard during a compressed domain encoding of the image. The value range is 0 to
            3. The default value is 1. </value>
            <remarks> This parameter is only valid if <see cref="P:Atalasoft.Imaging.Codec.JpegXrEncoder.CompressedDomainTranscode"/> is set to
            <STRONG>true</STRONG>; otherwise it is ignored. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.ImageQualityLevel">
            <summary> Gets or sets the image quality level. </summary>
            <value> The image quality level. The range is 0 to 1.0. The default value is 0.9. A value of 1.0 represents a
            lossless image quality. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.InterleavedAlpha">
            <summary> Gets or sets a value that indicates whether to encode the alpha channel data as an additional interleaved
            channel. </summary>
            <value> <STRONG>True</STRONG> if the image is encoded with an additional interleaved alpha channel;
            <STRONG>false</STRONG> if planar alpha channel is used. The default value is <STRONG>false</STRONG>. </value>
            <remarks> Interleaved alpha channels are only supported by certain pixel formats. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.Lossless">
            <summary> Gets or sets a value that indicates whether to encode using lossless compression. </summary>
            <value> <STRONG>True</STRONG> to use lossless compression; otherwise, <STRONG>false</STRONG>. The default value is
            <STRONG>false</STRONG>. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.OverlapLevel">
            <summary> Gets or sets the overlap processing level. </summary>
            <value> The overlap processing level. The default value is 1. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.QualityLevel">
            <summary> Gets or sets the compression quality for the main image. </summary>
            <value> The compression quality for the main image. A value of 1 is considered lossless and higher values indicate a
            high compression ratio and lower image quality. The range is 0 to 255. The default value is 1. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.Rotation">
            <summary> Gets or sets the Rotation of the image. </summary>
            <value> The rotation of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.SubsamplingLevel">
            <summary> Gets or sets the sub sampling level for RGB image encoding. </summary>
            <value> The sub sampling level for RGB image encoding. The range is 0 to 3. The default value is 3. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.UseCodecOptions">
            <summary> Gets or sets a value that indicates codec options are to be used. </summary>
            <value> <STRONG>True</STRONG> if codec options are to be used; otherwise, <STRONG>false</STRONG>. The default value
            is <STRONG>false</STRONG>. When <STRONG>true</STRONG>, <see cref="P:Atalasoft.Imaging.Codec.JpegXrEncoder.QualityLevel"/>, <see
            cref="P:Atalasoft.Imaging.Codec.JpegXrEncoder.OverlapLevel"/>, and <see cref="P:Atalasoft.Imaging.Codec.JpegXrEncoder.SubsamplingLevel"/> are used in place of the <see
            cref="P:Atalasoft.Imaging.Codec.JpegXrEncoder.ImageQualityLevel"/>. When <STRONG>false</STRONG>, <STRONG>QualityLevel</STRONG>,
            <STRONG>OverlapLevel</STRONG>, and <STRONG>SubsamplingLevel</STRONG> are set based on
            <STRONG>ImageQualityLevel</STRONG>. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.VerticalTileSlices">
            <summary> Gets or sets the number of vertical divisions to use during compression encoding. A single division
            creates two vertical regions. </summary>
            <value> The number of vertical divisions to use during compression encoding. The value range is 0 to 4095. The
            default value is 0. </value>
            <remarks> <para>If <see cref="P:Atalasoft.Imaging.Codec.JpegXrEncoder.CompressedDomainTranscode"/> is <STRONG>true</STRONG>,
            <STRONG>VerticalTileSlices</STRONG> must be set to 0.</para>
            <para>A tile created by the division can never be smaller than 16 pixels. The value will be adjusted to maintain the
            minimum tile size.</para>
            <para>When used in combination with <see cref="P:Atalasoft.Imaging.Codec.JpegXrEncoder.HorizontalTileSlices"/>, a grid of tiles is formed. For
            example, if both properties are set to 1, the image will be divided into 4 tiles.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegXrEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>
            Save an image using this encoder.
            </summary>
            <param name="stream">A stream containing the file which the image will be encoded to.</param>
            <param name="image">The image to save.</param>
            <param name="progress">The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic).</param>
            <returns>
            The number of bytes written to the file.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            stream
            or
            image
            </exception>
            <exception cref="T:System.ArgumentException">
            The stream must have write access.;stream
            or
            The stream must be seekable.;stream
            </exception>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegXrEncoder.SupportedPixelFormats">
            <summary>
            Returns an array of pixel formats supported by this encoder.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.XpsDecoder">
            <summary> Decodes an XPS document into an <STRONG>AtalaImage</STRONG> object. </summary>
            <remarks>XpsDecoder does not support OXPS documents under Windows 7 and Windows Server 2008 R2.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.XpsDecoder._dpiX">
            <summary> Gets or sets the X-Resolution value used when reading to an image. </summary>
            <value> The X-Resolution used when reading to an image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.XpsDecoder.DpiX">
            <summary> Gets or sets the X-Resolution value used when reading to an image. </summary>
            <value> The X-Resolution used when reading to an image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.XpsDecoder._dpiY">
            <summary> Gets or sets the Y-Resolution used when reading to an image. </summary>
            <value> The Y-Resolution used when reading to an image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.XpsDecoder.DpiY">
            <summary> Gets or sets the Y-Resolution used when reading to an image. </summary>
            <value> The Y-Resolution used when reading to an image. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.XpsDecoder.IsValidFormat(System.IO.Stream)">
            <summary>
            Checks the stream to determine if the image can be read by the decoder that derives this class.
            </summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <returns>
              <STRONG>True </STRONG>if the encoded image can be read by this decoder, otherwise <STRONG>false</STRONG>.
            </returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.ArgumentException">The stream does not have read access.;stream</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.XpsDecoder.GetFrameCount(System.IO.Stream)">
            <summary>
            Returns the number of frames in the image
            </summary>
            <param name="stream">The input Stream.</param>
            <returns>
            The number of frames in the image
            </returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.ArgumentException">The stream does not have read access.;stream</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.XpsDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary>
            </summary>
            <param name="stream">The input Stream.</param>
            <param name="frameIndex">The zero based frame index.</param>
            <returns></returns>
            <overloads> Retreive information in an image stored in a file without decoding the image data. </overloads>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.ArgumentException">The stream does not have read access.;stream</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.XpsDecoder.GetImageInfo(System.IO.Stream)">
            <summary>
            Retreive information from an image stored in a file without decoding the image data.
            </summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <returns>
            An <see cref="T:Atalasoft.Imaging.Codec.ImageInfo" /> object containing information about the image such as size and bitdepth.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.XpsDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>
            Read a given frame in an encoded image using this decoder.
            </summary>
            <param name="stream">The input Stream.</param>
            <param name="frameIndex">The zero based frame index.</param>
            <param name="progress">The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic).</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.ArgumentException">The stream does not have read access.;stream</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.XpsDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>
            Decode an image in a specified image <STRONG>Stream</STRONG>.
            </summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic).</param>
            <returns>
            An <STRONG>AtalaImage</STRONG> containing the decoded image.
            </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer">
            <summary> This control is used to view and annotate images in a WPF environment.  It contains an <see cref="T:Atalasoft.Imaging.Wpf.AtalaImageViewer" /> (accessed through the <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.ImageViewer" /> property) and a <see cref="T:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas" /> (accessed through the <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Annotations" /> property).
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.AtalaAnnotationViewer&quot;]/*" />
            <summary>
            AtalaAnnotationViewer
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoLoadXmpProperty">
            <summary>
            Identifies the AutoLoadXmp dependency property.
            </summary>
            <summary> Identifies the <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoLoadXmp"/> dependency property. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoLoadWangProperty">
            <summary>
            Identifies the AutoLoadWang dependency property.
            </summary>
            <summary> Identifies the <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoLoadWang"/> dependency property. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoSaveXmpProperty">
            <summary>
            Identifies the AutoSaveXmp dependency property.
            </summary>
            <summary> Identifies the <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoSaveXmp"/> dependency property. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoSaveWangProperty">
            <summary>
            Identifies the AutoSaveWang dependency property.
            </summary>
            <summary> Identifies the <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoSaveWang"/> dependency property. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer._importers">
            <summary> Gets a list of <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter"/> objects used to import annotations from an image.
            </summary>
            <value> A list of importers for annotations. </value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.#ctor">
            <summary>
            Creates a new instance of AtalaAnnotationViewer.
            </summary>
            <summary> Creates a new instance of <STRONG>AtalaAnnotationViewer</STRONG>. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Importers">
            <summary> Gets a list of <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter"/> objects used to import annotations from an image.
            </summary>
            <value> A list of importers for annotations. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.ImageViewer">
            <summary>
            Gets the AtalaImageViewer used for viewing the image.
            </summary>
            <summary> Gets the <see cref="T:Atalasoft.Imaging.Wpf.AtalaImageViewer"/> used for viewing the image. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Annotations">
            <summary>
            Gets the WpfAnnotationCanvas used for hosting the annotations.
            </summary>
            <summary> Gets the <see cref="T:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas"/> used for hosting the annotations. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoLoadXmp">
            <summary>
            Gets or sets a value indicating whether XMP annotations are automatically loaded in the Open method.
            </summary>
            <value>Indicates whether XMP annotations are automatically loaded in the Open method.</value>
            <summary> Gets or sets a value indicating whether XMP annotations are automatically loaded in the <see
            cref="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Open(System.String,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/> method. </summary>
            <value> Indicates whether XMP annotations are automatically loaded in the <see cref="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Open(System.String,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/>
            method. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoLoadWang">
            <summary>
            Gets or sets a value indicating whether WANG annotations are automatically loaded in the Open method.
            </summary>
            <value>Indicates whether WANG annotations are automatically loaded in the Open method.</value>
            <summary> Gets or sets a value indicating whether WANG annotations are automatically loaded in the <see
            cref="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Open(System.String,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/> method. </summary>
            <value> Indicates whether WANG annotations are automatically loaded in the <see cref="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Open(System.String,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/>
            method. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoSaveXmp">
            <summary>
            Gets or sets a value indicating whether XMP annotations are automatically saved for JPEG and TIFF files in the Save method.
            </summary>
            <value>Indicates whether XMP annotations are automatically saved in the Save method.</value>
            <summary> Gets or sets a value indicating whether XMP annotations are automatically saved for JPEG and TIFF files in
            the <see cref="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)"/> method. </summary>
            <value> Indicates whether XMP annotations are automatically saved in the <see cref="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)"/>
            method. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoSaveWang">
            <summary>
            Gets or sets a value indicating whether WANG annotations are automatically saved for TIFF files in the Save method.
            </summary>
            <value>Indicates whether WANG annotations are automatically saved in the Save method.</value>
            <summary> Gets or sets a value indicating whether WANG annotations are automatically saved for TIFF files in the
            <see cref="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)"/> method. </summary>
            <value> Indicates whether WANG annotations are automatically saved in the <see cref="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)"/>
            method. </value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.CreateVisual">
            <summary>
            Returns a Visual object of the annotations and current image.
            This is useful for printing annotations or saving them to XPS documents.
            </summary>
            <returns>A Visual object of the annotations and image.</returns>
            <summary> Returns a <STRONG>Visual</STRONG> object of the annotations and current image. This is useful for printing
            annotations or saving them to XPS documents. </summary>
            <returns> A <STRONG>Visual</STRONG> object of the annotations and image. </returns>
            <overloads> These methods are used to render the annotations onto a Visual, which can then be used for printing or
            saving to XPS. </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.AtalaAnnotationViewer~CreateVisual&quot;]/*" />
            </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.AtalaAnnotationViewer~CreateVisual&quot;]/*" />
            </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.CreateVisual(System.Windows.Size,Atalasoft.Annotate.Wpf.WpfVisualScaleMode,System.Windows.Thickness)">
            <summary>
            Returns a Visual object of the annotations and current image using the specified parameters.
            This is useful for printing annotations or saving them to XPS documents.
            </summary>
            <param name="pageSize">The page size used to scale the annotation and image rendering.</param>
            <param name="scaleMode">The type of scaling to perform.</param>
            <param name="padding">The padding around the annotations and image.</param>
            <returns>A Visual object of the annotations and image.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Burn">
            <summary>
            Burns all annotations onto the current image.
            </summary>
            <remarks>The current image will be replaced by a new image with the annotations.</remarks>
            <summary> Burns all annotations onto the current image. </summary>
            <remarks> The current image will be replaced by a new image with the annotations. </remarks>
            <overloads> Burn method overloads used to burn annotations onto an image. </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.AtalaAnnotationViewer~Burn&quot;]/*" />
            </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.AtalaAnnotationViewer~Burn&quot;]/*" />
            </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Burn(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Burns all annotations along with the specified image.
            </summary>
            <param name="image">The image to burn the annotations onto.</param>
            <returns>A new image with the annotations.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the image argument is null (Nothing in VB).</exception>
            <remarks>This method will not modify the image passed in as an argument.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Burn(Atalasoft.Annotate.Wpf.WpfAnnotationUI,Atalasoft.Imaging.AtalaImage)">
            <summary>
            Burns the specified annotation along with the specified image.
            </summary>
            <param name="annotation">The annotation to burn.</param>
            <param name="image">The image to burn the annotation onto.</param>
            <returns>A new image with the annotation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null (Nothing in VB).</exception>
            <remarks>This method will not modify the image passed in as an argument.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Burn(Atalasoft.Annotate.Wpf.WpfAnnotationUICollection,Atalasoft.Imaging.AtalaImage)">
            <summary>
            Burns the annotations in the provided collection along with the specified image.
            </summary>
            <param name="annotations">The annotations to burn.</param>
            <param name="image">The image to burn the annotations onto.</param>
            <returns>A new image with the annotations.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null (Nothing in VB).</exception>
            <remarks>This method will not modify the image passed in as an argument.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Open(System.String,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Opens an image from a file along with its embedded annotations (if <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoLoadXmp" /> or <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoLoadWang" /> is true). </summary>
            <exception> Thrown if the fileName argument is null (Nothing in VB). </exception>
            <exception> Thrown if the fileName is an empty string. </exception>
            <exception> Thrown if the filename cannot be found. </exception>
            <remarks> If both <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoLoadXmp" /> and <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoLoadWang" /> properties are true and both XMP and WANG data is present in the file,
            only the XMP data will be loaded to prevent duplicate annotations. </remarks>
            <param name="fileName"> The filename of the image to open. </param>
            <param name="frameIndex"> The zero based frame index to load. </param>
            <param name="progress"> An event handler used to raise progress events during the load process. </param>
            <overloads> These methods are used to load an image and optionally annotation data into the viewer. </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.AtalaAnnotationViewer~Open&quot;]/*" />
            </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.AtalaAnnotationViewer~Open&quot;]/*" />
            </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Open(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Opens an image from a stream along with its embedded annotations (if <see
            cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoLoadXmp"/> or <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoLoadWang"/> is true). </summary>
            <exception> Thrown if the stream argument is null (Nothing in VB). </exception>
            <exception> Thrown if the stream does not have read or seek access. </exception>
            <remarks> If both <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoLoadXmp"/> and <see
            cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoLoadWang"/> properties are true and both XMP and WANG data is present in the file,
            only the XMP data will be loaded to prevent duplicate annotations. </remarks>
            <param name="stream"> A stream containing the image file. </param>
            <param name="frameIndex"> The zero based frame index to load. </param>
            <param name="progress"> An event handler used to raise progress events during the load process. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Saves the image along with annotations (if <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoSaveXmp" /> or <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoSaveWang" /> are true) using the specified <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" />. </summary>
            <exception> Thrown if the fileName or encoder argument is null (Nothing in VB). </exception>
            <exception> Thrown if the fileName argument is an empty string. </exception>
            <remarks> Annotation data will automatically be embedded into the image when the <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoSaveXmp" /> and/or <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoSaveWang" /> properties are
            true and a compatible <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> is provided. XMP data is only supported in JPEG and TIFF files and
            WANG is only supported in TIFF files. </remarks>
            <param name="fileName"> The filename of the image to create. </param>
            <param name="encoder"> The encoder used to save the image. </param>
            <param name="progress"> An event handler for progress notification. </param>
            <overloads> These methods are used to save the image and optionally annotation data to a file or stream.
            </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.AtalaAnnotationViewer~Save&quot;]/*" />
            </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.AtalaAnnotationViewer~Save&quot;]/*" />
            </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Saves the image along with annotations (if <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoSaveXmp"/> or <see
            cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoSaveWang"/> are true) using the specified <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/>. </summary>
            <exception> Thrown if the stream or encoder argument is null (Nothing in VB). </exception>
            <exception> Thrown if the stream does not have write access. </exception>
            <remarks> Annotation data will automatically be embedded into the image when the <see
            cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoSaveXmp"/> and/or <see cref="P:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.AutoSaveWang"/> properties are
            true and a compatible <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> is provided. XMP data is only supported in JPEG and TIFF files and
            WANG is only supported in TIFF files. </remarks>
            <param name="stream"> The stream where the image will be saved. </param>
            <param name="encoder"> The encoder used to save the image. </param>
            <param name="progress"> An event handler for progress notification. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.ImportAnnotations(Atalasoft.Annotate.Importers.AnnotationDataImporter,System.Int32)">
            <summary> This method loads annotations from the provided importer into a <see cref="T:Atalasoft.Annotate.Wpf.WpfLayerAnnotation"/>, which is
            then added to the layer collection. </summary>
            <param name="importer"> The importer from which annotations will be retrieved. </param>
            <param name="frameIndex"> The zero based frame index of the page to pull annotations from.  Passing in -1 will add
            all pages in the importer to the layer collection. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.GetImporter(System.IO.Stream)">
            <summary> Returns the <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter"/> for the specified stream. </summary>
            <returns> The importer for the image or null (Nothing in VB) if an importer cannot be found. </returns>
            <exception> Thrown if the stream argument is null (Nothing in VB). </exception>
            <param name="stream"> A stream containing the image to extract annotations from. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.RotateDocument(Atalasoft.Annotate.DocumentRotation)">
            <summary>Rotates the document and its annotations.</summary>
            <param name="rotation">The amount of rotation to apply.</param>
            <overloads> The <STRONG>RotateDocument</STRONG> method is used to rotate the image and annotations in 90 degree
            increments. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)">
            <summary>
            Rotates the document at the given layer index by the given DocumentRotation.
            </summary>
            <param name="rotation">The amount of rotation.</param>
            <param name="layerIndex">The index of the layer in the layer collection to rotate.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the layerIndex argument is invalid for the layer collection.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.RotateDocument(Atalasoft.Annotate.DocumentRotation,Atalasoft.Annotate.Wpf.WpfLayerAnnotation)">
            <summary>
            Rotates the specified LayerAnnotation by the given DocumentRotation.
            </summary>
            <param name="rotation">The amount of rotation.</param>
            <param name="layer">The layer to rotate.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the layer argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.AtalaAnnotationViewer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.CollectionChangedEventArgs`1">
            <summary>
            This class is used to indicate changes made to a collection.
            </summary>
            <typeparam name="T">The Type used for the collection.</typeparam>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.CollectionChangedEventArgs`1.#ctor(Atalasoft.Utils.CollectionAction)">
            <summary>
            Creates a new instance of CollectionChangedEventArgs indicating the action.
            </summary>
            <param name="action">The action performed by the collection.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.CollectionChangedEventArgs`1.#ctor(`0,System.Int32,Atalasoft.Utils.CollectionAction)">
            <summary>
            Creates a new instance of CollectionChangedEventArgs specifying the item, index and action performed.
            </summary>
            <param name="item">The item the action was performed on.</param>
            <param name="index">The index of the item.</param>
            <param name="action">Teh action performed.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.CollectionChangedEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,Atalasoft.Utils.CollectionAction)">
            <summary>
            Creates a new instance of CollectionChangedEventArgs specifying the items, starting index and action performed.
            </summary>
            <param name="items">The items affected.</param>
            <param name="index">The index of the first item.</param>
            <param name="action">The action performed.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.CollectionChangedEventArgs`1.#ctor(`0,`0,System.Int32,Atalasoft.Utils.CollectionAction)">
            <summary>
            Creates a new instance of CollectionChangedEventArgs specifying the old item, new item, index and action performed.
            </summary>
            <param name="oldItem">The old item that was replaced or removed.</param>
            <param name="newItem">The new item that was inserted.</param>
            <param name="index">The index of the items.</param>
            <param name="action">The action performed.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.CollectionChangedEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32,Atalasoft.Utils.CollectionAction)">
            <summary>
            Creates a new instance of CollectionChangedEventArgs specifying the old items, new items, starting index and action performed.
            </summary>
            <param name="oldItems">The old items that were removed.</param>
            <param name="newItems">The new items that were inserted.</param>
            <param name="index">The index of the first item.</param>
            <param name="action">The action performed.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.CollectionChangedEventArgs`1.OldItem">
            <summary>
            Gets the old item that was removed.
            </summary>
            <value>The item that was removed from the collection or null (Nothing in VB).</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.CollectionChangedEventArgs`1.NewItem">
            <summary>
            Gets the new item that was inserted.
            </summary>
            <value>The item that was inserted or null (Nothing in VB).</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.CollectionChangedEventArgs`1.OldItems">
            <summary>
            Gets the old items that were removed.
            </summary>
            <value>The items that were removed or null (Nothing in VB).</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.CollectionChangedEventArgs`1.NewItems">
            <summary>
            Gets the items that were inserted.
            </summary>
            <value>The items that were inserted or null (Nothing in VB).</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.CollectionChangedEventArgs`1.Index">
            <summary>
            Gets the index of the item.
            </summary>
            <value>The index of the item.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.CollectionChangedEventArgs`1.Action">
            <summary>
            Gets the action performed on the items.
            </summary>
            <value>The action performed.</value>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfVisualScaleMode">
            <summary>
            Indicates the type of scaling performed by the GenerateVisual and CreateVisual methods.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfVisualScaleMode.None">
            <summary>
            No scaling is performed.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfVisualScaleMode.ScaleToFit">
            <summary>
            The annotations are scaled to fit the specified area.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfVisualScaleMode.ScaleToFill">
            <summary>
            The annotations are scaled to fill the area, which may result in some annotations rendering outside the bounds.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfVisualScaleMode.StretchToFill">
            <summary>
            The annotations are stretched to fill the area, ignoring the annotation aspect ratio.
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfAnnotationSelectionMode">
            <summary>
            Indicates whether the WpfAnnotationCanvas should perform single or multiple selections.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationSelectionMode.Single">
            <summary>
            Only select on annotation at a time.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationSelectionMode.Multiple">
            <summary>
            Select multiple annotations.
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfAnnotationGripAction">
            <summary>
            Indicates the action performed by a grip.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationGripAction.Move">
            <summary>
            The grip is used for moving the annotation.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationGripAction.Resize">
            <summary>
            The grip is used to resize the annotation.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationGripAction.Rotate">
            <summary>
            The grip is used to rotate the annotation.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationGripAction.Independent">
            <summary>
            The grip is moved independently.
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfAnnotationGripMode">
            <summary>
            Indicates whether rectangular or point grips are used for point based annotations.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationGripMode.Rectangular">
            <summary>
            Rectangular grips will be used.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationGripMode.Points">
            <summary>
            Individual point grips will be used.
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfRectangleGrip">
            <summary>
            Identifies the rectangular grip.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRectangleGrip.None">
            <summary>
            The grip is not one of the standard rectangle grips.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRectangleGrip.TopLeft">
            <summary>
            The grip is at the top-left of the rectangle.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRectangleGrip.TopCenter">
            <summary>
            The grip is centered along the top of the rectangle.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRectangleGrip.TopRight">
            <summary>
            The grip is at teh top-right of the rectangle.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRectangleGrip.CenterLeft">
            <summary>
            The grip is centered along the left side of the rectangle.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRectangleGrip.CenterRight">
            <summary>
            The grip is centered along the right side of the rectangle.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRectangleGrip.BottomLeft">
            <summary>
            The grip is at the bottom-left of the rectangle.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRectangleGrip.BottomCenter">
            <summary>
            The grip is centered along the bottom of the rectangle.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRectangleGrip.BottomRight">
            <summary>
            The grip is at the bottom-right of the rectangle.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRectangleGrip.Rotation">
            <summary>
            The grip is used for rotating the rectangle.
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfRectangleGripRotationMode">
            <summary>
            Indicates the grip rotation behavior.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRectangleGripRotationMode.None">
            <summary>
            No rotation is performed.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRectangleGripRotationMode.Grip">
            <summary>
            The normal rotation grip is displayed.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRectangleGripRotationMode.Zone">
            <summary>
            An invisible grip is used for rotation. The cursor will change when over the grip area to indicate a rotation action.
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfAnnotationOperationRequests">
            <summary>
            Indicates the operation requested on the annotation.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationOperationRequests.Move">
            <summary>
            A move request.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationOperationRequests.Rotate">
            <summary>
            A rotate request.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationOperationRequests.GripMove">
            <summary>
            A grip move request.
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfFreehandLineType">
            <summary>
            Indicates the freehand line style.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfFreehandLineType.Straight">
            <summary>
            The points are joined with straight lines.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfFreehandLineType.Bezier">
            <summary>
            The points are used for bezier curves.
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfGripHotZoneAction">
            <summary>
            Indicates the action for a zone grip.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfGripHotZoneAction.Default">
            <summary>
            The default grip action is performed.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfGripHotZoneAction.Ignore">
            <summary>
            No action should be taken.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfGripHotZoneAction.MoveAnnotation">
            <summary>
            The annotation should be moved.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfGripHotZoneAction.MoveGrip">
            <summary>
            The grip should be moved.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfGripHotZoneAction.RotateAnnotation">
            <summary>
            The annotation should be rotated.
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.OperationRequestInformation">
            <summary>
            This class is used to send an operation request to an annotation.
            </summary>
            <remarks>This is used by grips to give annotations a chance to cancel out of a change the user is trying to apply. It's not meant to be used directly.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.OperationRequestInformation.#ctor(Atalasoft.Annotate.Wpf.WpfAnnotationUI,Atalasoft.Annotate.Wpf.MoveAnnotationRequest)">
            <summary>
            Creates a new instance of OperationRequestInformation for a move operation.
            </summary>
            <param name="targetAnnotation">The annotation the request will be sent to.</param>
            <param name="request">A MoveAnnotationRequest for this operation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.OperationRequestInformation.#ctor(Atalasoft.Annotate.Wpf.WpfAnnotationUI,Atalasoft.Annotate.Wpf.RotateAnnotationRequest)">
            <summary>
            Creates a new instance of OperationRequestInformation for a rotation operation.
            </summary>
            <param name="targetAnnotation">The annotation the request will be sent to.</param>
            <param name="request">A RotateAnnotationRequest for this operation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.OperationRequestInformation.#ctor(Atalasoft.Annotate.Wpf.WpfAnnotationUI,Atalasoft.Annotate.Wpf.GripMoveRequest)">
            <summary>
            Creates a new instance of OperationRequestInformation for a grip move operation.
            </summary>
            <param name="targetAnnotation">The annotation the request will be sent to.</param>
            <param name="request">A GripMoveRequest for this operation.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.OperationRequestInformation.TargetAnnotation">
            <summary>
            Gets the annotation the request will be sent to.
            </summary>
            <value>The annotation the request will be sent to.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.OperationRequestInformation.Operation">
            <summary>
            Gets the operation for this request.
            </summary>
            <value>The operation for this request.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.OperationRequestInformation.MoveRequest">
            <summary>
            Gets a MoveAnnotationRequest for this operation. 
            </summary>
            <value>A MoveAnnotationRequest for this operation. This may be null (Nothing in VB).</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.OperationRequestInformation.RotateRequest">
            <summary>
            Gets a RotateAnnotationRequest for this operation. 
            </summary>
            <value>A RotateAnnotationRequest for this operation. This may be null (Nothing in VB).</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.OperationRequestInformation.GripMoveRequest">
            <summary>
            Gets a GripMoveRequest for this operation. 
            </summary>
            <value>A GripMoveRequest for this operation. This may be null (Nothing in VB).</value>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.GripMoveRequest">
            <summary>
            This class holds information for a grip move operation request.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.GripMoveRequest.#ctor(Atalasoft.Annotate.Wpf.WpfAnnotationGrip,System.Windows.Point)">
            <summary>
            Creates a new instance of GripMoveRequest.
            </summary>
            <param name="grip">The grip being moved.</param>
            <param name="newPosition">The new requested grip position.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.GripMoveRequest.Grip">
            <summary>
            Gets or sets the grip being moved.
            </summary>
            <value>The grip being moved.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.GripMoveRequest.NewPosition">
            <summary>
            Gets the new requested position.
            </summary>
            <value>The requested position.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.GripMoveRequest.Cancel">
            <summary>
            Gets or sets a value indicating whether this action should be canceled.
            </summary>
            <value>A value indicating whether this action should be canceled.</value>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.RotateAnnotationRequest">
            <summary>
            This class holds information for a rotate request.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.RotateAnnotationRequest.#ctor(System.Double)">
            <summary>
            Creates a new instance of RotateAnnotationRequest.
            </summary>
            <param name="rotation">The requested rotation.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.RotateAnnotationRequest.NewRotation">
            <summary>
            Gets or sets the new rotation value.
            </summary>
            <value>The rotation value.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.RotateAnnotationRequest.AllowRotationChange">
            <summary>
            Gets or sets a value indicating whether the rotation will be allowed.
            </summary>
            <value>A value indicating whether the rotation will be allowed.</value>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.MoveAnnotationRequest">
            <summary>
            This class hold information for a move request.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.MoveAnnotationRequest.#ctor(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Creates a new instance of MoveAnnotationRequest.
            </summary>
            <param name="mousePosition">The current mouse position.</param>
            <param name="currentLocation">The current annotation location.</param>
            <param name="newLocation">The requested annotation location.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.MoveAnnotationRequest.MousePosition">
            <summary>
            Gets the current mouse position.
            </summary>
            <value>The mouse position.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.MoveAnnotationRequest.CurrentLocation">
            <summary>
            Gets the current location of the annotation.
            </summary>
            <value>The current location of the annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.MoveAnnotationRequest.NewLocation">
            <summary>
            Gets or sets the new location of the annotation.
            </summary>
            <value>The new location of the annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.MoveAnnotationRequest.AllowLocationChange">
            <summary>
            Gets or set a value indicating whether the move is allowed.
            </summary>
            <value>A value indicating whether the move is allowed.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.MoveAnnotationRequest.AutoUpdateGripPositions">
            <summary>
            Gets or sets a value indicating whether the grip positions should be updated.
            </summary>
            <value>A value indicating whether the grip positions should be updated.</value>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation">
            <summary>
            This is the base PDF annotation class all WPF PDF annotations derive from.  This class should not be created directly.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.TextProperty">
            <summary>
            Identifies the Text dependency property.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.#ctor">
            <summary>
            Creates a new instance of WpfPdfAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.#ctor(Atalasoft.Annotate.Pdf.PdfAnnotationData)">
            <summary>
            Creates a new instance of WpfPdfAnnotation from a PdfAnnotationData class.
            </summary>
            <param name="data">The annotation data for this object.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.String,System.String,System.DateTime)">
            <summary>
            Creates a new instance of WpfPdfAnnotation specifying its properties.
            </summary>
            <param name="fill">The fill for the annotation.</param>
            <param name="outline">The outline for the annotation.</param>
            <param name="text">The text of the annotation.</param>
            <param name="username">The name of the user that created/modified the annotation.</param>
            <param name="modifiedDate">The last modified date for the annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.OnCanvasChanged(Atalasoft.Annotate.Wpf.ValueChangedEventArgs{Atalasoft.Annotate.Wpf.WpfAnnotationCanvas})">
            <summary>
            Called when the Canvas property has changed.
            </summary>
            <param name="e">An EventArgs for this change.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Atalasoft.Annotate.Wpf.WpfAnnotationUI.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.UpdateToolTip">
            <summary>
            Sets the ToolTip property for the annotation.
            </summary>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.Text">
            <summary>
            Gets or sets the text for the annotation.
            </summary>
            <value>The text for the annotation.</value>
            <remarks>This text is displayed in tooltips and as the WpfPdfLineAnnotation's caption.  The default popup dialog does not update this value until the dialog has been closed.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.Fill">
            <summary>
            Gets or sets the brush used to fill the annotation.
            </summary>
            <value>The brush used to fill the annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.Outline">
            <summary>
            Gets or sets the pen used to draw the annotation outline.
            </summary>
            <value>The pen used for the outline.</value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.OnGripPositionChanged(Atalasoft.Annotate.Wpf.EventArgs{Atalasoft.Annotate.Wpf.WpfAnnotationGrip})">
            <summary>
            Called when a grip for the annotation has moved.
            </summary>
            <param name="e">An EventArgs containing the grip that was moved.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a MouseDown event has been raised for the annotation.
            </summary>
            <param name="e">The MouseButtonEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a MouseUp event has been raised for the annotation.
            </summary>
            <param name="e">A MouseButtonEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.ShowPopup">
            <summary>
            This method is called to display a popup dialog for the PDF annotation.
            </summary>
            <remarks>The default dialog is a simply tool window with a textbox for editing.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.ClosePopup">
            <summary>
            This method is called to close the popup dialog.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.OnPopupClosing(System.Object,System.EventArgs)">
            <summary>
            This method is called when the default dialog is closing.
            </summary>
            <param name="sender">The dialog being closed.</param>
            <param name="e">An event args for this event.</param>
            <remarks>This is called by the default popup dialog. If a custom dialog is used, this method will not be called.</remarks>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotationRenderingEngine">
            <summary>
            This class is the rendering engine for a WpfPdfLineAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfPdfLineAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotationRenderingEngine">
            <summary>
            This class is used to render the WpfPdfMarkupAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfPdfMarkupAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotationRenderingEngine.RenderHighlighter(Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation,System.Windows.Media.Brush,System.Windows.Media.Pen,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            This method is used to render a highlighter markup annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="fill">The brush used for a fill. This may be null.</param>
            <param name="pen">The pen used for the outline. This may be null.</param>
            <param name="e">The render environment used for rendering this annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotationRenderingEngine.RenderSquiggly(Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation,System.Windows.Media.Pen,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            This method is used to render a squiggly markup annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="pen">The pen used for the outline. This may be null.</param>
            <param name="e">The render environment used for rendering this annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotationRenderingEngine.RenderStrikeOut(Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation,System.Windows.Media.Pen,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            This method is used to render a strikeout markup annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="pen">The pen used for the outline. This may be null.</param>
            <param name="e">The render environment used for rendering this annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotationRenderingEngine.RenderUnderline(Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation,System.Windows.Media.Pen,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            This method is used to render an underline markup annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="pen">The pen used for the outline. This may be null.</param>
            <param name="e">The render environment used for rendering this annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotationRenderingEngine.DrawSelectedOutline(System.Windows.Media.Pen,Atalasoft.Utils.Geometry.QuadrilateralF,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            This method is used to render the selected dash outline.
            </summary>
            <param name="pen">The pen used to render the annotation.</param>
            <param name="quad">The QuadrilateralF for the annotation.</param>
            <param name="e">The render environment used for rendering this annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotationRenderingEngine.RenderSelectionRectangle(Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation,System.Windows.Media.Pen,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            This method is used to render the selection rectangle used when creating the markup annotation.
            </summary>
            <param name="annotation">The annotation being created.</param>
            <param name="pen">The outline for the annotation.</param>
            <param name="e">The render environment used for rendering this annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation">
            <summary>
            This class represents a PDF line annotation.  While similar to a standard line annotation, the PDF version includes a caption which is centered within or above the line (if the text is too long to fit within). 
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.DisplayCaptionProperty">
            <summary>
            Identifies the DisplayCaption dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.StartPointProperty">
            <summary>
            Identifies the StartPoint dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.EndPointProperty">
            <summary>
            Identifies the EndPoint dependency property.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.#ctor">
            <summary>
            Creates a new instance of WpfPdfLineAnnotation using the WpfAnnotationUI.DefaultOutline.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.#ctor(Atalasoft.Annotate.Pdf.PdfLineData)">
            <summary>
            Creates a new instance of WpfPdfLineAnnotation from a PdfLineData object.
            </summary>
            <param name="data">The data object for this annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.#ctor(System.Windows.Point,System.Windows.Point,System.Boolean,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Creates a new instance of WpfPdfLineAnnotation specifying its points, fill and outline.
            </summary>
            <param name="startPoint">The starting point of the line in annotation space.</param>
            <param name="endPoint">The ending point of the line in annotation space.</param>
            <param name="displayCaption">Indicates whether the caption will be displayed.</param>
            <param name="fill">The brush used to fill the line cap. This can be null.</param>
            <param name="outline">The pen used for the line.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.#ctor(System.Windows.Point,System.Windows.Point,System.Boolean,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.String,System.String,System.DateTime)">
            <summary>
            Creates a new instance of WpfPdfLineAnnotation specifying its properties.
            </summary>
            <param name="startPoint">The starting point of the line in annotation space.</param>
            <param name="endPoint">The ending point of the line in annotation space.</param>
            <param name="displayCaption">Indicates whether the caption will be displayed.</param>
            <param name="fill">The brush used to fill the line cap. This can be null.</param>
            <param name="outline">The pen used for the line.</param>
            <param name="text">The text for the caption.</param>
            <param name="username">The name of the creator.</param>
            <param name="modifiedDate">The last modified date for the annotation.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.DisplayCaption">
            <summary>
            Gets or sets a value indicating whether the text caption will be shown.
            </summary>
            <value>A value indicating whether the caption will be shown.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.StartPoint">
            <summary>
            Gets or sets the starting point of the line.
            </summary>
            <value>The starting point of the line.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.EndPoint">
            <summary>
            Gets or sets the ending point of the line.
            </summary>
            <value>The ending point of the line.</value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.AttachGripsOverride(Atalasoft.Annotate.Wpf.WpfAnnotationCanvas)">
            <summary>
            Called when the annotation grips need to be created.
            </summary>
            <param name="canvas">The WpfAnnotationCanvas that will host the annotation.</param>
            <returns>
            The grips for the annotation.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.OnGripPositionChanged(Atalasoft.Annotate.Wpf.EventArgs{Atalasoft.Annotate.Wpf.WpfAnnotationGrip})">
            <inheritdoc/>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Atalasoft.Annotate.Wpf.WpfAnnotationUI.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.Geometry">
            <summary>
            Gets a Geometry representing the annotation.
            </summary>
            <value>
            A Geometry representing the annotation.
            </value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Atalasoft.Annotate.Wpf.WpfAnnotationUI.MouseDown"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a MouseMove event has been raised for the annotation.
            </summary>
            <param name="e">A MouseEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Atalasoft.Annotate.Wpf.WpfAnnotationUI.MouseUp"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Pdf.WpfPdfLineAnnotation.SupportsMultiClickCreation">
            <summary>
            Gets a value indicating whether the annotation supports being created from multiple mouse clicks.
            </summary>
            <value>
            Indicates whether the annotation supports being created from multiple mouse clicks.
            </value>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation">
            <summary>
            This class represents a PDF markup annotation, such as underline, squiggly, strikeout and highlight.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.MarkupTypeProperty">
            <summary>
            Identifies the MarkupType dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.SquigglyHeightProperty">
            <summary>
            Identifies the SquigglyHeight dependency property.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.#ctor">
            <summary>
            Creates a new instance of WpfPdfMarkupAnnotation using default values.
            </summary>
            <remarks>PdfMarkupType.Underline, WpfAnnotationUI.DefaultFill and WpfAnnotationUI.DefaultOutline will be used for the annotation.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.#ctor(Atalasoft.Annotate.Pdf.PdfMarkupData)">
            <summary>
            Creates a new instance of WpfPdfMarkupAnnotation from a PdfMarkupData object.
            </summary>
            <param name="data">The data object used to create the annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.#ctor(Atalasoft.Utils.Geometry.QuadrilateralF[],Atalasoft.Annotate.Pdf.PdfMarkupType)">
            <summary>
            Creates a new instance of WpfPdfMarkupAnnotation specifying the QuadrilateralF array and markup type.
            </summary>
            <param name="quads">An array of QuadrilateralF for the annotation.</param>
            <param name="markup">The markup type for the annotation.</param>
            <remarks>WpfAnnotationUI.DefaultFill and WpfAnnotationUI.DefaultOutline will be used for the annotation.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.#ctor(Atalasoft.Utils.Geometry.QuadrilateralF[],Atalasoft.Annotate.Pdf.PdfMarkupType,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.String,System.String,System.DateTime)">
            <summary>
            Creates a new instance of WpfPdfMarkupAnnotation specifying its properties.
            </summary>
            <param name="quads">An array of QuadrilateralF for the annotation.</param>
            <param name="markup">The markup type for the annotation.</param>
            <param name="fill">The brush used to fill the annotation. This may be null.</param>
            <param name="outline">The pen used to draw the outline of the annotation. This may be null.</param>
            <param name="text">The text for the annotation.</param>
            <param name="username">The user that created the annotation.</param>
            <param name="modifiedDate">The last modified date of the annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.AttachGripsOverride(Atalasoft.Annotate.Wpf.WpfAnnotationCanvas)">
            <summary>
            Called when the annotation grips need to be created.
            </summary>
            <param name="canvas">The WpfAnnotationCanvas that will host the annotation.</param>
            <returns>
            The grips for the annotation.
            </returns>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.Geometry">
            <summary>
            Gets a Geometry representing the annotation.
            </summary>
            <value>
            A Geometry representing the annotation.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.UnSelectedGeometry">
            <summary>
            Gets the geometry of the annotation without the selection dashes.
            </summary>
            <value>A PathGeometry for the annotation without the selection dashes.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.MarkupType">
            <summary>
            Gets or sets the annotation markup type.
            </summary>
            <value>The type of markup for this annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.SquigglyHeight">
            <summary>
            Gets or set the height of the squiggly line.
            </summary>
            <value>The height of the squiggly line.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.Quadrilaterals">
            <summary>
            Gets the QuadrilateralFCollection holding the quadrilaterals for the annotation.
            </summary>
            <value>The quadrilaterals for the annotation.</value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.OnSelectedChanged(System.EventArgs)">
            <summary>
            Called when the Selected property has been changed.
            </summary>
            <param name="e">An EventArgs for this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.OperationRequest(Atalasoft.Annotate.Wpf.OperationRequestInformation)">
            <summary>
            Called when a request operation has been raised on the annotation.
            </summary>
            <param name="request">A OperationRequestInformation for this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.OnGripPositionChanged(Atalasoft.Annotate.Wpf.EventArgs{Atalasoft.Annotate.Wpf.WpfAnnotationGrip})">
            <inheritdoc/>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Atalasoft.Annotate.Wpf.WpfAnnotationUI.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Atalasoft.Annotate.Wpf.WpfAnnotationUI.MouseDown"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a MouseMove event has been raised for the annotation.
            </summary>
            <param name="e">A MouseEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfMarkupAnnotation.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Atalasoft.Annotate.Wpf.WpfAnnotationUI.MouseUp"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Pdf.WpfPdfPopupWindow">
            <summary>
            Interaction logic for WpfPdfPopupWindow.xaml
            </summary>
            <summary> <para>This class is the window used for PDF annotations to allow their text to be modified.</para>
            <para>The window is shown when the user double-clicks on a PDF annotation.  When the window is closed, the <see
            cref="P:Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation.Text"/> property of the annotation is updated.</para> </summary>
            <summary>
            WpfPdfPopupWindow
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfPopupWindow.#ctor(Atalasoft.Annotate.Wpf.Pdf.WpfPdfAnnotation,System.EventHandler)">
            <summary> Creates a new instance of WpfPdfPopupWindow for the specified annotation. </summary>
            <exception> Thrown if the annotation argument is null (Nothing in VB). </exception>
            <param name="annotation"> The annotation for this dialog. </param>
            <param name="windowClosingHandler"> An EventHandler called when the window is closing. This can be null (Nothing in
            VB). </param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfPopupWindow.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Closing"/> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfPopupWindow.RefreshData">
            <summary>
            Reloads the dialog text data.
            </summary>
            <summary> Reloads the dialog text data. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Pdf.WpfPdfPopupWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.IWpfAnnotationRenderer">
            <summary>
            This interface must be implemented by classes that will be used to render WPF annotations.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.IWpfAnnotationRenderer.RenderAnnotation(Atalasoft.Annotate.Wpf.WpfAnnotationUI,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.IWpfGripRenderer">
            <summary>
            This interface must be implemented by classes used to render annotation grips. 
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.IWpfGripRenderer.RenderGrips(Atalasoft.Annotate.Wpf.WpfAnnotationGrips,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render grips for an annotation.
            </summary>
            <param name="grips">The grips to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the grips.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfAnnotationRenderers">
            <summary>
            This class holds all of the annotation renderers used for drawing the annotations. When a custom annotation is created, its IWpfAnnotationRenderer should be added to this collection to allow the WpfAnnotationCanvas to render the object.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfAnnotationRenderers.Add(System.Type,Atalasoft.Annotate.Wpf.Renderer.IWpfAnnotationRenderer)">
            <summary>
            Adds or replaces a rendering engine for the specified annotation type.
            </summary>
            <param name="annotationType">The annotation type for this renderer.</param>
            <param name="renderer">The renderer to use for the specified type.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfAnnotationRenderers.Get(System.Type)">
            <summary>
            Gets the renderer for the specified type.
            </summary>
            <param name="annotationType">The annotation type.</param>
            <returns>The renderer for the annotation type or a default renderer.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the annotationType argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfAnnotationRenderers.Contains(System.Type)">
            <summary>
            Returns a value indicating whether the specified annotation type is in the collection.
            </summary>
            <param name="annotationType">The annotation type to search for.</param>
            <returns>True if the annotation type is in the collection.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the annotationType argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfAnnotationRenderers.GetAnnotationTypes">
            <summary>
            Returns an array of Type for each annotation in the collection.
            </summary>
            <returns>An array of Type for each annotation or Type.EmptyTypes if the collection is empty.</returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfAnnotationRenderingEngine`1">
            <summary>
            This is the base class used to render annotations.
            </summary>
            <typeparam name="T">The annotation type this renderer is used for.</typeparam>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfAnnotationRenderingEngine`1.#ctor">
            <summary>
            Creates a new instance of WpfAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfAnnotationRenderingEngine`1.RenderAnnotation(Atalasoft.Annotate.Wpf.WpfAnnotationUI,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
            <remarks>This method will validate the arguments and setup the rendering transform on the DrawingContext before calling OnRenderAnnotation.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the arguments are null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfAnnotationRenderingEngine`1.OnRenderAnnotation(`0,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
            <remarks>The annotation and environment arguments have already be verified as non-null and the annotation rendering transform has been applied to the environment.DrawingContext before this method is called.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfAnnotationRenderingEngine`1.RenderLineCap(System.Windows.Point,System.Windows.Point,Atalasoft.Annotate.AnnotationLineCap,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            This method is called to render the a single line cap.
            </summary>
            <param name="startingPoint">The starting point of the line.</param>
            <param name="endingPoint">The ending point of the line.</param>
            <param name="lineCap">The line cap for the end point.</param>
            <param name="fill">The brush used to fill the line cap.</param>
            <param name="pen">The pen used to draw the line cap</param>
            <param name="environment">A render environment used to draw the line cap.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfAnnotationRenderingEngine`1.CreateLineCapGeometry(System.Windows.Point,System.Windows.Point,Atalasoft.Annotate.AnnotationLineCap,Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Creates the line cap geometry.
            </summary>
            <param name="startingPoint">The starting point.</param>
            <param name="endingPoint">The ending point.</param>
            <param name="lineCap">The line cap.</param>
            <param name="pen">The pen.</param>
            <returns></returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfRectangleAnnotationRenderingEngine">
            <summary>
            This class is used to render a WpfRectangleAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfRectangleAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfRectangleAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfRectangleAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.WpfRectangleAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfEllipseAnnotationRenderingEngine">
            <summary>
            This class is used to render a WpfEllipseAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfEllipseAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfEllipseAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfEllipseAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.WpfEllipseAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfTextAnnotationRenderingEngine">
            <summary>
            This class is used to render a WpfTextAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfTextAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfTextAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfTextAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.WpfTextAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfEmbeddedImageAnnotationRenderingEngine">
            <summary>
            This class is used to render a WpfEmbeddedImageAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfEmbeddedImageAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfEmbeddedImageAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfEmbeddedImageAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.WpfEmbeddedImageAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfReferencedImageAnnotationRenderingEngine">
            <summary>
            This class is used to render a WpfReferencedImageAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfReferencedImageAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfReferencedImageAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfReferencedImageAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.WpfReferencedImageAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfHotSpotAnnotationRenderingEngine">
            <summary>
            This class is used to render a WpfHotSpotAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfHotSpotAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfHotSpotAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfHotSpotAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfLineAnnotationRenderingEngine">
            <summary>
            This class is used to render a WpfLineAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfLineAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfLineAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfLineAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.WpfLineAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfPolygonAnnotationRenderingEngine">
            <summary>
            This class is used to render a WpfPolygonAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfPolygonAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfPolygonAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfPolygonAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.WpfPolygonAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfLinesAnnotationRenderingEngine">
            <summary>
            This class is used to render a WpfLinesAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfLinesAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfLinesAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfLinesAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.WpfLinesAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfFreehandAnnotationRenderingEngine">
            <summary>
            This class is used to render a WpfFreehandAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfFreehandAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfFreehandAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfFreehandAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.WpfFreehandAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfHotSpotFreehandAnnotationRenderingEngine">
            <summary>
            This class is used to render a WpfHotSpotFreehandAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfHotSpotFreehandAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfHotSpotFreehandAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfHotSpotFreehandAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfRubberStampAnnotationRenderingEngine">
            <summary>
            This class is used to render a WpfRubberStampAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfRubberStampAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfRubberStampAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfRubberStampAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfCalloutAnnotationRenderingEngine">
            <summary>
            This class is used to render a WpfCalloutAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfCalloutAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfCalloutAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfCalloutAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.WpfCalloutAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfLayerAnnotationRenderingEngine">
            <summary>
            This class is used to render a WpfLayerAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfLayerAnnotationRenderingEngine.#ctor">
            <summary>
            Creates a new instance of WpfLayerAnnotationRenderingEngine.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfLayerAnnotationRenderingEngine.OnRenderAnnotation(Atalasoft.Annotate.Wpf.WpfLayerAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Called to render the annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="environment">A WpfRenderEnvironment containing information used to render the annotation.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfGripRenderer">
            <summary>
            This class is the default grip renderer for annotations.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfGripRenderer.#ctor">
            <summary>
            Creates a new instance of WpfGripRenderer.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfGripRenderer.RenderGrips(Atalasoft.Annotate.Wpf.WpfAnnotationGrips,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Renders the specified grips.
            </summary>
            <param name="grips">The grips to render.</param>
            <param name="environment">A WpfRenderEnvironment used to render the grips.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Renderer.WpfGripRenderer.Fill">
            <summary>
            Gets or sets the brush used to fill the grips.
            </summary>
            <value>The brush used to fill the grips.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Renderer.WpfGripRenderer.Outline">
            <summary>
            Gets or sets the pen used to draw the grip outline.
            </summary>
            <value>The pen used for the grip outline.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Renderer.WpfGripRenderer.RotationFill">
            <summary>
            Gets or sets the brush used to fill the rotation grip.
            </summary>
            <value>The brush used for the rotation grip.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Renderer.WpfGripRenderer.RotationOutline">
            <summary>
            Gets or sets the pen used to render the rotation outline.
            </summary>
            <value>The pen used to render the rotation outline.</value>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment">
            <summary>
            This class is used to hold information required for rendering the annotations and grips.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment.#ctor(Atalasoft.Annotate.RenderDevice,System.Windows.Media.DrawingContext,System.Double,System.Windows.Point,Atalasoft.Annotate.AnnotateInteractMode,System.Double)">
            <summary>
            Creates a new instance of WpfRenderEnvironment.
            </summary>
            <param name="device">The target device for this render session.</param>
            <param name="drawingContext">The DrawingContext used for drawing the annotations.</param>
            <param name="zoom">The zoom of the WpfAnnotationCanvas.</param>
            <param name="resolution">The resolution of the WpfAnnotationCanvas.</param>
            <param name="interactMode">The interaction mode of the WpfAnnotationCanvas.</param>
            <param name="scaledResolutionHeightFactor"> the resolution's scale height factor. Default 1.0</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the drawingContext argument is null (Nothing in VB).</exception>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment.Device">
            <summary>
            Gets the target device for this render session.
            </summary>
            <value>The target device for this render session.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment.DrawingContext">
            <summary>
            Gets the DrawingContext used to draw the annotations.
            </summary>
            <value>The DrawingContext used for drawing the annotations.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment.Zoom">
            <summary>
            Gets the zoom of the WpfAnnotationCanvas.
            </summary>
            <value>The zoom of the WpfAnnotationCanvas.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment.Resolution">
            <summary>
            Gets the resolution of the WpfAnnotationCanvas.
            </summary>
            <value>The resolution of the WpfAnnotationCanvas.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment.InteractMode">
            <summary>
            Gets the current interaction mode of the WpfAnnotationCanvas.
            </summary>
            <value>The interaction mode of the WpfAnnotationCanvas.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment.ScaledResolutionHeightFactor">
            <summary>
            Gets the scaled resolution height factor.
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.ValueChangedEventArgs`1">
            <summary>
            This class is used to indicate that a value has changed.
            </summary>
            <typeparam name="T">The type of object being changed.</typeparam>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.ValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Creates a new instance of ValueChangedEventArgs.
            </summary>
            <param name="previousValue">The previous value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.ValueChangedEventArgs`1.PreviousValue">
            <summary>
            Gets the previous value.
            </summary>
            <value>The previous value.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.ValueChangedEventArgs`1.NewValue">
            <summary>
            Gets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas">
            <summary>
            The WpfAnnotationCanvas is a Canvas object used to render annotations. This class is similar to the AnnotationController used in DotImage.
            </summary>
        </member>
        <member name="E:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.PropertyChanged">
            <summary>
            This event is raised when a property has changed.
            </summary>
        </member>
        <member name="E:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.GripsAttached">
            <summary>
            This event is raised when grips have been attached to an annotation.
            </summary>
        </member>
        <member name="E:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.HotSpotClicked">
            <summary>
            This event is raised when a hot spot annotation is clicked.
            </summary>
        </member>
        <member name="E:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.SelectedAnnotationsChanged">
            <summary>
            This event is raised when the annoation selection has changed.
            </summary>
        </member>
        <member name="E:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.AnnotationDeserialization">
            <summary>
            This event is raised after annotation have been deserialized, providing an option to replace the annotation objects.
            </summary>
        </member>
        <member name="E:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.AnnotationCreated">
            <summary>
            This event is raised when a user has finished creating an annotation.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ActiveAnnotationProperty">
            <summary>
            Identifies the ActiveAnnotation dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.AnnotationConfinementProperty">
            <summary>
            Identifies the AnnotationConfinement dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ClipToDocumentProperty">
            <summary>
            Identifies the ClipToDocument dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.CreateMouseButtonProperty">
            <summary>
            Identifies the CreateMouseButton dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.CurrentLayerProperty">
            <summary>
            Identifies the CurrentLayer dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.DefaultSecurityProperty">
            <summary>
            Identifies the DefaultSecurity dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.DocumentBoundsProperty">
            <summary>
            Identifies the DocumentBounds dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.GripClipProperty">
            <summary>
            Identifies the GripClip dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.InteractModeProperty">
            <summary>
            Identifies the InteractMode dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.SelectionModeProperty">
            <summary>
            Identifies the SelectionMode dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.RotationSnapIntervalProperty">
            <summary>
            Identifies the RotationSnapInterval dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.RotationSnapThresholdProperty">
            <summary>
            Identifies the RotationSnapThreshold dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ResolutionProperty">
            <summary>
            Identifies the Resolution dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ScrollPositionProperty">
            <summary>
            Identifies the ScrollPosition dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ZoomProperty">
            <summary>
            Identifies the Zoom dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ScaledResolutionHeightFactorProperty">
            <summary>
            Identifies the ScaledResolutionHeightFactor dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.IsDirtyProperty">
            <summary>
            Identifies the IsDirty dependency property.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.#ctor">
            <summary>
            Creates a new instance of WpfAnnotationCanvas.
            </summary>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Factories">
            <summary>
            Gets the WpfAnnotationUIFactoryCollection used when deserializing annotation data.
            </summary>
            <value>The WpfAnnotationUIFactoryCollection used when deserializing annotation data.</value>
            <remarks>All custom annotations must add a factory for itself before they can be deserialized.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.CanPaste">
            <summary>
            Gets a value indicating whether there is annotation data on the clipboard.
            </summary>
            <value>A value indicating whether there is annotation data on the clipboard.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ScaledResolutionHeightFactor">
            <summary>
            Gets or sets the scaled resolution height factor used for image with different X and Y resolution values.
            </summary>
            <value>The scaled height factor of the image.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.GripClip">
            <summary>
            Gets or sets a clipping region for the annotation grips.
            </summary>
            <value>A clipping region for the grips.</value>
            <remarks>Because annotation grips are in the AdornerLayer they render over normal element. Set this property to prevent them from rendering over parts of your application that may overlay the annotation viewer.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ActiveAnnotation">
            <summary>
            Gets or sets the annotation that is currently active.
            </summary>
            <value>The active annotation or null (Nothing in VB) if there is no active annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.AnnotationConfinement">
            <summary>
            Gets or sets the confinement mode used for the annotations.
            </summary>
            <value>The confinement mode for the annotations.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ClipToDocument">
            <summary>
            Gets or sets a value indicating whether the annotation rendering should be clipped to the document bounds.
            </summary>
            <value>Indicates whether the annotation rendering should be clipped to the document bounds.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.CreateMouseButton">
            <summary>
            Gets or sets the mouse button used for annotation creation.
            </summary>
            <value>The mouse button used for annotation creation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.CurrentLayer">
            <summary>
            Gets or sets the current active layer.
            </summary>
            <value>The current active layer.</value>
            <remarks>When an annotation is created, it will automatically be placed into the current layer.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.DefaultSecurity">
            <summary>
            Gets or sets the default security for newly created annotations.
            </summary>
            <value>The default security for new annotations.</value>
            <remarks>The security will only be set if the new annotation does not already have its Security property set.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.InteractMode">
            <summary>
            Gets or sets the mouse interaction mode for annotations.
            </summary>
            <value>The mouse interaction mode for annotations.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.IsDirty">
            <summary>
            Gets a value indicating whether there have been any changes since the last call to Save.
            </summary>
            <value>Indicates whether there have been any changes since the last save.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Layers">
            <summary>
            Gets the WpfLayerCollection used by the canvas.
            </summary>
            <value>The layer collection for the canvas.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.SelectionMode">
            <summary>
            Gets or sets the selection mode to use when a mouse is clicked on an annotation.
            </summary>
            <value>The selection mode for annotations.</value>
            <remarks>When this property is set to Multiple, multiple annotations can be selected by simply clicking on them. If you click on an annotation that is already selected, it will unselect the annotation.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.RotationSnapInterval">
             <summary>
             Gets or sets the interval used for snapping interactive rotation to degrees.
            
             This is used to help users when rotating an annotation, making it easier to stop at whole degrees. The snap area is determined by the RotationSnapThreshold property.
             </summary>
             <value>The degree interval used for interactive rotation snapping.</value>
             <remarks>This value must be from 0 to 180 and evenly divisible into 360. When setting this property the value will automatically be converted into a valid value.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.RotationSnapThreshold">
            <summary>
            Gets or sets the amount of deviation from the RotationSnapInterval that will be used to snap to the rotation interval.
            </summary>
            <value>The amount of deviation from the RotationSnapInterval.</value>
            <remarks>This value must be from 0 to half the RotationSnapInterval. If the property is set to an invalid value it will be automatically corrected.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.SelectedAnnotations">
            <summary>
            Gets a read-only collection of the currently selected annotations.
            </summary>
            <value>A read-only collection of the selected annotations.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.WaitingToCreate">
            <summary>
            Gets a value indicating whether the WpfAnnotationCanvas is waiting for the user to create an annotation.
            </summary>
            <value>Indicates whether we are waiting for the user to create an annotation.</value>
            <remarks>The ExitCreateMode method can be used to break out of creation mode.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.DocumentBounds">
            <summary>
            Gets or sets the bounding rectangle of the document being annotated.
            </summary>
            <value>The bounds of the document.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Resolution">
            <summary>
            Gets or sets the resolution of the document.
            </summary>
            <value>The resolution of the document.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Zoom">
            <summary>
            Gets or sets the zoom level for the document.
            </summary>
            <value>The zoom level for the document.</value>
            <remarks>This value must be greater than zero.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ScrollPosition">
            <summary>
            Gets or sets the scrollbar position.
            </summary>
            <value>The scrollbar position.</value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.RotateDocument(Atalasoft.Annotate.DocumentRotation)">
            <summary>Rotates the annotations in 90 degree increments.</summary>
            <param name="rotation">The rotation amount.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)">
            <summary>
            Rotates the annotations in 90 degree increments for the specified layer index.
            </summary>
            <param name="rotation">The rotation amount.</param>
            <param name="layerIndex">The index of the layer to rotate.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is invalid for the layer collection.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.RotateDocument(Atalasoft.Annotate.DocumentRotation,Atalasoft.Annotate.Wpf.WpfLayerAnnotation)">
            <summary>
            Rotates the annotations in 90 degree increments for the specified layer.
            </summary>
            <param name="rotation">The rotation amount.</param>
            <param name="layer">The layer to rotate or null (Nothing in VB) to rotate all layers.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ReplaceGrips(Atalasoft.Annotate.Wpf.WpfAnnotationUI,Atalasoft.Annotate.Wpf.WpfAnnotationGrips)">
            <summary>
            Replaces the grips of an annotation with new grips.
            </summary>
            <param name="annotation">The annotation for which grips will be replaced.</param>
            <param name="newGrips">The new grips. This can be null (Nothing in VB).</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the annotation argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ActivateControlElement(Atalasoft.Annotate.Wpf.WpfAnnotationUI,System.Windows.UIElement)">
            <summary>
            Adds a child element to the canvas.
            </summary>
            <param name="parentAnnotation">The annotation associated with this element.</param>
            <param name="element">The element to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.DeactivateControlElement(System.Windows.UIElement)">
            <summary>
            Removes a child control from the canvas.
            </summary>
            <param name="element">The element to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the element argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.CreateAnnotation(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary> Use this method to enter "create" mode where the user will create the provided annotation using the mouse.
            </summary>
            <remarks> Create mode is automatically existed when the user has finished creating the annotation.  To force
            'create' mode to exit, call <see cref="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ExitCreateMode" />. </remarks>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.WpfAnnotationCanvas~CreateAnnotation&quot;]/*" />
            </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.WpfAnnotationCanvas~CreateAnnotation&quot;]/*" />
            </overloads>
            <param name="annotationToCreate"> The annotation to create. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ExitCreateMode">
            <summary>
            Use this method to exit out of "create" mode.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Group">
            <summary> Combines annotations into a <see cref="T:Atalasoft.Annotate.Wpf.WpfLayerAnnotation"/> and adds it to the <see
            cref="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.CurrentLayer"/>. </summary>
            <remarks> This method will remove the annotations from the current layer they are in and place them into a new <see
            cref="T:Atalasoft.Annotate.Wpf.WpfLayerAnnotation"/>. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Group(Atalasoft.Annotate.Wpf.WpfAnnotationUI[])">
            <summary>
            Combines annotations into a WpfLayerAnnotation and adds it to the CurrentLayer.
            </summary>
            <param name="annotations">An array of annotations to group.</param>
            <remarks>This method will remove the annotations from the current layer they are in and place them into a new WpfLayerAnnotation.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Ungroup">
            <summary>
            Ungroups the currently selected annotation into the CurrentLayer.
            </summary>
            <remarks>This method will do nothing if the currently selected annotation is not a group.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Ungroup(Atalasoft.Annotate.Wpf.WpfLayerAnnotation,Atalasoft.Annotate.Wpf.WpfLayerAnnotation)">
            <summary>
            Removes annotations from one layer and adds them to another. 
            </summary>
            <param name="groupLayer">The layer containing annotations to ungroup.</param>
            <param name="hostLayer">The layer where annotation will be added.</param>
            <remarks>If the groupLayer is contained within a layer currently in the LayerCollection it will be removed from the collection.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ConfinedBounds">
            <summary> Gets the confined bounds based on the <see cref="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.AnnotationConfinement"/>, <see
            cref="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.DocumentBounds"/> and <see cref="P:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Zoom"/> properties. </summary>
            <value> The confined bounds. </value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.GetConfinedLocation(Atalasoft.Annotate.Wpf.WpfAnnotationUI,System.Windows.Point)">
            <summary>
            This method can be used to determine a valid location for an annotation with regard to the confinement area.
            </summary>
            <param name="annotation">The annotation this new location will be used with.</param>
            <param name="requestedLocation">The requested location to test.</param>
            <returns>A valid location for this annotation, keeping it within the confined bounds.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the annotation argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.GetConfinedRotation(Atalasoft.Annotate.Wpf.WpfAnnotationUI,System.Double)">
            <summary>
            This method can be used to determine whether the provided rotation value is valid for the annotation with regard to the confinement area.
            </summary>
            <param name="annotation">The annotation this rotation would be used with.</param>
            <param name="requestedRotation">The requested rotation for the annotation.</param>
            <returns>A valid rotation for this annotation, keeping it within the confined bounds.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the annotation argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.CountAnnotations">
            <summary> Counts the number of annotations in this canvas. </summary>
            <returns> The number of annotations found. </returns>
            <remarks> Group annotations will only count as 1 annotation. </remarks>
            <overloads> These methods count the annotations in all layers or only a single layer. </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.WpfAnnotationCanvas~CountAnnotations&quot;]/*" />
            </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.WpfAnnotationCanvas~CountAnnotations&quot;]/*" />
            </overloads>
            <remarks> Group annotations will only count as 1 annotation. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.CountAnnotations(Atalasoft.Annotate.Wpf.WpfLayerAnnotation)">
            <summary>
            Counts the number of annotations in the provided layer.
            </summary>
            <param name="layer">The layer to count annotations from.</param>
            <returns>The number of annotations found in the layer.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the layer argument is null (Nothing in VB).</exception>
            <remarks>Group annotations will only count as 1 annotation.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.GetTopLevelLayer(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Returns the top level layer for the provided annotation.
            </summary>
            <param name="annotation">The annotation to work with.</param>
            <returns>The top level layer containing the provided annotation or null (Nothing in VB) if a layer cannot be found.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the annotation argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.CreateViewerMatrix">
            <summary>
            Returns a Matrix used when rendering annotations to the viewer.
            </summary>
            <returns>The Matrix used when rendering annotations to the viewer.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.RenderAllLayers(Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Renders all annotations using the provided environment.
            </summary>
            <param name="environment">A render environment containing information needed to perform this action.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the environment argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.RenderLayer(Atalasoft.Annotate.Wpf.WpfLayerAnnotation,Atalasoft.Annotate.Wpf.Renderer.WpfRenderEnvironment)">
            <summary>
            Renders a single layer of annotations using the WpfRenderEnvironment provided.
            </summary>
            <param name="layer">The layer containing annotations to render.</param>
            <param name="environment">A render environment containing information needed to perform this action.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.AnnotationFromPoint(System.Windows.Point,System.Boolean)">
            <summary>
            Finds the annotation at the specified point.
            </summary>
            <param name="point">The point to look for an annotation.</param>
            <param name="pointInControlSpace">Indicates whether the point is in Viewer (control) space or document space.</param>
            <returns>The annotation found at the provided location or null (Nothing in VB) if an annotation is not found.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.CreateVisual">
            <summary> Returns a <STRONG>Visual</STRONG> object of the annotations. This is useful for printing annotations or
            saving them to XPS documents. </summary>
            <returns> A <STRONG>Visual</STRONG> object of the annotations. </returns>
            <example> CreateVisual Method </example>
            <overloads> These methods are used to create a <STRONG>Visual</STRONG> of the annotations. </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.WpfAnnotationCanvas~CreateVisual&quot;]/*" />
            </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.WpfAnnotationCanvas~CreateVisual&quot;]/*" />
            </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.CreateVisual(System.Windows.Media.Imaging.BitmapSource)">
            <summary> Returns a <STRONG>Visual</STRONG> object of the annotations and optional source image using the specified
            parameters. This is useful for printing annotations or saving them to XPS documents. </summary>
            <returns> A <STRONG>Visual</STRONG> object of the annotations and image. </returns>
            <remarks> When a source image is provided, the annotation rendering will be clipped to the image area. </remarks>
            <example> CreateVisual Method </example>
            <param name="source"> A source image the annotations will render over. This may be null (Nothing in VB). </param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.CreateVisual(System.Windows.Media.Imaging.BitmapSource,System.Windows.Size,Atalasoft.Annotate.Wpf.WpfVisualScaleMode,System.Windows.Thickness)">
            <summary> Returns a <STRONG>Visual</STRONG> object of the annotations and optional source image using the specified
            parameters. This is useful for printing annotations or saving them to XPS documents. </summary>
            <returns> A <STRONG>Visual</STRONG> object of the annotations and image. </returns>
            <remarks> When a source image is provided, the annotation rendering will be clipped to the image area. </remarks>
            <example> CreateVisual Method </example>
            <param name="source"> A source image the annotations will render over. This may be null (Nothing in VB). </param>
            <param name="pageSize"> The page size used to scale the annotation and image rendering. </param>
            <param name="scaleMode"> The type of scaling to perform. </param>
            <param name="padding"> The padding around the annotations and image. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.CreateVisual(Atalasoft.Annotate.Wpf.WpfAnnotationUICollection,System.Windows.Media.Imaging.BitmapSource,System.Windows.Size,Atalasoft.Annotate.Wpf.WpfVisualScaleMode,System.Windows.Thickness)">
            <summary> Returns a <STRONG>Visual</STRONG> object of the specified annotations and optional source image using the
            specified parameters. This is useful for printing annotations or saving them to XPS documents. </summary>
            <returns> A <STRONG>Visual</STRONG> object of the annotations and image. </returns>
            <remarks> When a source image is provided, the annotation rendering will be clipped to the image area. </remarks>
            <exception> Thrown if the annotations argument is null (Nothing in VB). </exception>
            <example> CreateVisual Method </example>
            <param name="annotations"> A collection of WpfAnnotationUI object. </param>
            <param name="source"> A source image the annotations will render over. This may be null (Nothing in VB). </param>
            <param name="pageSize"> The page size used to scale the annotation and image rendering. </param>
            <param name="scaleMode"> The type of scaling to perform. </param>
            <param name="padding"> The padding around the annotations and image. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Burn(System.Windows.Media.Imaging.BitmapSource)">
            <summary> Burns all annotations and <STRONG>BitmapSource</STRONG> together, returning the combined image. </summary>
            <returns> A new image of the combined source image and annotations. </returns>
            <exception> Thrown if the source argument is null (Nothing in VB). </exception>
            <example> Burn Method </example>
            <param name="source"> A <STRONG>BitmapSource</STRONG> onto which annotations will burn. </param>
            <overloads> These methods are used to burn annotations onto a <STRONG>BitmapSource</STRONG>. </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.WpfAnnotationCanvas~Burn&quot;]/*" />
            </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage.Wpf.Annotations~Atalasoft.Annotate.Wpf.WpfAnnotationCanvas~Burn&quot;]/*" />
            </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Burn(Atalasoft.Annotate.Wpf.WpfAnnotationUI,System.Windows.Media.Imaging.BitmapSource)">
            <summary> Burns the provided annotation and <STRONG>BitmapSource</STRONG> together, returning the combined image.
            </summary>
            <returns> A new image of the combined source image and annotation. </returns>
            <exception> Thrown if any arguments are null (Nothing in VB). </exception>
            <example> Burn Method </example>
            <param name="annotation"> The annotation to burn. </param>
            <param name="source"> A <STRONG>BitmapSource</STRONG> onto which the annotation will burn. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Burn(Atalasoft.Annotate.Wpf.WpfAnnotationUICollection,System.Windows.Media.Imaging.BitmapSource)">
            <summary> Burns annotations in the provided <see cref="T:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection"/> along with the provided
            <STRONG>BitmapSource</STRONG> and returns the combined image. </summary>
            <returns> A new image of the combined source image and annotations. </returns>
            <exception> Thrown if any arguments are null (Nothing in VB). </exception>
            <example> Burn Method </example>
            <param name="annotations"> A <see cref="T:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection"/> containing annotations to burn. </param>
            <param name="source"> A <STRONG>BitmapSource</STRONG> onto which annotations will burn. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Cut">
            <summary>
            Copies the selected annotations to the clipboard as XMP annotation data, then removes the selected annotations from the viewer.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Copy">
            <summary>
            Copies the selected annotations to the clipboard as XMP annotation data.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Paste">
            <summary>
            Pastes annotations from the clipboard into the current layer.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.SelectFromBounds(System.Windows.Rect,System.Boolean)">
            <summary>
            Selects annotations that are partially or fully within a rectangular area.
            </summary>
            <param name="bounds">The bounding rectangle to look for annotations. This value must be specified in document space.</param>
            <param name="fullyContained">Indicates if the annotation has to be fully within the bounds before it's selected.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.SelectFromBounds(Atalasoft.Annotate.Wpf.WpfLayerAnnotation,System.Windows.Rect,System.Boolean)">
            <summary>
            Selects annotations from a layer that are without a bounding region.
            </summary>
            <param name="layer">The layer to search for annotations.</param>
            <param name="bounds">The bounding rectangle to search. This value must be specified in document space.</param>
            <param name="fullyContained">Indicates if the annotation has to be fully within the bounds before it's selected.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the layer argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.SelectAll(System.Boolean)">
            <summary>
            Selects all of the annotations on the current layer or all layers.
            </summary>
            <param name="allLayers">Indicates whether to select annotations on all of the layers. If this is false, only the current layer annotations are selected.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.SelectAll(Atalasoft.Annotate.Wpf.WpfLayerAnnotation)">
            <summary>
            Selects all of the annotations in the specified layer.
            </summary>
            <param name="layer">The layer containing annotations to select.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.SelectAnnotation(Atalasoft.Annotate.Wpf.WpfAnnotationUI,System.Boolean)">
            <summary> Selects the specified annotation optionally replacing the current selection. </summary>
            <exception> Thrown if the annotation argument is null (Nothing in VB). </exception>
            <param name="annotation"> The annotation to select. </param>
            <param name="replaceCurrentSelection"> Indicates whether the current selection should be replaced. </param>
            <overloads> These methods are used to select one or more annotations with the option is replacing the current
            selection. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.SelectAnnotation(Atalasoft.Annotate.Wpf.WpfAnnotationUI[],System.Boolean)">
            <summary> Selects one or more annotations with the option of replacing the current selection. </summary>
            <exception> Thrown if the annotations argument is null (Nothing in VB). </exception>
            <param name="annotations"> An array of annotations to select. </param>
            <param name="replaceCurrentSelection"> Indicates whether the current selection should be replaced. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.ClearSelection">
            <summary>
            Clears the currently selected annotations.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Load(System.Byte[],Atalasoft.Annotate.AnnotationDataFormat)">
            <summary>
            Loads annotations from a byte array with the specified data format.
            </summary>
            <param name="data">The byte array containing annotation data.</param>
            <param name="format">The format of the annotation data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null (Nothing in VB).</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error during deserialization.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the data format is unknown.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Load(System.Byte[],System.Runtime.Serialization.IFormatter)">
            <summary>
            Loads annotations from a byte array into the layer collection.
            </summary>
            <param name="data">The byte array containing annotation data.</param>
            <param name="formatter">The formatter used to deserialize the data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null (Nothing in VB).</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error during deserialization.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Load(System.Byte[],Atalasoft.Annotate.Wpf.WpfLayerAnnotation,System.Runtime.Serialization.IFormatter)">
            <summary>
            Loads annotations from a byte array into the provided layer.
            </summary>
            <param name="data">A byte array containing annotation data.</param>
            <param name="layer">The layer to which the annotations will be added.</param>
            <param name="formatter">The formatter used to deserialize the data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null (Nothing in VB).</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error during deserialization.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Load(System.IO.Stream,Atalasoft.Annotate.AnnotationDataFormat)">
            <summary>
            Loads annotations from a stream with the specified data format.
            </summary>
            <param name="stream">The stream containing annotation data.</param>
            <param name="format">The format of the annotation data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null (Nothing in VB).</exception>
            <exception cref="T:System.ArgumentException">Thrown if the stream does not have read access.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error during deserialization.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the data format is unknown.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Load(System.IO.Stream,System.Runtime.Serialization.IFormatter)">
            <summary>
            Loads annotations from a stream into the layer collection.
            </summary>
            <param name="stream">The stream containing annotation data.</param>
            <param name="formatter">The formatter used to deserialize the data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null (Nothing in VB).</exception>
            <exception cref="T:System.ArgumentException">Thrown if the stream does not have read access.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error during deserialization.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Load(System.IO.Stream,Atalasoft.Annotate.Wpf.WpfLayerAnnotation,System.Runtime.Serialization.IFormatter)">
            <summary>
            Loads annotations from a stream into the provided layer.
            </summary>
            <param name="stream">A stream containing annotation data.</param>
            <param name="layer">The layer to which the annotations will be added.</param>
            <param name="formatter">The formatter used to deserialize the data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null (Nothing in VB).</exception>
            <exception cref="T:System.ArgumentException">Thrown if the stream does not have read access.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error during deserialization.</exception>
            <remarks>If the annotation data is a collection of layers, each layer will be added as a child item supplied layer. If the data is a single layer, all annotations within the deserialized layer will be added to the supplied layer.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Load(System.String,Atalasoft.Annotate.AnnotationDataFormat)">
            <summary>
            Loads annotations from a file with the specified data format.
            </summary>
            <param name="fileName">The filename where annotation data is stored.</param>
            <param name="format">The format of the annotation data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null (Nothing in VB).</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the file does not exist.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error during deserialization.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the data format is unknown.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Load(System.String,System.Runtime.Serialization.IFormatter)">
            <summary>
            Loads annotations from a file into the layers collection.
            </summary>
            <param name="fileName">The filename where annotation data is stored.</param>
            <param name="formatter">The formatter used to deserialize the data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null (Nothing in VB).</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the file does not exist.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error during deserialization.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Load(System.String,Atalasoft.Annotate.Wpf.WpfLayerAnnotation,System.Runtime.Serialization.IFormatter)">
            <summary>
            Loads annotations from a file into the provided layer.
            </summary>
            <param name="fileName">The filename where annotation data is stored.</param>
            <param name="layer">The layer to which the annotations will be added.</param>
            <param name="formatter">The formatter used to deserialize the data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null (Nothing in VB).</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the file does not exist.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error during deserialization.</exception>
            <remarks>If the annotation data is a collection of layers, each layer will be added as a child item supplied layer. If the data is a single layer, all annotations within the deserialized layer will be added to the supplied layer.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Save(Atalasoft.Annotate.AnnotationDataFormat)">
            <summary>
            Serializes all annotations into a byte array using the specified format.
            </summary>
            <param name="format">The data format to use.</param>
            <returns>A byte array containing the serialized data.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the data format is unknown.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Save(System.Runtime.Serialization.IFormatter)">
            <summary>
            Serializes all annotations into a byte array.
            </summary>
            <param name="formatter">The formatter used for serialization.</param>
            <returns>A byte array containing the serialized data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the formatter is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Save(Atalasoft.Annotate.Wpf.WpfLayerAnnotation,System.Runtime.Serialization.IFormatter)">
            <summary>
            Serializes the provided layer into a byte array.
            </summary>
            <param name="layer">The layer to serialize.</param>
            <param name="formatter">The formatter used for serialization.</param>
            <returns>A byte array containing the serialized data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any parameters passed in are null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Save(System.IO.Stream,Atalasoft.Annotate.AnnotationDataFormat)">
            <summary>
            Saves all loaded annotations to a stream with the specified data format.
            </summary>
            <param name="stream">The stream to which the data will be saved.</param>
            <param name="format">The data format to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any parameters passed in are null (Nothing in VB).</exception>
            <exception cref="T:System.ArgumentException">Thrown if the stream does not have write access.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the data format is unknown.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)">
            <summary>
            Saves all loaded annotations to a stream.
            </summary>
            <param name="stream">The stream to which the data will be saved.</param>
            <param name="formatter">The formatter used to save the annotations.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any parameters passed in are null (Nothing in VB).</exception>
            <exception cref="T:System.ArgumentException">Thrown if the stream does not have write access.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Save(System.IO.Stream,Atalasoft.Annotate.Wpf.WpfLayerAnnotation,System.Runtime.Serialization.IFormatter)">
            <summary>
            Saves the provided layer to a stream.
            </summary>
            <param name="stream">The stream to which the data will be saved.</param>
            <param name="layer">The layer to save.</param>
            <param name="formatter">The formatter used to save the annotations.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any parameters passed in are null (Nothing in VB).</exception>
            <exception cref="T:System.ArgumentException">Thrown if the stream does not have write access.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Save(System.String,Atalasoft.Annotate.AnnotationDataFormat)">
            <summary>
            Saves all loaded annotations to a file with the specified data format.
            </summary>
            <param name="fileName">The filename to which the data will be saved.</param>
            <param name="format">The data format to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any parameters passed in are null (Nothing in VB) or if the filename is zero length.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the data format is unknown.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Save(System.String,System.Runtime.Serialization.IFormatter)">
            <summary>
            Saves all loaded annotations to a file.
            </summary>
            <param name="fileName">The filename to which the data will be saved.</param>
            <param name="formatter">The formatter used to save the annotations.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any parameters passed in are null (Nothing in VB) or if the filename is zero length.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.Save(System.String,Atalasoft.Annotate.Wpf.WpfLayerAnnotation,System.Runtime.Serialization.IFormatter)">
            <summary>
            Saves the provided layer to a file.
            </summary>
            <param name="fileName">The filename to which the data will be saved.</param>
            <param name="layer">The layer to save.</param>
            <param name="formatter">The formatter used to save the annotations.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any parameters passed in are null (Nothing in VB) or if the filename is zero length.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <summary>
            Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)"/> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.HitTestResult"/>).
            </summary>
            <param name="hitTestParameters">Describes the hit test to perform, including the initial hit point.</param>
            <returns>
            Results of the test, including the evaluated point.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.AttachLayerGrips(Atalasoft.Annotate.Wpf.WpfLayerAnnotation)">
            <summary>
            Attaches the grip adorners of annotations in the provided layer to the WpfAnnotationCanvas.
            </summary>
            <param name="layer">The layer containing annotations to attach.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the layer argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.AttachGrips(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Attaches the grip adorner of the specified annotation to the WpfAnnotationCanvas.
            </summary>
            <param name="annotation">The annotation to attach.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the annotation argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.DetachGrips(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Detaches the annotation grips from the WpfAnnotationCanvas.
            </summary>
            <param name="annotation">The annotation to detach from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the annotation argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the content of a <see cref="T:System.Windows.Media.DrawingContext"/> object during the render pass of a <see cref="T:System.Windows.Controls.Panel"/> element.
            </summary>
            <param name="dc">The <see cref="T:System.Windows.Media.DrawingContext"/> object to draw.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp"/> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the mouse button was released.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.OnAnnotationCreated(Atalasoft.Annotate.Wpf.EventArgs{Atalasoft.Annotate.Wpf.WpfAnnotationUI})">
            <summary>
            Raises the <see cref="E:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas.AnnotationCreated"/> event.
            </summary>
            <param name="e">The EventArgs &lt;WpfAnnotationUI&gt;instance containing the event data.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfAnnotationCursors">
            <summary>
            AnnotationCursors is a used to hold all of the Cursor objects for the annotations.  This simplifies changing the appearance of the cursors.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCursors.DefaultCursor">
            <summary>
            Gets or sets the default cursor used when the pointer is not over an annotation or grip.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCursors.EastWestCursor">
            <summary>
            Gets or sets the cursor used when over the left or right center grip.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCursors.HotSpotCursor">
            <summary>
            Gets or sets the cursor used for hot spots.  This is only shown when InteractMode is set to View.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCursors.MoveCursor">
            <summary>
            Gets or sets the cursor used to indicate a move operation.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCursors.NortheastSouthwestCursor">
            <summary>
            Gets or sets the cursor used for the top-right and bottom-left grips.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCursors.NorthSouthCursor">
            <summary>
            Gets or sets the cursor used for the top and bottom center grips.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCursors.NorthwestSoutheastCursor">
            <summary>
            Gets or sets the cursor used for the top-left and bottom-right grips.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationCursors.RotateCursor">
            <summary>
            Gets or sets the cursor used for the rotation grip.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationCursors.#cctor">
            <summary>
            A static constructor for WpfAnnotationCursors.
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.EventArgs`1">
            <summary>
            This class is a generic version of EventArgs.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.EventArgs`1.#ctor(`0)">
            <summary>
            Creates a new instance of EventArgs.
            </summary>
            <param name="item">The item for the event.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.EventArgs`1.Item">
            <summary>
            Gets the event item.
            </summary>
            <value>The event item.</value>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfAnnotationGrip">
            <summary>
            This class represents a single grip.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationGrip.DefaultSize">
            <summary>
            Gets or sets the default size used for annotation grips.
            </summary>
            <value>The default grip size. This value defaults to an 8x8 grip.</value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrip.#ctor">
            <summary>
            Creates a new instance of WpfAnnotationGrip.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrip.#ctor(System.Windows.Point,System.Windows.Size,Atalasoft.Annotate.Wpf.WpfAnnotationGripAction,System.String,Atalasoft.Annotate.Wpf.WpfRectangleGrip)">
            <summary>
            Creates a new instance of WpfAnnotationGrip specifying its properties.
            </summary>
            <param name="position">The position of the grip in document space.</param>
            <param name="size">The size of the grip.</param>
            <param name="action">The action the grip will perform.</param>
            <param name="name">A name for the grip. This can be null (Nothing in VB).</param>
            <param name="rectangleGrip">Indicates the rectangle grip usage, if any.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrip.#ctor(System.Windows.Point,System.Windows.Size,Atalasoft.Annotate.Wpf.WpfAnnotationGripAction,System.String,Atalasoft.Annotate.Wpf.WpfRectangleGrip,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of WpfAnnotationGrip specifying its properties.
            </summary>
            <param name="position">The position of the grip in document space.</param>
            <param name="size">The size of the grip.</param>
            <param name="action">The action the grip will perform.</param>
            <param name="name">A name for the grip. This can be null (Nothing in VB).</param>
            <param name="rectangleGrip">Indicates the rectangle grip usage, if any.</param>
            <param name="isZone">Indicates whether this grip is a zone or a visible grip.</param>
            <param name="isRotationIndependent">Indicates whether this grip is affected by the rotation of the annotation.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrip.IsRotationIndependent">
            <summary>
            Gets a value indicating whether the grip is affected by the rotation of the annotation.
            </summary>
            <value>Indicates whether the grip is affected by the rotation of the annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrip.IsZone">
            <summary>
            Gets a value indicating whether this grip is a zone or a visible grip.
            </summary>
            <value>Indicates whether this grip is a zone.</value>
            <remarks>A zone grip acts like a normal grip, but it is not rendered.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrip.RectangleGrip">
            <summary>
            Gets or sets the rectangle grip usage.
            </summary>
            <value>The rectangle grip usage.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrip.Position">
            <summary>
            Gets or sets the position of the grip in document space.
            </summary>
            <value>The position of the grip.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrip.Action">
            <summary>
            Gets or sets the grip action.
            </summary>
            <value>The grip action.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrip.Name">
            <summary>
            Gets or sets a name for the grip.
            </summary>
            <value>A name for the grip.</value>
            <remarks>This property is not required and may be null (Nothing in VB).</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrip.Size">
            <summary>
            Gets or sets the size of the grip.
            </summary>
            <value>The size of the grip.</value>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfAnnotationGrips">
            <summary>
            This is the base grips class used for annotations.
            </summary>
            <summary> This is the base grips class used for annotations. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationGrips._canvas">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas"/> that hosts the grips. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas"/> hosting the grips. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationGrips._annotation">
            <summary> Gets the annotation for these grips. </summary>
            <value> The annotation for these grips. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationGrips._renderer">
            <summary> Gets or sets the renderer used for the grips. </summary>
            <value> The renderer used for the grips. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationGrips._centerOfRotation">
            <summary> Gets the center of rotation for the grips. </summary>
            <value> The center of rotation for the grips. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationGrips._isRotatedOnRender">
            <summary> Gets or sets a value indicating whether the grip is rendered rotated when the annotation is rotated.
            </summary>
            <value> A value indicating whether the grip is rendered rotated. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationGrips._maintainGripSize">
            <summary> Gets or sets a value indicating whether the grip size is visually maintained or resized along with the
            zoom level. </summary>
            <value> Indicates whether the grip size is maintained or resized along with the zoom level. </value>
        </member>
        <member name="E:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.GripPositionChanged">
            <summary>
            This event is raised when a grip's position has changed.
            </summary>
            <summary> This event is raised when a grip's position has changed. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.#ctor(Atalasoft.Annotate.Wpf.WpfAnnotationCanvas,Atalasoft.Annotate.Wpf.WpfAnnotationUI,Atalasoft.Annotate.Wpf.Renderer.IWpfGripRenderer)">
            <summary>
            Creates a new instance of WpfAnnotationGrips.
            </summary>
            <param name="canvas">The WpfAnnotationCanvas used as the grip's host element.</param>
            <param name="annotation">The annotation the grip is used for.</param>
            <param name="renderer">The grip renderer for these grips.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the canvas or annotation arguemnts are null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.OnInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.FrameworkElement.Initialized"/> event. This method is invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized"/> is set to true internally.
            </summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.OnGripPositionChanged(Atalasoft.Annotate.Wpf.EventArgs{Atalasoft.Annotate.Wpf.WpfAnnotationGrip})">
            <summary> Called when a grip's position has changed and raises the <see
            cref="E:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.GripPositionChanged"/> event. </summary>
            <param name="e"> The EventArgslt;WpfAnnotationGripgt; passed to the <see
            cref="E:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.GripPositionChanged"/> event. </param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.IsRotatedOnRender">
            <summary>
            Gets or sets a value indicating whether the grip is rendered rotated when the annotation is rotated.
            </summary>
            <value>A value indicating whether the grip is rendered rotated.</value>
            <summary> Gets or sets a value indicating whether the grip is rendered rotated when the annotation is rotated.
            </summary>
            <value> A value indicating whether the grip is rendered rotated. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.Annotation">
            <summary>
            Gets the annotation for these grips.
            </summary>
            <value>The annotation for theses grips.</value>
            <summary> Gets the annotation for these grips. </summary>
            <value> The annotation for these grips. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.Canvas">
            <summary>
            Gets the WpfAnnotationCanvas that hosts the grips.
            </summary>
            <value>The WpfAnnotationCanvas hosting the grips.</value>
            <summary> Gets the <see cref="T:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas"/> that hosts the grips. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.Wpf.WpfAnnotationCanvas"/> hosting the grips. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.MaintainGripSize">
            <summary>
            Gets or sets a value indicating whether the grip size is visually maintained or resized along with the zoom level.
            </summary>
            <value>Indicates whether the grip size is maintained or resized along with the zoom level.</value>
            <summary> Gets or sets a value indicating whether the grip size is visually maintained or resized along with the
            zoom level. </summary>
            <value> Indicates whether the grip size is maintained or resized along with the zoom level. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.Renderer">
            <summary>
            Gets or sets the renderer used for the grips.
            </summary>
            <value>The renderer used for the grips.</value>
            <summary> Gets or sets the renderer used for the grips. </summary>
            <value> The renderer used for the grips. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.Items">
            <summary>
            Gets a list of WpfAnnotationGrip.
            </summary>
            <value>The collection of WpfAnnotationGrip objects.</value>
            <summary> Gets a list of <see cref="T:Atalasoft.Annotate.Wpf.WpfAnnotationGrip"/>. </summary>
            <value> The collection of <see cref="T:Atalasoft.Annotate.Wpf.WpfAnnotationGrip"/> objects. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.CenterOfRotation">
            <summary>
            Gets the center of rotation for the grips.
            </summary>
            <value>The center of rotation for the grips.</value>
            <summary> Gets the center of rotation for the grips. </summary>
            <value> The center of rotation for the grips. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.Bounds">
            <summary>
            Gets the bounding rectangle of the grips.
            </summary>
            <value>The bounding rectangle of the grips.</value>
            <summary> Gets the bounding rectangle of the grips. </summary>
            <value> The bounding rectangle of the grips. </value>
            <remarks> This property includes the annotation outline width in its calculation.  To get the bounds based only on
            the grip positions, use the <see cref="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.PositionBounds"/> property. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.PositionBounds">
            <summary> Gets the bounding rectangle of the grip positions. </summary>
            <value> The bounding rectangle of the grips. </value>
            <remarks> This is different from the <see cref="P:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.Bounds"/> property which includes the pen width
            of the annotation in its calculation. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.FindGrip(System.String)">
            <summary>
            Looks up a grip by its name.
            </summary>
            <param name="name">The name used for the grip.</param>
            <returns>A grip with the name provided or null (Nothing in VB) if a grip with that name could not be found.</returns>
            <overloads> Theses methods are used to find a specific grip. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.FindGrip(Atalasoft.Annotate.Wpf.WpfRectangleGrip)">
            <summary> Looks up a grip by its <STRONG>WpfRectangleGrip</STRONG> status. </summary>
            <returns> A grip with a matching <STRONG>WpfRectangleGrip</STRONG> value or null (Nothing in VB) if a grip with that
            name could not be found. </returns>
            <param name="rectangleGrip"> The <STRONG>WpfRectangleGrip</STRONG> setting for the grip. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.InitiateGrips">
            <summary>
            Called when the grips need to be generated.
            </summary>
            <remarks>This method is also called when a Measure is performed on the WpfAnnotationGrips.</remarks>
            <summary> Called when the grips need to be generated. </summary>
            <remarks> This method is also called when a <STRONG>Measure</STRONG> is performed on the <see
            cref="T:Atalasoft.Annotate.Wpf.WpfAnnotationGrips"/>. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.MoveGrips(System.Windows.Point)">
            <summary>
            Called to force the grips to move by a specified offset.
            </summary>
            <param name="offset">The offset to move each grip.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.UpdateGripPositions">
            <summary>
            Called when the grip positions need to be updated.
            </summary>
            <summary> Called when the grip positions need to be updated. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.GetUnRotatedPoint(System.Windows.Point)">
            <summary>
            Calculates the un-rotated point from a provided point.
            </summary>
            <param name="dsPoint">The rotated point in document space.</param>
            <returns>The un-rotated point.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.GripFromPoint(System.Windows.Point)">
            <summary>
            Find a grip at the specified point in document space.
            </summary>
            <param name="dsPoint">The point in document space to search for a grip.</param>
            <returns>The grip found at that point or null (Nothing in VB) if a grip was not found.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.GetGripCursor(Atalasoft.Annotate.Wpf.WpfAnnotationGrip)">
            <summary>
            Returns the cursor for the specified grip with respect to the current rotation.
            </summary>
            <param name="grip">The grip to get the cursor for.</param>
            <returns>The cursor for the grip.</returns>
            <remarks>When the annotation is rotated, this method will find the best cursor for the specified grip.  For instance, if the top-center grip is pass in and the annotation is rotated 90 degrees, this method will return WpfAnnotationCursors.EastWestCursor since that cursor more closely matches the grip movement.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.ValidateGripMove(Atalasoft.Annotate.Wpf.WpfAnnotationGrip,System.Windows.Point)">
            <summary> Called when a grip is being moved to allow for validation of this action. This method will raise an <see
            cref="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.OperationRequest(Atalasoft.Annotate.Wpf.OperationRequestInformation)"/> on the annotation. </summary>
            <returns> The grip to be moved or null (Nothing in VB) to reject this action. </returns>
            <param name="grip"> The grip being moved. </param>
            <param name="newPosition"> The requested new position of the grip. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.MeasureOverride(System.Windows.Size)">
            <summary>
            Implements any custom measuring behavior for the adorner.
            </summary>
            <param name="constraint">A size to constrain the adorner to.</param>
            <returns>
            A <see cref="T:System.Windows.Size"/> object representing the amount of layout space needed by the adorner.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp"/> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the mouse button was released.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <summary> Tests whether a specified point is on the grips or annotation. </summary>
            <returns> A <STRONG>HitTestResult</STRONG> if the point is over a grip or annotation.  Null (Nothing in VB) is
            returned if there was no hit. </returns>
            <param name="hitTestParameters"> A <STRONG>PointHitTestParameters</STRONG> argument containing the hit test point.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.MirrorApplied(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
            <summary>
            Called when the annotation is mirrored to allow the grips to mirror.
            </summary>
            <param name="direction">The mirror direction.</param>
            <param name="maintainPosition">Indicates whether the annotation position is maintained or if the mirror pivots along the zero axis.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.OnMirrorApplied(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
            <summary>
            Called when the annotation is mirrored to allow the grips to mirror.
            </summary>
            <param name="direction">The mirror direction.</param>
            <param name="maintainPosition">Indicates whether the annotation position is maintained or if the mirror pivots along the zero axis.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationGrips.CalculateGripPercentages(System.Windows.Rect)">
            <summary>
            Calculates percentage values for the grips to fit within the specified bounds.
            </summary>
            <param name="bounds">The bounds for the grips.</param>
            <returns>An array of Point, one for each grip, indicating their percentage values.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the bounds contains a zero width or height.</exception>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfAnnotationSpaceConverter">
            <summary>
            This class is used to convert between viewer, document and annotation space.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationSpaceConverter.#ctor(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Creates a new instance of WpfAnnotationSpaceConverter.
            </summary>
            <param name="viewerMatrix">The viewer matrix.</param>
            <param name="annotationMatrix">The annotation rendering matrix.</param>
            <remarks>The viewer matrix can be created using the WpfAnnotationCanvas.CreateViewerMatrix method and the annotation matrix can be retrieved from [annotation].RenderTransform.Value.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationSpaceConverter.CloneMatrix(System.Windows.Media.Matrix)">
            <summary>
            Clones a Matrix object.
            </summary>
            <param name="m">The Matrix to clone.</param>
            <returns>A new copy of the Matrix.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationSpaceConverter.ViewportToAnnotationSpace(System.Windows.Point)">
            <summary>
            Converts a point from viewer space into annotation space.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>The converted point.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationSpaceConverter.ViewportToAnnotationSpace(System.Windows.Point[])">
            <summary>
            Converts an array of Point from viewer space to annotation space.
            </summary>
            <param name="points">The array of points to convert.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationSpaceConverter.ViewportToDocumentSpace(System.Windows.Point)">
            <summary>
            Converts a point from viewer space to document space.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>The converted point.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationSpaceConverter.ViewportToDocumentSpace(System.Windows.Point[])">
            <summary>
            Converts an array of Point from viewer space to document space.
            </summary>
            <param name="points">The array of points to convert.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationSpaceConverter.DocumentToAnnotationSpace(System.Windows.Point)">
            <summary>
            Converts a point from document space to annotation space.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>The converted point.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationSpaceConverter.DocumentToAnnotationSpace(System.Windows.Point[])">
            <summary>
            Converts an array of Point from document space to annotation space.
            </summary>
            <param name="points">The array of points to convert.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationSpaceConverter.DocumentToViewportSpace(System.Windows.Point)">
            <summary>
            Converts a point from document space to viewer space.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>The converted point.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationSpaceConverter.DocumentToViewportSpace(System.Windows.Point[])">
            <summary>
            Converts an array of Point from document space to viewer space.
            </summary>
            <param name="points">An array of points to convert.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationSpaceConverter.AnnotationToDocumentSpace(System.Windows.Point)">
            <summary>
            Converts a point from annotation space to document space.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>The converted point.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationSpaceConverter.AnnotationToViewportSpace(System.Windows.Point[])">
            <summary>
            Converts an array of Point from annotation space to viewer space.
            </summary>
            <param name="points">An array of points to convert.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationSpaceConverter.AnnotationToViewportSpace(System.Windows.Point)">
            <summary>
            Converts a point from annotation space to viewer space.
            </summary>
            <param name="point">The point to convert.</param>
            <returns>The converted point.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationSpaceConverter.AnnotationToDocumentSpace(System.Windows.Point[])">
            <summary>
            Converts an array of Point from annotation space to document space.
            </summary>
            <param name="points">An array of points to convert.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfAnnotationUI">
            <summary>
            This is the base class for all WPF annotations.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.AnnotationCreatedEvent">
            <summary>
            Identifies the AnnotationCreated event.  This event is raised after an annotation has been created by the end-user.
            </summary>
        </member>
        <member name="E:Atalasoft.Annotate.Wpf.WpfAnnotationUI.PropertyChanged">
            <summary>
            This event is raised when a property of the annotation has changed.
            </summary>
        </member>
        <member name="E:Atalasoft.Annotate.Wpf.WpfAnnotationUI.MouseDown">
            <summary>
            Event is raised when the left mouse button transitions from up to down while the cursor is over the annotation.
            </summary>
        </member>
        <member name="E:Atalasoft.Annotate.Wpf.WpfAnnotationUI.MouseUp">
            <summary>
            Event is raised when the left mouse button transitions from down to up while the cursor is over the annotation.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.BoundsProperty">
            <summary>
            Identifies the Bounds dependency property.
            </summary>
            <remarks>Bounds is a read only property that is automatically set when the Location and Size properties are changed.</remarks>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.ExtraPropertiesProperty">
            <summary>
            Identifies the ExtraProperties dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CanMirrorProperty">
            <summary>
            Identifies the CanMirror dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CanMoveProperty">
            <summary>
            Identifies the CanMove dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CanResizeProperty">
            <summary>
            Identifies the CanResize dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CanRotateProperty">
            <summary>
            Identifies the CanRotate dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CanSelectProperty">
            <summary>
            Identifies the CanSelect dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CreationTimeProperty">
            <summary>
            Identifies the CreationTime dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.LocationProperty">
            <summary>
            Identifies the Location dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.ModifiedTimeProperty">
            <summary>
            Identifies the ModifiedTime dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.RotationProperty">
            <summary>
            Identifies the Rotation dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.SecurityProperty">
            <summary>
            Identifies the Security dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.SelectedProperty">
            <summary>
            Identifies the Selected dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.SizeProperty">
            <summary>
            Identifies the Size dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.StateProperty">
            <summary>
            Identifies the State dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.UserNameProperty">
            <summary>
            Identifies the UserName dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.NameProperty">
            <summary>
            Identifies the Name dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.IsVisibleProperty">
            <summary>
            Identifies the IsVisible dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.ToolTipProperty">
            <summary>
            Identifies the ToolTip dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.FillProperty">
            <summary>
            Identifies the Fill dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.OutlineProperty">
            <summary>
            Identifies the Outline dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.ShadowProperty">
            <summary>
            Identifies the Shadow dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfAnnotationUI.ShadowOffsetProperty">
            <summary>
            Identifies the ShadowOffset dependency property.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.#cctor">
            <summary>
            Static constructor for WpfAnnotationUI.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.#ctor(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Constructs an annotation using the specified AnnotationData object.
            </summary>
            <param name="data">The AnnotationData object this annotation will be created from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.DefaultFill">
            <summary>
            Gets or sets the default brush used for annotation backgrounds.
            </summary>
            <value>The default brush used for annotation backgrounds.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.DefaultOutline">
            <summary>
            Gets or sets the default outline used for annotations.
            </summary>
            <value>The default outline for annotations.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.DefaultShadow">
            <summary>
            Gets or sets the default shadow brush used for annotations.
            </summary>
            <value>The default shadow brush for annotations.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.DefaultShadowOffset">
            <summary>
            Gets or sets the default shadow offset used for annotations.
            </summary>
            <value>The default shadow offset used for annotations.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CenterOfRotation">
            <summary>
            Gets the point used as center of rotation for the annotation.
            </summary>
            <value>The point used for the center of rotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.ChildElement">
            <summary>
            Gets the child UIElement of the annotation, if any.
            </summary>
            <value>The child UIElement of the annotation or null (Nothing in VB).</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.Canvas">
            <summary>
            Gets the WpfAnnotationCanvas class hosting this annotation.
            </summary>
            <value>The WpfAnnotationCanvas class hosting this annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.Grips">
            <summary>
            Gets the grips for this annotation.
            </summary>
            <value>The grips for this annotation.</value>
            <remarks>Derived classes can override the AttachGripsOverride method to set the annotation grips.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.ParentLayer">
            <summary>
            Gets the parent layer of this annotation, if any.
            </summary>
            <value>The parent layer of this annotation or null (Nothing in VB).</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.Bounds">
            <summary>
            Gets the bounding rectangle of this annotation.
            </summary>
            <value>The bounding rectangle of this annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.ExtraProperties">
            <summary>
            Gets the annotation extra properties dictionary.
            </summary>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.RenderedBounds">
            <summary>
            Gets the bounding rectangle of the annotation including any transformations applied for rendering.
            </summary>
            <value>The bounding rectangle of the annotation with render transformations.</value>
            <remarks>The bounds is calculated from the Geometry, outline pen, RenderTransform and any shadow the annotation may have.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CanMirror">
            <summary>
            Gets or sets a value indicating whether the annotation can be mirrored by the end-user.
            </summary>
            <value>Indicates whether the annotation can be mirrored by the end-user.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CanMove">
            <summary>
            Gets or sets a value indicating whether the annotation can be moved by the end-user.
            </summary>
            <value>Indicates whether the annotation can be moved by the end-user.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CanResize">
            <summary>
            Gets or sets a value indicating whether the annotation can be resized by the end-user.
            </summary>
            <value>Indicates whether the annotation can be resized by the end-user.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CanRotate">
            <summary>
            Gets or sets a value indicating whether the annotation can be rotated by the end-user.
            </summary>
            <value>Indicates whether the annotation can be rotated by the end-user.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CanSelect">
            <summary>
            Gets or sets a value indicating whether the annotation can be selected by the end-user.
            </summary>
            <value>Indicates whether the annotation can be selected by the end-user.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CreationTime">
            <summary>
            Gets or sets the creation time of the annotation.
            </summary>
            <value>The creation time of the annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.Geometry">
            <summary>
            Gets a Geometry representing the annotation.
            </summary>
            <value>A Geometry representing the annotation.</value>
            <remarks>The Geometry is presented in annotation space. Derived classes should override this property if the geometry of the annotation is not rectangular.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.Name">
            <summary>
            Gets or sets the name for the annotation.
            </summary>
            <value>A name for the annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.IsVisible">
            <summary>
            Gets or sets a value indicating whether the annotation is visible.
            </summary>
            <value>Indicates whether the annotation is visible.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.ToolTip">
            <summary>
            Gets or sets a tooltip to use for the annotation.
            </summary>
            <value>A tooltip for the annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.RenderTransform">
            <summary>
            Gets the transform used when rendering the annotation.
            </summary>
            <value>The transform used to render the annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.Location">
            <summary>
            Gets or sets the location of the annotation in document space.
            </summary>
            <value>The location of the annotation in document space.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.ModifiedTime">
            <summary>
            Gets or sets the last time the annotation was modified.
            </summary>
            <value>The last time the annotation was modified.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.Rotation">
            <summary>
            Gets or sets the amount of rotation applied to the annotation.
            </summary>
            <value>The amount of rotation applied to the annotation.</value>
            <remarks>Valid values are from 0 to 360.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.Security">
            <summary>
            Gets or sets the security for the annotation.
            </summary>
            <value>The security for the annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.Selected">
            <summary>
            Gets or sets a value indicating whether the annotation is selected.
            </summary>
            <value>A value indicating whether the annotation is selected.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.Size">
            <summary>
            Gets or sets the size of the annotation.
            </summary>
            <value>The size of the annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.State">
            <summary>
            Gets or sets the annotation state.
            </summary>
            <value>The annotation state.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.UserName">
            <summary>
            Gets or sets the username for this annotation.
            </summary>
            <value>The username for this annotation.</value>
            <remarks>This property is mainly used with PDF annotations to indicate the user that created the annotation.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.UserHasCreated">
            <summary>
            Gets a value indicating if the annotation was end-user created or added directly to a layer.
            </summary>
            <value>Indicates if the annotation was end-user created.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.SupportsMultiClickCreation">
            <summary>
            Gets a value indicating whether the annotation supports being created from multiple mouse clicks.
            </summary>
            <value>Indicates whether the annotation supports being created from multiple mouse clicks.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.IsGrouped">
            <summary>
            Gets a value indicating whether the annotation is being hosted within a group.
            </summary>
            <value>Indicates whether the annotation is being hosted within a group.</value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.SetTransparency(System.Int32)">
            <summary>
            Sets the alpha values for the Fill and Outline of the annotation.
            </summary>
            <param name="value">The alpha value to use. This must be a value from 0 to 255.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is less than 0 or greater than 255.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.AttachGrips(Atalasoft.Annotate.Wpf.WpfAnnotationCanvas)">
            <summary>
            This method is called by the WpfAnnotationCanvas to ask the annotation for Grip creation.
            </summary>
            <param name="canvas">The WpfAnnotationCanvas that will host the annotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the canvas argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.AttachGripsOverride(Atalasoft.Annotate.Wpf.WpfAnnotationCanvas)">
            <summary>
            Called when the annotation grips need to be created.
            </summary>
            <param name="canvas">The WpfAnnotationCanvas that will host the annotation.</param>
            <returns>The grips for the annotation.</returns>
            <remarks>My default, WpfRectangleGrips will be created for the annotation. Override this method if other grips are required.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.IsMirroredHorizontally">
            <summary>
            Gets a value indicating whether the annotation is mirrored horizontally.
            </summary>
            <value>Indicates whether the annotation is mirrored horizontally.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUI.IsMirroredVertically">
            <summary>
            Gets a value indicating whether the annotation is mirrored vertically.
            </summary>
            <value>Indicates whether the annotation is mirrored vertically.</value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.ResetMirrorVariables">
            <summary>
            This method will reset the internal Matrix used for mirroring.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.Mirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
            <summary>
            Mirrors the annotation in the specified direction.
            </summary>
            <param name="direction">The direction to mirror.</param>
            <param name="maintainPosition">Indicates whether the annotation keeps its current position or pivots along its zero axis.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.Remove">
            <summary>
            This method will remove the annotation from its parent layer.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.Rotate(System.Double)">
            <summary>
            This method will append a rotation to the annotation's current rotation.
            </summary>
            <param name="degrees">The amount of rotation to append.</param>
            <remarks>To set the annotation to a specific rotation, set the Rotation property.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.PredetermineRenderBounds(System.Double)">
            <summary>
            This method is used to calculate the expected render bounds of an annotation if its rotation was changed.
            </summary>
            <param name="rotation">The new rotation of the annotation.</param>
            <returns>A rectangle containing the expected bounds.</returns>
            <remarks>The annotation grips and canvas use this method to confine annotations within the current confinement bounds.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.RaiseEvent(System.Windows.RoutedEventArgs)">
            <summary>
            This method is used to force an event in the annotation.
            </summary>
            <param name="e">The RoutedEventArgs of the event to raise.</param>
            <remarks>This method is only supported for the AnnotationCreated, MouseDown, MouseMove and MouseUp events.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.HitTest(System.Windows.Point)">
            <summary>
            This method will determine whether the specified point is on the annotation.
            </summary>
            <param name="dsPoint">The point to hit test.</param>
            <returns>True if the point is on the annotation.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.Clone">
            <summary>
            Creates a copy of the anotation.
            </summary>
            <returns>A copy of the annotation.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CreateDataSnapshot">
            <summary>
            This method creates an AnnotationData copy of this annotation for serialization.
            </summary>
            <returns>The AnnotationData for this annotation.</returns>
            <remarks>Derived classes should override the CreateDataSnapshotOverride method to create a specific AnnotationData class.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.OnSelectedChanged(System.EventArgs)">
            <summary>
            Called when the Selected property has been changed.
            </summary>
            <param name="e">An EventArgs for this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.SetUserHasCreated(System.Boolean)">
            <summary>
            Derived class should call this method to indicate that their creation process has completed.
            </summary>
            <param name="hasCreated">Indicates whether the user has finished creating the annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CalculateGeometry(System.Windows.Media.Geometry,Atalasoft.Annotate.AnnotationBrush,System.Windows.Media.Geometry,Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Calculates the geometry of the annotation with the specified parameters.
            </summary>
            <param name="fillGeometry">The Geometry for the fill.</param>
            <param name="fill">The fill for the annotation. This may be null (Nothing in VB).</param>
            <param name="outlineGeometry">The Geometry for the outline.</param>
            <param name="outline">The outline for the annotation. This may be null (Nothing in VB).</param>
            <returns>A PathGeometry for the annotation.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>An AnnotationData object with the current annotation settings.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.OnGripPositionChanged(Atalasoft.Annotate.Wpf.EventArgs{Atalasoft.Annotate.Wpf.WpfAnnotationGrip})">
            <summary>
            Called when a grip for the annotation has moved.
            </summary>
            <param name="e">An EventArgs containing the grip that was moved.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject"/> has been updated. The specific dependency property that changed is reported in the event data.
            </summary>
            <param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <summary>
            Determines whether a point coordinate value is within the bounds of the visual object.
            </summary>
            <param name="hitTestParameters">A <see cref="T:System.Windows.Media.PointHitTestParameters"/> object that specifies the <see cref="T:System.Windows.Point"/> to hit test against.</param>
            <returns>
            A <see cref="T:System.Windows.Media.HitTestResult"/> that represents the <see cref="T:System.Windows.Media.Visual"/> that is returned from a hit test.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>A copy of the annotation.</returns>
            <remarks>This method is called from Clone to allow additional properties to be set. The WpfAnnotationUI properties of the clone will be filled before this method is called.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.OnAnnotationFontChanged(Atalasoft.Annotate.AnnotationFont)">
            <summary>
            Called when the FontProperty has changed.
            </summary>
            <param name="annotationFont">The new AnnotationFont.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.OnAnnotationPenChanged(Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Called when the OutlineProperty has changed.
            </summary>
            <param name="annotationPen">The new AnnotationPen for the outline.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.OnAnnotationBrushChanged(Atalasoft.Annotate.AnnotationBrush)">
            <summary>
            Called when the FillProperty has changed.
            </summary>
            <param name="annotationBrush">The new AnnotationBrush for the fill.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.OnAnnotationCreated(System.Windows.RoutedEventArgs)">
            <summary>
            Called after the annotation has been created.
            </summary>
            <param name="e">A RoutedEventArgs for this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a MouseDown event has been raised for the annotation.
            </summary>
            <param name="e">The MouseButtonEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a MouseMove event has been raised for the annotation.
            </summary>
            <param name="e">A MouseEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a MouseUp event has been raised for the annotation.
            </summary>
            <param name="e">A MouseButtonEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.InvalidateVisual">
            <summary>
            Forces the annotation to redraw itself.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.OperationRequest(Atalasoft.Annotate.Wpf.OperationRequestInformation)">
            <summary>
            Called when a request operation has been raised on the annotation.
            </summary>
            <param name="request">A OperationRequestInformation for this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.ReplaceGrips(Atalasoft.Annotate.Wpf.WpfAnnotationGrips)">
            <summary>
            Call this method to replace the current annotation grips with new grips.
            </summary>
            <param name="newGrips">The new grips for the annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.OnCanvasChanged(Atalasoft.Annotate.Wpf.ValueChangedEventArgs{Atalasoft.Annotate.Wpf.WpfAnnotationCanvas})">
            <summary>
            Called when the Canvas property has changed.
            </summary>
            <param name="e">An EventArgs for this change.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUI.OnRotateDocument(Atalasoft.Annotate.DocumentRotation)">
            <summary>
            Called when the document has been rotated.
            </summary>
            <param name="rotation">The type of rotation for the document.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection">
            <summary>
            This class is a collection of WpfAnnotationUI objects.
            </summary>
        </member>
        <member name="E:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.CollectionChanged">
            <summary>
            Raised when the collection has been changed.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.#ctor">
            <summary>
            Creates a new instance of WpfAnnotationUICollection.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.#ctor(Atalasoft.Annotate.Wpf.WpfAnnotationUI[])">
            <summary>
            Creates a new instance of WpfAnnotationUICollection with the specified annoations.
            </summary>
            <param name="annotations">The initial annotation for the collection.</param>
            <exception cref="T:System.NullReferenceException">Thrown if the annotations argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.OnCollectionChanged(Atalasoft.Annotate.Wpf.CollectionChangedEventArgs{Atalasoft.Annotate.Wpf.WpfAnnotationUI})">
            <summary>
            Called when the collection has been changed and raises the CollectionChanged event.
            </summary>
            <param name="e">A CollectionChangedEventArgs&lt;WpfAnnotationUI&gt; containing information about the change.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.Item(System.Int32)">
            <summary>
            Gets the annotation at the specified index.
            </summary>
            <param name="index">The index of the annotation to get.</param>
            <returns>The annotation at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is invalid for this collection.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.AsReadOnly">
            <summary>
            Returns a read-only version of this collection.
            </summary>
            <returns>A read-only collection.</returns>
            <remarks>This does not clone the annotations.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.AddRange(System.Collections.Generic.IEnumerable{Atalasoft.Annotate.Wpf.WpfAnnotationUI})">
            <summary>
            Adds a group of annotations to the collection.
            </summary>
            <param name="annotations">The annotation to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the annotations argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.ToArray">
            <summary>
            Returns an array of WpfAnnotationUI containing the annotations in this collection.
            </summary>
            <returns>An array of annotation in this collection.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.Add(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Adds an annotation to the end of the collection.
            </summary>
            <param name="item">The annotation to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the item argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.Contains(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Determines whether an annotation is contained in the collection.
            </summary>
            <param name="item">The annotation to search for.</param>
            <returns>True if the annotation is in the collection.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the item argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.CopyTo(Atalasoft.Annotate.Wpf.WpfAnnotationUI[],System.Int32)">
            <summary>
            Copies the annotations into the supplied array starting at the specified index.
            </summary>
            <param name="array">The array annotations will be copied into.</param>
            <param name="arrayIndex">The starting index in the array to begin copying.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the array argument is null (Nothing in VB).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the arrayIndex argument is invalid for the provided array.</exception>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.Count">
            <summary>
            Gets the number of annotation in the collection.
            </summary>
            <value>The number of annotation in the collection.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.IsReadOnly">
            <summary>
            Gets a value indicating whether this collection is read-only.
            </summary>
            <value>A value indicating if the collection is read-only.</value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.Remove(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Removes the specified annotation from the collection.
            </summary>
            <param name="item">The annotation to remove.</param>
            <returns>True if the annotation was removed from the collection; False if the annotation does not exist in the collection.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the item argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.RemoveAt(System.Int32)">
            <summary>
            Removes the annotation at the specified index from the collection.
            </summary>
            <param name="index">The index of the annotation to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is invalid for this collection.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.Insert(System.Int32,Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Inserts an annotation into the collection at the specified index.
            </summary>
            <param name="index">The index where the annotation will be placed.</param>
            <param name="annotation">The annotation to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is valid for the collection.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the annotation argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.IndexOf(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Returns the index of the specified annotation.
            </summary>
            <param name="annotation">The annotation to search for.</param>
            <returns>The index of the annotation or -1 if the annotation does not exist in the collection.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the annotation argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUICollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an WpfAnnotationUIEnumerator for the collection.
            </summary>
            <returns>An WpfAnnotationUIEnumerator for the collection.</returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfAnnotationUIEnumerator">
            <summary>
            This class is returned by WpfAnnotationUICollection.GetEnumerator to enumerate through the annotation collection.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUIEnumerator.#ctor(Atalasoft.Annotate.Wpf.WpfAnnotationUI[])">
            <summary>
            Creates a new instance of WpfAnnotationUIEnumerator using the specified annotations.
            </summary>
            <param name="annotations">The annotations that will be enumerated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the annotations argument is null (Nothing in VB).</exception>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUIEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current annotation.
            </summary>
            <value>The current annotation.</value>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no current annotation.</exception>
            <remarks>When the WpfAnnotationUIEnumerator is first created and after Reset has been called, the MoveNext method must be called to move the IEnumerator to its first item.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUIEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
              </returns>
              
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
              </exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUIEnumerator.MoveNext">
            <summary>
            Moves the IEnumerator to the next item.
            </summary>
            <returns>True if the move was successful; False if there are no more items.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUIEnumerator.Reset">
            <summary>
            Resets the IEnumerator to before the beginning.
            </summary>
            <remarks>After calling Reset, MoveNext must be called before accessing the Current property.</remarks>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactoryCollection">
            <summary>
            This class holds the annotation UI factories used when deserializing AnnotationData objects.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactoryCollection.#ctor">
            <summary>
            Creates a new instance of WpfAnnotationUIFactoryCollection.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactoryCollection.Add(Atalasoft.Annotate.Wpf.IWpfAnnotationUIFactory)">
            <summary>
            Adds to the collection.
            </summary>
            <param name="factory">The factory to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the factory is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactoryCollection.Insert(System.Int32,Atalasoft.Annotate.Wpf.IWpfAnnotationUIFactory)">
            <summary>
            Inserts a factory into the collection.
            </summary>
            <param name="index">The index location to insert the factory.</param>
            <param name="factory">The factory to insert.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the factory is null (Nothing in VB).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of range for this collection.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactoryCollection.Remove(Atalasoft.Annotate.Wpf.IWpfAnnotationUIFactory)">
            <summary>
            Removes a factory from the collection.
            </summary>
            <param name="factory">The factory to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the factory is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactoryCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a factory from the collection at the specified index.
            </summary>
            <param name="index">The index of the factory to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of range for this collection.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactoryCollection.Replace(Atalasoft.Annotate.Wpf.IWpfAnnotationUIFactory,Atalasoft.Annotate.Wpf.IWpfAnnotationUIFactory)">
            <summary>
            Replaces an existing factory with a new one. If the oldFactory argument does not exist in the collection, the new factory is added to the end of the collection.
            </summary>
            <param name="oldFactory">The factory to replace.</param>
            <param name="newFactory">The new factory that will be inserted into the collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactoryCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactoryCollection.Count">
            <summary>
            Gets the number of factories in the collection.
            </summary>
            <value>The factory count.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactoryCollection.Item(System.Int32)">
            <summary>
            Gets the factory at the specified index.
            </summary>
            <param name="index">The index of the factory to get.</param>
            <returns>The factory at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is invalid for this collection.</exception>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactoryCollection.Item(System.Type)">
            <summary>
            Gets the factory for the specified type.
            </summary>
            <param name="annotationType">The annotation type for the factory.</param>
            <returns>The factory for the type or null (Nothing in VB) if there is no factory for the specified type.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the annotationType argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactoryCollection.GetAnnotationFromData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Creates an annotation from the provided annotation data.
            </summary>
            <param name="data">The annotation data used to generate the annotation.</param>
            <returns>A new annotation created from the AnnotationData or null (Nothing in VB) if there is no factory for the data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.IWpfAnnotationUIFactory">
            <summary>
            This interface is implemented by factory classes used to create annotations from AnnotationData.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.IWpfAnnotationUIFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Returns a new annotation from an AnnotationData class.
            </summary>
            <param name="data">The annotation data used to construct the annotation.</param>
            <returns>A new annotation or null (Nothing in VB) if the annotation could not be created by the factory.</returns>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.IWpfAnnotationUIFactory.AnnotationType">
            <summary>
            Gets the type of annotation the factory can create.
            </summary>
            <value>The annotation type created by the factory.</value>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactory`2">
            <summary>
            This class is the default annotation factory used by all WPF annotations provided.
            </summary>
            <typeparam name="T">The WpfAnnotationUI the factory will create.</typeparam>
            <typeparam name="TData">The AnnotationData the factory will use to create the annotation.</typeparam>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactory`2.#ctor">
            <summary>
            Creates a new instance of WpfAnnotationUIFactory.
            </summary>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactory`2.AnnotationType">
            <summary>
            Gets the type of annotation the factory can create.
            </summary>
            <value>
            The annotation type created by the factory.
            </value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactory`2.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Returns a new annotation from an AnnotationData class.
            </summary>
            <param name="data">The annotation data used to construct the annotation.</param>
            <returns>
            A new annotation or null (Nothing in VB) if the annotation could not be created by the factory.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfAnnotationUIFactory`2.GetAnnotationUIOverride(`1)">
            <summary>
            Called when the factory cannot find a constructor taking the AnnotationData passed into GetAnnotationUI.
            </summary>
            <param name="data">The annotation data to create an annotation for.</param>
            <returns>A new annotation or null (Nothing in VB) if the annotation could not be created.</returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation">
            <summary>
            This annotation is designed to provide additional information on a specific area of the document.  It contains an editable text area and a leader line used to point to the area of the document.
            
            When creating this annotation, the first click sets the target for the leader and centers the annotation over the target.  With the mouse still pressed, drag the annotation to the desired location.  Both annotation and leader point can be repositioned independently after the annotation has been created.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.TextProperty">
            <summary>
            Identifies the Text dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.AlignmentProperty">
            <summary>
            Identifies the Alignment dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.FontProperty">
            <summary>
            Identifies the Font dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.FontBrushProperty">
            <summary>
            Identifies the FontBrush dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.LineAlignmentProperty">
            <summary>
            Identifies the LineAlignment dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.PaddingProperty">
            <summary>
            Identifies the Padding dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.EditModeProperty">
            <summary>
            Identifies the EditMode dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.AllowEditingProperty">
            <summary>
            Identifies the AllowEditing dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.CanEditRotatedProperty">
            <summary>
            Identifies the CanEditRotated dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.CanEditMirroredProperty">
            <summary>
            Identifies the CanEditMirrored dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.LeaderProperty">
            <summary>
            Identifies the Leader dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.LeaderFlatLengthProperty">
            <summary>
            Identifies the LeaderFlatLength dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.TargetPositionProperty">
            <summary>
            Identifies the TargetPosition dependency property.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.#ctor">
            <summary>
            Creates a new instance WpfCalloutAnnotation using default values.
            </summary>
            <remarks>The default font used is Arial 12 with a black font brush.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.#ctor(Atalasoft.Annotate.CalloutData)">
            <summary>
            Creates a new instance of WpfCalloutAnnotation from a CalloutData object.
            </summary>
            <param name="data">The data object for the annotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Double,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Creates a new instance of WpfCalloutAnnotation specifying its more common properties.
            </summary>
            <param name="text">The text of the annotation.</param>
            <param name="font">The font used by the annotation.</param>
            <param name="fontBrush">The brush used to render the text.</param>
            <param name="leader">The pen used to render the leader.</param>
            <param name="leaderFlatLength">The length of the leader line to the bend.</param>
            <param name="fill">The brush used to fill the annotation. This can be null (Nothing in VB).</param>
            <param name="outline">The pen used to draw the annotation outline. This can be null (Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.#ctor(System.Windows.Rect,System.Windows.Point,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Double,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Windows.Point,System.Double,System.Drawing.StringAlignment,System.Drawing.StringAlignment)">
            <summary>
            Creates a new instance of WpfCalloutAnnotation specifying its properties.
            </summary>
            <param name="bounds">The bounds for the annotation.</param>
            <param name="targetPosition">The target position for the callout.</param>
            <param name="text">The text of the annotation.</param>
            <param name="font">The font used by the annotation.</param>
            <param name="fontBrush">The brush used to render the text.</param>
            <param name="leader">The pen used to render the leader.</param>
            <param name="leaderFlatLength">The length of the leader line to the bend.</param>
            <param name="fill">The brush used to fill the annotation. This can be null (Nothing in VB).</param>
            <param name="outline">The pen used to draw the annotation outline. This can be null (Nothing in VB).</param>
            <param name="shadow">The brush used for the annotation shadow. This can be null (Nothing in VB).</param>
            <param name="shadowOffset">The offset of the shadow from the annotation.</param>
            <param name="padding">The amount of padding around the annotation text.</param>
            <param name="alignement">The horizontal text alignment.</param>
            <param name="lineAlignment">The vertical text alignment.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Atalasoft.Annotate.Wpf.WpfAnnotationUI.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.OnAnnotationBrushChanged(Atalasoft.Annotate.AnnotationBrush)">
            <summary>
            Called when the FillProperty has changed.
            </summary>
            <param name="annotationBrush">The new AnnotationBrush for the fill.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.OnAnnotationFontChanged(Atalasoft.Annotate.AnnotationFont)">
            <summary>
            Called when the FontProperty has changed.
            </summary>
            <param name="annotationFont">The new AnnotationFont.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.OnAnnotationPenChanged(Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Called when the OutlineProperty has changed.
            </summary>
            <param name="annotationPen">The new AnnotationPen for the outline.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.AllowEditing">
            <summary>
            Gets or sets a value indicating whether the annotation text can be edited by double-clicking on the annotation.
            </summary>
            <value>Indicates whether the annotation text can be edited by the end-user.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.CanEditRotated">
            <summary>
            Gets or sets a value indicating whether the text can be edited rotated.
            </summary>
            <value>Indicates whether the text can be edited rotated.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.CanEditMirrored">
            <summary>
            Gets or sets a value indicating whether the text can be edited mirrored.
            </summary>
            <value>Indicates whether the text can be edited mirrored.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.EditMode">
            <summary>
            Gets or sets a value indicating whether the annotation is in 'Edit Mode'.
            </summary>
            <value>Indicates whether the annotation is in 'Edit Mode'.</value>
            <remarks>When EditMode is true, a TextBox is displayed to allow the end-user to modify the annotation text.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.Padding">
            <summary>
            Gets or sets the amount of padding around the text.
            </summary>
            <value>The amount of padding around the text.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.Alignment">
            <summary>
            Gets or sets the horizontal text alignment.
            </summary>
            <value>The horizontal text alignment.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.LineAlignment">
            <summary>
            Gets or sets the vertical text alignment.
            </summary>
            <value>The vertical text alignment.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.Text">
            <summary>
            Gets or sets the annotation text.
            </summary>
            <value>The annotation text.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.Font">
            <summary>
            Gets or sets the font used to render the text.
            </summary>
            <value>The font used to render the text.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.FontBrush">
            <summary>
            Gets or sets the brush used to render the font.
            </summary>
            <value>The brush used to render the font.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.Fill">
            <summary>
            Gets or sets the brush used to fill the annotation.
            </summary>
            <value>The brush used to fill the annotation.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the fill.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.Outline">
            <summary>
            Gets or sets the pen used for the annotation outline.
            </summary>
            <value>The annotation outline.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the outline.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.Shadow">
            <summary>
            Gets or sets the brush used for the annotation shadow.
            </summary>
            <value>The brush used for the annotation shadow.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the shadow.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.ShadowOffset">
            <summary>
            Gets or sets the offset used to position the shadow.
            </summary>
            <value>The offset used to position the shadow.</value>
            <remarks>A negative value will move the shadow to up and to the left. Positive values will move the shadow down and to the right.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.ChildElement">
            <summary>
            Gets the child UIElement of the annotation, if any.
            </summary>
            <value>
            The child UIElement of the annotation or null (Nothing in VB).
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.Leader">
            <summary>
            Gets or sets the pen used for the leader line.
            </summary>
            <value>The pen used for the leader line.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.LeaderFlatLength">
            <summary>
            Gets or sets the length of the leader line to the bend.
            </summary>
            <value>The length of the leader line to the bend.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.TargetPosition">
            <summary>
            Gets or sets the position of the target in document space.
            </summary>
            <value>The target position in document space.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.Geometry">
            <summary>
            Gets a Geometry representing the annotation.
            </summary>
            <value>
            A Geometry representing the annotation.
            </value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.GetLeaderPoints">
            <summary>
            Returns an array of Point used to render the leader line.
            </summary>
            <returns>An array of Point for the leader line.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.AttachGripsOverride(Atalasoft.Annotate.Wpf.WpfAnnotationCanvas)">
            <summary>
            Called when the annotation grips need to be created.
            </summary>
            <param name="canvas">The WpfAnnotationCanvas that will host the annotation.</param>
            <returns>
            The grips for the annotation.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.OnSelectedChanged(System.EventArgs)">
            <summary>
            Called when the Selected property has been changed.
            </summary>
            <param name="e">An EventArgs for this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a MouseDown event has been raised for the annotation.
            </summary>
            <param name="e">The MouseButtonEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a MouseUp event has been raised for the annotation.
            </summary>
            <param name="e">A MouseButtonEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.ShowEditBox">
            <summary>
            Called when the edit box needs to be shown, allowing the end-user to modify the annotation text.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.HideEditBox">
            <summary>
            Called when the edit box needs to be hidden from the user.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.OnGripPositionChanged(Atalasoft.Annotate.Wpf.EventArgs{Atalasoft.Annotate.Wpf.WpfAnnotationGrip})">
            <summary>
            Called when a grip for the annotation has moved.
            </summary>
            <param name="e">An EventArgs containing the grip that was moved.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.OperationRequest(Atalasoft.Annotate.Wpf.OperationRequestInformation)">
            <summary>
            Called when a request operation has been raised on the annotation.
            </summary>
            <param name="request">A OperationRequestInformation for this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a MouseMove event has been raised for the annotation.
            </summary>
            <param name="e">A MouseEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfCalloutAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfEllipseAnnotation">
            <summary>
            This class is used to create an elliptical annotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfEllipseAnnotation.#ctor">
            <summary>
            Creates a new instance of WpfEllipseAnnotation using default values.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfEllipseAnnotation.#ctor(Atalasoft.Annotate.EllipseData)">
            <summary>
            Creates a new instance of WpfEllipseAnnotation from an EllipseData object.
            </summary>
            <param name="data">The ellipse data object for the annotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfEllipseAnnotation.#ctor(System.Windows.Rect,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Creates a new instance of WpfEllipseAnnotation specifying its bounding rectangle, fill and outline.
            </summary>
            <param name="rectangle">The bounding rectangle of the ellipse in document space.</param>
            <param name="fill">The brush used to fill the annotation.</param>
            <param name="outline">The pen used for the annotation outline.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfEllipseAnnotation.#ctor(System.Windows.Rect,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Windows.Point)">
            <summary>
            Creates a new instance of WpfEllipseAnnotation specifying its properties.
            </summary>
            <param name="rectangle">The bounding rectangle of the ellipse in document space.</param>
            <param name="fill">The brush used to fill the annotation. This can be null (Nothing in VB).</param>
            <param name="outline">The pen used for the annotation outline. This can be null (Nothing in VB).</param>
            <param name="shadow">The brush used for the shadow. This can be null (Nothing in VB).</param>
            <param name="shadowOffset">The offset used for the shadow.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfEllipseAnnotation.Fill">
            <summary>
            Gets or sets the brush used to fill the annotation.
            </summary>
            <value>The brush used to fill the annotation.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the fill.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfEllipseAnnotation.Outline">
            <summary>
            Gets or sets the pen used for the annotation outline.
            </summary>
            <value>The annotation outline.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the outline.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfEllipseAnnotation.Shadow">
            <summary>
            Gets or sets the brush used for the annotation shadow.
            </summary>
            <value>The brush used for the annotation shadow.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the shadow.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfEllipseAnnotation.ShadowOffset">
            <summary>
            Gets or sets the offset used to position the shadow.
            </summary>
            <value>The offset used to position the shadow.</value>
            <remarks>A negative value will move the shadow to up and to the left. Positive values will move the shadow down and to the right.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfEllipseAnnotation.Geometry">
            <summary>
            Gets a Geometry representing the annotation.
            </summary>
            <value>
            A Geometry representing the annotation.
            </value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfEllipseAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfEllipseAnnotation.HitTest(System.Windows.Point)">
            <summary>
            This method will determine whether the specified point is on the annotation.
            </summary>
            <param name="dsPoint">The point to hit test.</param>
            <returns>
            True if the point is on the annotation.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfEllipseAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfEmbeddedImageAnnotation">
            <summary>
            This is an image annotation that will embed the image into the serialized XMP or WANG data.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfEmbeddedImageAnnotation.#ctor">
            <summary>
            Creates a new instance of WpfEmbeddedImageAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfEmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.EmbeddedImageData)">
            <summary>
            Creates a new instance of WpfEmbeddedImageAnnotation from an EmbeddedImageData object.
            </summary>
            <param name="data">The data object for the annotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfEmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.AnnotationImage,System.Windows.Point,Atalasoft.Annotate.AnnotationBrush,System.Windows.Point)">
            <summary>
            Creates a new instance of WpfEmbeddedImageAnnotation specifying its properties.
            </summary>
            <param name="image">The image for the annotation.</param>
            <param name="location">The location of the annotation.</param>
            <param name="shadow">The brush used for the annotation shadow. This can be null (Nothing in VB).</param>
            <param name="shadowOffset">The offset of the shadow.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the image argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfEmbeddedImageAnnotation.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Atalasoft.Annotate.Wpf.WpfEmbeddedImageAnnotation"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfEmbeddedImageAnnotation.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfEmbeddedImageAnnotation.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfEmbeddedImageAnnotation.Source">
            <summary>
            Gets the BitmapSource for the annotation image.
            </summary>
            <value>The BitmapSource used to render the annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfEmbeddedImageAnnotation.Image">
            <summary>
            Gets or sets the image for the annotation.
            </summary>
            <value>The image for the annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfEmbeddedImageAnnotation.Shadow">
            <summary>
            Gets or sets the brush used for the annotation shadow.
            </summary>
            <value>The brush used for the annotation shadow.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the shadow.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfEmbeddedImageAnnotation.ShadowOffset">
            <summary>
            Gets or sets the offset used to position the shadow.
            </summary>
            <value>The offset used to position the shadow.</value>
            <remarks>A negative value will move the shadow to up and to the left. Positive values will move the shadow down and to the right.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfEmbeddedImageAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfEmbeddedImageAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfFreehandAnnotation">
            <summary>
            This class is used for a freehand annotation.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfFreehandAnnotation.IsClosedProperty">
            <summary>
            Identifies the IsClosed dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfFreehandAnnotation.LineTypeProperty">
            <summary>
            Identifies the LineType dependency property.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfFreehandAnnotation.#ctor">
            <summary>
            Creates a new instance of WpfFreehandAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfFreehandAnnotation.#ctor(Atalasoft.Annotate.FreehandData)">
            <summary>
            Creates a new instance of WpfFreehandAnnotation from a FreehandData object.
            </summary>
            <param name="data">The data object for the annotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfFreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.Wpf.WpfFreehandLineType,System.Boolean)">
            <summary>
            Creates a new WpfFreehandAnnotation specifying its outline, line type and whether or not to close the shape.
            </summary>
            <param name="outline">The pen used to render the freehand line. This can be null (Nothing in VB).</param>
            <param name="lineType">The line type used to connect the points.</param>
            <param name="isClosed">Indicates whether the freehand will be closed.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfFreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.Wpf.WpfFreehandLineType,System.Boolean)">
            <summary>
            Creates a new instance of WpfFreehandAnnotation specifying its fill, outline and line type.
            </summary>
            <param name="fill">The brush used to fill the freehand when IsClose is true. This can be null (Nothing in VB).</param>
            <param name="outline">The pen used to render the freehand line. This can be null (Nothing in VB).</param>
            <param name="lineType">The line type used to connect the points.</param>
            <param name="isClosed">Indicates whether the freehand will be closed.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfFreehandAnnotation.#ctor(System.Windows.Point[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.Wpf.WpfFreehandLineType,System.Boolean)">
            <summary>
            Creates a new instance of WpfFreehandAnnotation specifying its properties.
            </summary>
            <param name="points">The points for the freehand lines.</param>
            <param name="fill">The brush used to fill the freehand when IsClose is true. This can be null (Nothing in VB).</param>
            <param name="outline">The pen used to render the freehand line. This can be null (Nothing in VB).</param>
            <param name="lineType">The line type used to connect the points.</param>
            <param name="isClosed">Indicates whether the freehand will be closed.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfFreehandAnnotation.Fill">
            <summary>
            Gets or sets the brush used to fill the annotation.
            </summary>
            <value>The brush used to fill the annotation.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the fill.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfFreehandAnnotation.Outline">
            <summary>
            Gets or sets the pen used for the annotation outline.
            </summary>
            <value>The annotation outline.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the outline.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfFreehandAnnotation.IsClosed">
            <summary>
            Gets or sets a value indicating whether the shape is closed.
            </summary>
            <value>A value indicating whether the shape is closed.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfFreehandAnnotation.LineType">
            <summary>
            Gets or sets the line type used to connect the points.
            </summary>
            <value>The line type used to connect the points.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfFreehandAnnotation.Geometry">
            <summary>
            Gets a Geometry representing the annotation.
            </summary>
            <value>
            A Geometry representing the annotation.
            </value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfFreehandAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfFreehandAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation">
            <summary>
            This annotations can be used to add rectangular hot spots on a document.  When the InteractMode is set to View the hot spot annotations will be invisible but the cursor will change when hovering over it to indicate that area can be clicked.
            
            For a non-rectangular area use the WpfHotSpotFreehandAnnotation.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation.ActiveProperty">
            <summary>
            Identifies the Active dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation.ActiveFillProperty">
            <summary>
            Identifies the ActiveFill dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation.ActiveOutlineProperty">
            <summary>
            Identifies the ActiveOutline dependency property.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation.#ctor">
            <summary>
            Creates a new instance of WpfHotSpotAnnotation with default values.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation.#ctor(Atalasoft.Annotate.HotSpotData)">
            <summary>
            Creates a new instance of WpfHotSpotAnnotation from a HotSpotData object.
            </summary>
            <param name="data">The data object for the annotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Creates a new intance of WpfHotSpotAnnotation specifying its fill and outline.
            </summary>
            <param name="fill">The brush used to fill the annotation.</param>
            <param name="outline">The pen used to render the annotation outline.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation.#ctor(System.Windows.Rect,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Creates a new instance of WpfHotSpotAnnotation specifying its properties.
            </summary>
            <param name="rectangle">The bounding rectangle for the annotation.</param>
            <param name="fill">The brush used to fill the annotation.</param>
            <param name="outline">The pen used to render the annotation outline.</param>
            <param name="activeFill">The brush used to fill the annotation when its Active property is true.</param>
            <param name="activeOutline">The pen used for render the outline when its Active property is true.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation.Active">
            <summary>
            Gets or sets a value indicating whether the annotation is currently active.
            </summary>
            <value>A value indicating whether the annotation is active.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation.Fill">
            <summary>
            Gets or sets the brush used to fill the annotation.
            </summary>
            <value>The brush used to fill the annotation.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the fill.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation.Outline">
            <summary>
            Gets or sets the pen used for the annotation outline.
            </summary>
            <value>The annotation outline.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the outline.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation.ActiveFill">
            <summary>
            Gets or sets the brush used to fill the annotation when Active is true.
            </summary>
            <value>The brush used to fill the annotation when Active is true.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation.ActiveOutline">
            <summary>
            Gets or sets the pen used to render the outline when Active is true.
            </summary>
            <value>The pen used to render the outline when Active is true.</value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfHotSpotAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation">
            <summary>
            This annotation can be used to create a freehand hot spot area on the document.  When the InteractMode is set to View the hot spot annotations will be invisible but the cursor will change when hovering over it to indicate that area can be clicked.
            
            For a rectangular hot spot use the WpfHotSpotAnnotation.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation.ActiveProperty">
            <summary>
            Identifies the Active dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation.ActiveFillProperty">
            <summary>
            Identifies the ActiveFill dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation.LineTypeProperty">
            <summary>
            Identifies the LineType dependency property.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation.#ctor">
            <summary>
            Creates a new instance of WpfHotSpotFreehandAnnotation using default values.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.HotSpotFreehandData)">
            <summary>
            Creates a new instance of WpfHotSpotFreehandAnnotation from an HotSpotFreehandData object.
            </summary>
            <param name="data">The data object for the annotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.Wpf.WpfFreehandLineType)">
            <summary>
            Creates a new instance of WpfHotSpotFreehandAnnotation specifying the fill and line type.
            </summary>
            <param name="fill">The brush used to fill the annotation.</param>
            <param name="lineType">The line type used to connect the points.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation.#ctor(System.Windows.Point[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.Wpf.WpfFreehandLineType)">
            <summary>
            Creates a new instance of WpfHotSpotFreehandAnnotation specifying its properties.
            </summary>
            <param name="points">The points of the freehand line.</param>
            <param name="fill">The brush used to fill the annotation.</param>
            <param name="activeFill">The brush used to fill the annotation when its Active property is true.</param>
            <param name="lineType">The line type used to connect the points.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation.Fill">
            <summary>
            Gets or sets the brush used to fill the annotation.
            </summary>
            <value>The brush used to fill the annotation.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the fill.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation.ActiveFill">
            <summary>
            Gets or sets the brush used to fill the annotation when Active is true.
            </summary>
            <value>The brush used to fill the annotation when Active is true.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the active fill.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation.LineType">
            <summary>
            Gets or sets the line type used to connection the points.
            </summary>
            <value>The line type used to connection the points.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation.Active">
            <summary>
            Gets or sets a value indicating whether the annotation is active.
            </summary>
            <value>A value indicating whether the annotation is active.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation.Geometry">
            <summary>
            Gets a Geometry representing the annotation.
            </summary>
            <value>
            A Geometry representing the annotation.
            </value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfHotSpotFreehandAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfLayerAnnotation">
            <summary>
            A WpfLayerAnnotation is a collection of other annotations, including other WpfLayerAnnotation objects. 
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerAnnotation.#ctor">
            <summary>
            Creates a new instance of WpfLayerAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerAnnotation.#ctor(Atalasoft.Annotate.LayerData)">
            <summary>
            Creates a new instance of WpfLayerAnnotation from a LayerData object.
            </summary>
            <param name="data">The LayerData object for this annotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerAnnotation.#ctor(Atalasoft.Annotate.Wpf.WpfAnnotationUICollection,System.Boolean)">
            <summary>
            Creates a new instance of WpfLayerAnnotation using the annotations in the provided WpfAnnotationUICollection.
            </summary>
            <param name="annotations">The WpfAnnotationUICollection that will be used by this layer.</param>
            <param name="isGroup">A value indicating whether this layer is a group annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLayerAnnotation.Geometry">
            <summary>
            Gets a Geometry representing the annotation.
            </summary>
            <value>
            A Geometry representing the annotation.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLayerAnnotation.Items">
            <summary>
            Gets a WpfAnnotationUICollection containing the annotations for this layer.
            </summary>
            <value>A WpfAnnotationUICollection for this layer.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLayerAnnotation.IsGroup">
            <summary>
            Gets a value indicating whether this layer is a group annotation.
            </summary>
            <value>Indicates if this layer is a group annotation.</value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerAnnotation.AnnotationFromPoint(System.Windows.Point)">
            <summary>
            Returns the annotation located at the specified point in document space.
            </summary>
            <param name="dsPoint">The point to look at in document space.</param>
            <returns>The annotation found at the point or null (Nothing in VB) of there is no annotation at that position.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerAnnotation.HitTest(System.Windows.Point)">
            <summary>
            This method will determine whether the specified point is on the annotation.
            </summary>
            <param name="dsPoint">The point to hit test.</param>
            <returns>
            True if the point is on the annotation.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerAnnotation.OnCanvasChanged(Atalasoft.Annotate.Wpf.ValueChangedEventArgs{Atalasoft.Annotate.Wpf.WpfAnnotationCanvas})">
            <summary>
            Called when the Canvas property has changed.
            </summary>
            <param name="e">An EventArgs for this change.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerAnnotation.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Atalasoft.Annotate.Wpf.WpfAnnotationUI.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerAnnotation.CreateAnnotationUIObjects(Atalasoft.Annotate.Wpf.WpfAnnotationUIFactoryCollection)">
            <summary>
            This method is used to generate WpfAnnotationUI objects for each AnnotationData object.
            The only time this method should be called is when the WpfLayerAnnotation is created by passing in a LayerData object to its constructor.
            </summary>
            <param name="factories">The factories used to create the WpfAnnotationUI objects.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfLayerCollection">
            <summary>
            This class holds a collection of WpfLayerAnnotation objects, each containing the visible annotations.
            </summary>
        </member>
        <member name="E:Atalasoft.Annotate.Wpf.WpfLayerCollection.CollectionChanged">
            <summary>
            This event is raised when there has been a changed in the collection.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerCollection.#ctor">
            <summary>
            Creates a new instance of WpfLayerCollection.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerCollection.OnCollectionChanged(Atalasoft.Annotate.Wpf.CollectionChangedEventArgs{Atalasoft.Annotate.Wpf.WpfLayerAnnotation})">
            <summary>
            Called when there has been a change in the collection.
            </summary>
            <param name="e">A CollectionChangedEventArgs containing information about the change.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLayerCollection.Item(System.Int32)">
            <summary>
            Gets the layer at the specified index.
            </summary>
            <param name="index">The index of the layer to retrieve.</param>
            <returns>The layer at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of range for this collection.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerCollection.AsReadOnly">
            <summary>
            Returns a read-only collection of the layers.
            </summary>
            <returns>A read-only collection of layers.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerCollection.ToArray">
            <summary>
            Returns an array of all WpfLayerAnnotation items in the collection.
            </summary>
            <returns>An array of WpfLayerAnnotation or an empty array if the collection is empty.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerCollection.Add(Atalasoft.Annotate.Wpf.WpfLayerAnnotation)">
            <summary>
            Adds a layer to the collection.
            </summary>
            <param name="item">The layer to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the item argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerCollection.AddRange(Atalasoft.Annotate.Wpf.WpfLayerAnnotation[])">
            <summary>
            Adds an array of layers to the collection.
            </summary>
            <param name="layers">The array of layers to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the layers argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerCollection.Contains(Atalasoft.Annotate.Wpf.WpfLayerAnnotation)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The layer to search for.</param>
            <returns>True if the layer is within the collection.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the item argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerCollection.CopyTo(Atalasoft.Annotate.Wpf.WpfLayerAnnotation[],System.Int32)">
            <summary>
            Copies the entire collection into the array, starting at the specified index of the target array.
            </summary>
            <param name="array">The array of copy items into.</param>
            <param name="arrayIndex">The index in the array at which to begin.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the array is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerCollection.IndexOf(Atalasoft.Annotate.Wpf.WpfLayerAnnotation)">
            <summary>
            Returns the collection index of the specified WpfLayerAnnotation.
            </summary>
            <param name="layer">The layer or search for.</param>
            <returns>The index of the layer or -1 if the layer is not contained within this collection.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the layer argument is null (Nothing in VB).</exception>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLayerCollection.Count">
            <summary>
            Gets the number of layers in the collection.
            </summary>
            <value>The number of layers in the collection.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLayerCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether this collection is read-only.
            </summary>
            <value>Indicates whether the collection is read-only.</value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerCollection.Remove(Atalasoft.Annotate.Wpf.WpfLayerAnnotation)">
            <summary>
            Removes a layer from the collection.
            </summary>
            <param name="item">The layer to remove.</param>
            <returns>True if the remove was a success.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the item argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a layer at the specified index.
            </summary>
            <param name="index">The index of the layer to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of range for this collection.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfLayerAnnotationEnumerator">
            <summary>
            This class is used to enumerate the WpfLayerCollection.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerAnnotationEnumerator.#ctor(Atalasoft.Annotate.Wpf.WpfLayerAnnotation[])">
            <summary>
            Creates a new instance of WpfLayerAnnotationEnumerator.
            </summary>
            <param name="annotations">An array of annotation to enumerate.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the annotations argument was null (Nothing in VB).</exception>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLayerAnnotationEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current item.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the current position is invalid.</exception>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLayerAnnotationEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
              </returns>
              
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
              </exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerAnnotationEnumerator.MoveNext">
            <summary>
            Moves to the next item. The first time this method is used, or after Reset has been called, 
            the Current item will be set to the first item in the enumeration.
            </summary>
            <returns>True on success; False if there are no more items.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLayerAnnotationEnumerator.Reset">
            <summary>
            Resets the enumeration position to before the first item. MoveNext must be called to move to the first item.
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfLineAnnotation">
            <summary>
            This is a single line annotation from StartPoint to EndPoint.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfLineAnnotation.StartPointProperty">
            <summary>
            Identifies the StartPoint dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfLineAnnotation.EndPointProperty">
            <summary>
            Identifies the EndPoint dependency property.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLineAnnotation.#ctor">
            <summary>
            Creates a new instance of WpfLineAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLineAnnotation.#ctor(Atalasoft.Annotate.LineData)">
            <summary>
            Creates a new instance of WpfLineAnnotation from an LineData object.
            </summary>
            <param name="data">The data object for the annotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLineAnnotation.#ctor(System.Windows.Point,System.Windows.Point,Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Creates a new instance of WpfLineAnnotation specifying the start point, end point and outline.
            </summary>
            <param name="startPoint">The start point of the line in annotation space.</param>
            <param name="endPoint">The end point of the line in annotation space.</param>
            <param name="outline">The pen used to draw the line.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLineAnnotation.AttachGripsOverride(Atalasoft.Annotate.Wpf.WpfAnnotationCanvas)">
            <summary>
            Called when the annotation grips need to be created.
            </summary>
            <param name="canvas">The WpfAnnotationCanvas that will host the annotation.</param>
            <returns>
            The grips for the annotation.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLineAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLineAnnotation.OnGripPositionChanged(Atalasoft.Annotate.Wpf.EventArgs{Atalasoft.Annotate.Wpf.WpfAnnotationGrip})">
            <summary>
            Called when a grip for the annotation has moved.
            </summary>
            <param name="e">An EventArgs containing the grip that was moved.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLineAnnotation.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Atalasoft.Annotate.Wpf.WpfAnnotationUI.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLineAnnotation.StartPoint">
            <summary>
            Gets or sets the start point of the line in annotation space.
            </summary>
            <value>The start point of the line in annotation space.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLineAnnotation.EndPoint">
            <summary>
            Gets or sets the end point of the line in annotation space.
            </summary>
            <value>The end point of the line in annotation space.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLineAnnotation.Outline">
            <summary>
            Gets or sets the pen used to draw the line.
            </summary>
            <value>The pen used to draw the line.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLineAnnotation.Geometry">
            <summary>
            Gets a Geometry representing the annotation.
            </summary>
            <value>
            A Geometry representing the annotation.
            </value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLineAnnotation.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a MouseDown event has been raised for the annotation.
            </summary>
            <param name="e">The MouseButtonEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLineAnnotation.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a MouseMove event has been raised for the annotation.
            </summary>
            <param name="e">A MouseEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLineAnnotation.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a MouseUp event has been raised for the annotation.
            </summary>
            <param name="e">A MouseButtonEventArgs for the event.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLineAnnotation.SupportsMultiClickCreation">
            <summary>
            Gets a value indicating whether the annotation supports being created from multiple mouse clicks.
            </summary>
            <value>
            Indicates whether the annotation supports being created from multiple mouse clicks.
            </value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLineAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfLinesAnnotation">
            <summary>
            The WpfLinesAnnoation represents a series of points connected by straight lines. 
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLinesAnnotation.#ctor">
            <summary>
            Creates a new instance of WpfLinesAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLinesAnnotation.#ctor(Atalasoft.Annotate.LinesData)">
            <summary>
            Creates a new instance of WpfLinesAnnotation from an LinesData object.
            </summary>
            <param name="data">The data object for the annotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLinesAnnotation.#ctor(System.Windows.Point[],Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Creates a new instance of WpfLinesAnnotation specifying the points and outline.
            </summary>
            <param name="points">The points for the lines. This can be null (Nothing in VB).</param>
            <param name="outline">The pen used to draw the lines.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLinesAnnotation.Outline">
            <summary>
            Gets or sets the pen used to draw the lines.
            </summary>
            <value>The pen used to draw the lines.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLinesAnnotation.SupportsMultiClickCreation">
            <summary>
            Gets a value indicating whether the annotation supports being created from multiple mouse clicks.
            </summary>
            <value>
            Indicates whether the annotation supports being created from multiple mouse clicks.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfLinesAnnotation.Geometry">
            <summary>
            Gets a Geometry representing the annotation.
            </summary>
            <value>
            A Geometry representing the annotation.
            </value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLinesAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfLinesAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfObjectConverter">
            <summary>
            This class contains helpful methods for converting between System.Drawing and System.Windows.Media objects.
            There are also methods for converting DotImage classes into System.Windows.Media objects.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertMatrix(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Converts a System.Drawing.Drawing2D.Matrix to a System.Windows.Media.Matrix.
            </summary>
            <param name="matrix">The System.Drawing.Drawing2D.Matrix to convert.</param>
            <returns>A System.Windows.Media.Matrix.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertMatrix(System.Windows.Media.Matrix)">
            <summary>
            Converts a System.Windows.Media.Matrix to a System.Drawing.Drawing2D.Matrix.
            </summary>
            <param name="matrix">The System.Windows.Media.Matrix to convert.</param>
            <returns>A System.Drawing.Drawing2D.Matrix.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertRectangleF(System.Drawing.RectangleF)">
            <summary>
            Converts a System.Drawing.RectangleF to a System.Windows.Rect.
            </summary>
            <param name="rectangle">The System.Drawing.RectangleF to convert.</param>
            <returns>A System.Windows.Rect.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertRectangleF(System.Windows.Rect)">
            <summary>
            Converts a System.Windows.Rect to a System.Drawing.RectangleF.
            </summary>
            <param name="rectangle">The System.Windows.Rect to convert.</param>
            <returns>A System.Drawing.RectangleF.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertPointF(System.Drawing.PointF)">
            <summary>
            Converts a System.Drawing.PointF to a System.Windows.Point.
            </summary>
            <param name="point">The System.Drawing.PointF to convert.</param>
            <returns>A System.Windows.Point.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertPointF(System.Windows.Point)">
            <summary>
            Converts a System.Windows.Point to a System.Drawing.PointF.
            </summary>
            <param name="point">The System.Windows.Point to convert.</param>
            <returns>A System.Drawing.PointF.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertPointF(System.Windows.Point[])">
            <summary>
            Converts an array of System.Windows.Point to an array of System.Drawing.PointF.
            </summary>
            <param name="points">An array of System.Windows.Point to convert.</param>
            <returns>An array of System.Drawing.PointF.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertPointF(System.Drawing.PointF[])">
            <summary>
            Converts an array of System.Drawing.PointF to an array of System.Windows.Point.
            </summary>
            <param name="points">An array of System.Drawing.PointF.</param>
            <returns>An array of System.Windows.Point.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertSizeF(System.Drawing.SizeF)">
            <summary>
            Converts a System.Drawing.SizeF to a System.Windows.Size.
            </summary>
            <param name="size">The System.Drawing.SizeF to convert.</param>
            <returns>A System.Windows.Size.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertSizeF(System.Windows.Size)">
            <summary>
            Converts a System.Windows.Size to a System.Drawing.SizeF.
            </summary>
            <param name="size">The System.Windows.Size to convert.</param>
            <returns>A System.Drawing.SizeF.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertColor(System.Drawing.Color)">
            <summary>
            Converts a System.Drawing.Color to a System.Windows.Media.Color.
            </summary>
            <param name="color">The System.Drawing.Color to convert.</param>
            <returns>A System.Windows.Media.Color.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertColor(System.Windows.Media.Color)">
            <summary>
            Converts a System.Windows.Media.Color to a System.Drawing.Color.
            </summary>
            <param name="color">The System.Windows.Media.Color to convert.</param>
            <returns>A System.Drawing.Color.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertAnnotationFont(Atalasoft.Annotate.AnnotationFont)">
            <summary>
            Converts an AnnotationFont to a System.Windows.Media.Typeface.
            </summary>
            <param name="font">The AnnotationFont to convert.</param>
            <returns>A System.Windows.Media.Typeface for the font.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertAnnotationBrush(Atalasoft.Annotate.AnnotationBrush)">
            <summary>
            Converts an AnnotationBrush into a System.Windows.Media.Brush.
            </summary>
            <param name="brush">The brush to convert. If this argument is null (Nothing in VB) the return value will be null.</param>
            <returns>A System.Windows.Media.Brush representing the AnnotationBrush.</returns>
            <remarks>Since WPF does not have a HatchBrush class, it will be converted into a SolidColorBrush.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertAnnotationPen(Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Converts a AnnotationPen to a System.Windows.Media.Pen.
            </summary>
            <param name="pen">The AnnotationPen to convert.</param>
            <returns>A System.Windows.Media.Pen.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertAnnotationImage(Atalasoft.Annotate.AnnotationImage)">
            <summary>
            Converts a AnnotationImage to a System.Windows.Media.Imaging.BitmapSource.
            </summary>
            <param name="image">The AnnotationImage to convert.</param>
            <returns>A System.Windows.Media.Imaging.BitmapSource of the image.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertAnnotationImage(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Converts a System.Windows.Media.Imaging.BitmapSource to an AnnotationImage.
            </summary>
            <param name="image">The System.Windows.Media.Imaging.BitmapSource to convert.</param>
            <returns>An AnnotationImage for the BitmapSource.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertBitmap(System.Drawing.Bitmap)">
            <summary>
            Converts a System.Drawing.Bitmap to a System.Windows.Media.Imaging.BitmapSource.
            </summary>
            <param name="bitmap">The System.Drawing.Bitmap to convert.</param>
            <returns>A System.Windows.Media.Imaging.BitmapSource for the Bitmap.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfObjectConverter.ConvertBitmap(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Converts a System.Windows.Media.Imaging.BitmapSource to a System.Drawing.Bitmap.
            </summary>
            <param name="image">The System.Windows.Media.Imaging.BitmapSource to convert.</param>
            <returns>A System.Drawing.Bitmap for the BitmapSource.</returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation">
            <summary>
            WpfPointBaseAnnotation is an abstract class from which all point base annotations derive. This reduces the amount of code required to create this annotations. 
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.#ctor(System.Int32,System.Windows.Point[])">
            <summary>
            Called by derived classes to specify the maximum number of points to allow during creation or a collection of points.
            </summary>
            <param name="maximumPointCount">The maximum number of points to allow for this annotation during end-user creation. Pass 0 for an unlimited number of points.</param>
            <param name="points">An array of points for this annotation.  This argument can be null (Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.#ctor(System.Int32,Atalasoft.Annotate.PointBaseData)">
            <summary>
            Called by derived classes to create an instance from annotation data. This constructor is used when deserializing annotation data.
            </summary>
            <param name="maximumPointCount">The maximum number of points to allow for this annotation during end-user creation. Pass 0 for an unlimited number of points.</param>
            <param name="data">The PointBaseData class containing property information for this annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.GeometryFromPoints(System.Windows.Point[],Atalasoft.Annotate.Wpf.WpfFreehandLineType,System.Boolean,System.Boolean)">
            <summary>
            Returns a Geometry object from an array of points and line information.
            </summary>
            <param name="points">An array of points for the object.</param>
            <param name="lineType">The type of line used to connect the points.</param>
            <param name="isClosed">Indicates whether the figure is closed.</param>
            <param name="isFilled">Indicates whether the figure is filled.</param>
            <returns>A Geometry for the points.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the points array is null.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.AttachGripsOverride(Atalasoft.Annotate.Wpf.WpfAnnotationCanvas)">
            <summary>
            Called when the annotation grips need to be created.
            </summary>
            <param name="canvas">The WpfAnnotationCanvas that will host the annotation.</param>
            <returns>
            The grips for the annotation.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.OnGripPositionChanged(Atalasoft.Annotate.Wpf.EventArgs{Atalasoft.Annotate.Wpf.WpfAnnotationGrip})">
            <summary>
            Called when a grip for the annotation has moved.
            </summary>
            <param name="e">An EventArgs containing the grip that was moved.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Atalasoft.Annotate.Wpf.WpfAnnotationUI.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.OnAnnotationCreated(System.Windows.RoutedEventArgs)">
            <summary>
            Called after the annotation has been created.
            </summary>
            <param name="e">A RoutedEventArgs for this event.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.PointCreationDistanceThreshold">
            <summary>
            Gets or sets the minimum distance between points when creating the annotation with a mouse.
            </summary>
            <value>The minimum distance between points when creating the annotation.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value being set is less than zero.</exception>
            <remarks>This value is used to reduce the number of points added when creating the annotation with a mouse. Setting this property to zero will cause a point to be added each time the annotation receives a MouseMove event.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.GripMode">
            <summary>
            Gets or sets the type of grips to use for the annotation.
            </summary>
            <value>A value indicating whether point or rectangle grips are used.</value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.OnGripModeChanged">
            <summary>
            Called when the GripMode property has been changed.
            </summary>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.Points">
            <summary>
            Returns a list of points for the annotation.
            </summary>
            <value>A List&lt;Point&gt; containing the points of the annotation.</value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.GetPointArray">
            <summary>
            returns the Point objects as an array. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.FreehandStyleCreation">
            <summary>
            Gets or sets a value indicating whether the annotation will be created using freehand style.
            </summary>
            <value>Indicates whether the annotation will be created using freehand style.</value>
            <remarks>If this property is true, the annotation is created using a click-and-drag method, where points are added as the mouse is moved.  Setting this property to false indicates that the annotation is created using multiple clicks.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.SetLocationAndSize">
            <summary>
            This method will update the Location and Size properties based on the point values.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.NormalizePoints">
            <summary>
            This method will correct any negative points in the collection.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.NormalizePoints(System.Windows.Point[])">
            <summary>
            corrects any negitive points in the collection
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.ResizePoints(System.Windows.Size)">
            <summary>
            This method will update the Point values to fill the provided size.
            </summary>
            <param name="size">The size all points will fit into.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.RotatePoints(System.Windows.Point[])">
            <summary>
            Puts the array of points through a matrix rotation transform
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.EndUserCreation">
            <summary>
            Ends the "create" mode for the annotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.SetGripPositions">
            <summary>
            Call this method to add or update the grip positions.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a MouseDown event has been raised for the annotation.
            </summary>
            <param name="e">The MouseButtonEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a MouseMove event has been raised for the annotation.
            </summary>
            <param name="e">A MouseEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointBaseAnnotation.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a MouseUp event has been raised for the annotation.
            </summary>
            <param name="e">A MouseButtonEventArgs for the event.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfPointCollection">
            <summary>
            A Collection of Point objects for use in WPF
            </summary>
        </member>
        <member name="E:Atalasoft.Annotate.Wpf.WpfPointCollection.CollectionChanged">
            <summary>
            Occurs when the collection of points changes.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Wpf.WpfPointCollection"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointCollection.AddRange(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Adds points from the supplied IEnumerable.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointCollection.ToArray">
            <summary>
            Converts the Collection to a Point array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointCollection.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointCollection.InsertItem(System.Int32,System.Windows.Point)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than zero.
            -or-
              <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
              </exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than zero.
            -or-
              <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
              </exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointCollection.SetItem(System.Int32,System.Windows.Point)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than zero.
            -or-
              <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
              </exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPointCollection.OnCollectionChanged(Atalasoft.Annotate.Wpf.CollectionChangedEventArgs{System.Windows.Point})">
            <summary>
            Raises the <see cref="E:Atalasoft.Annotate.Wpf.WpfPointCollection.CollectionChanged"/> event.
            </summary>
            <param name="e">The CollectionChangedEventArgs instance of type Point containing the event data.</param>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfPolygonAnnotation">
            <summary>
            A WpfPolygonAnnotation is a series of points used to draw a polygon with an optional fill. 
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPolygonAnnotation.#ctor">
            <summary>
            Creates a new instance of WpfPolygonAnnotation using default values.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPolygonAnnotation.#ctor(Atalasoft.Annotate.PolygonData)">
            <summary>
            Creates a new instance of WpfPolygonAnnotation from an PolygonData object.
            </summary>
            <param name="data">The data object for the annotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPolygonAnnotation.#ctor(System.Windows.Point[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Windows.Point)">
            <summary>
            Creates a new instance of WpfPolygonAnnotation specifying its properties.
            </summary>
            <param name="points">The points for the polygon. This can be null (Nothing in VB).</param>
            <param name="fill">The brush used to fill the annotation. This can be null (Nothing in VB).</param>
            <param name="outline">The pen used to render the outline of the annotation. This can be null (Nothing in VB).</param>
            <param name="shadow">The brush used for the annotation shadow. This can be null (Nothing in VB).</param>
            <param name="shadowOffset">The offset for the shadow.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfPolygonAnnotation.Fill">
            <summary>
            Gets or sets the brush used to fill the annotation.
            </summary>
            <value>The brush used to fill the annotation.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the fill.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfPolygonAnnotation.Outline">
            <summary>
            Gets or sets the pen used for the annotation outline.
            </summary>
            <value>The annotation outline.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the outline.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfPolygonAnnotation.Shadow">
            <summary>
            Gets or sets the brush used for the annotation shadow.
            </summary>
            <value>The brush used for the annotation shadow.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the shadow.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfPolygonAnnotation.ShadowOffset">
            <summary>
            Gets or sets the offset used to position the shadow.
            </summary>
            <value>The offset used to position the shadow.</value>
            <remarks>A negative value will move the shadow to up and to the left. Positive values will move the shadow down and to the right.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfPolygonAnnotation.SupportsMultiClickCreation">
            <summary>
            Gets a value indicating whether the annotation supports being created from multiple mouse clicks.
            </summary>
            <value>
            Indicates whether the annotation supports being created from multiple mouse clicks.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfPolygonAnnotation.Geometry">
            <summary>
            Gets a Geometry representing the annotation.
            </summary>
            <value>
            A Geometry representing the annotation.
            </value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPolygonAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfPolygonAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfRectangleAnnotation">
            <summary>
            This is a rectangular annotation with an optional shadow brush. 
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRectangleAnnotation.#ctor">
            <summary>
            Creates a new instance of WpfRectangleAnnotation using default values.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRectangleAnnotation.#ctor(Atalasoft.Annotate.RectangleData)">
            <summary>
            Creates a new instance of WpfRectangleAnnotation from an RectangleData object.
            </summary>
            <param name="data">The data object for the annotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRectangleAnnotation.#ctor(System.Windows.Rect,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Creates a new instance of WpfRectangleAnnotation specifying its bounding rectangle, fill and outline.
            </summary>
            <param name="rectangle">The bounding rectangle of the annotation.</param>
            <param name="fill">The brush used for filling the annotation. This can be null (Nothing in VB).</param>
            <param name="outline">The pen used to render the annotation outline. This can be null (Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRectangleAnnotation.#ctor(System.Windows.Rect,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Windows.Point)">
            <summary>
            Creates a new instance of WpfRectangleAnnotation specifying its properties.
            </summary>
            <param name="rectangle">The bounding rectangle of the annotation.</param>
            <param name="fill">The brush used for filling the annotation. This can be null (Nothing in VB).</param>
            <param name="outline">The pen used to render the annotation outline. This can be null (Nothing in VB).</param>
            <param name="shadow">The brush used for the annotation shadow. This can be null (Nothing in VB).</param>
            <param name="shadowOffset">The offset of the shadow.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfRectangleAnnotation.Fill">
            <summary>
            Gets or sets the brush used to fill the annotation.
            </summary>
            <value>The brush used to fill the annotation.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the fill.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfRectangleAnnotation.Outline">
            <summary>
            Gets or sets the pen used for the annotation outline.
            </summary>
            <value>The annotation outline.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the outline.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfRectangleAnnotation.Shadow">
            <summary>
            Gets or sets the brush used for the annotation shadow.
            </summary>
            <value>The brush used for the annotation shadow.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the shadow.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfRectangleAnnotation.ShadowOffset">
            <summary>
            Gets or sets the offset used to position the shadow.
            </summary>
            <value>The offset used to position the shadow.</value>
            <remarks>A negative value will move the shadow to up and to the left. Positive values will move the shadow down and to the right.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRectangleAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRectangleAnnotation.HitTest(System.Windows.Point)">
            <summary>
            This method will determine whether the specified point is on the annotation.
            </summary>
            <param name="dsPoint">The point to hit test.</param>
            <returns>
            True if the point is on the annotation.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRectangleAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfRectangleGrips">
            <summary>
            This class represents a group of WpfAnnotationGrip objects for rectangular shaped annotations. 
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRectangleGrips.#ctor(Atalasoft.Annotate.Wpf.WpfAnnotationCanvas,Atalasoft.Annotate.Wpf.WpfAnnotationUI,Atalasoft.Annotate.Wpf.Renderer.IWpfGripRenderer)">
            <summary>
            Creates a new instance of WpfRectangleGrips.
            </summary>
            <param name="canvas">The WpfAnnotationCanvas that will host the grips.</param>
            <param name="annotation">The annotation associated with the grips.</param>
            <param name="renderer">The renderer used to render the grips.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the canvas or annotation arguemnts are null (Nothing in VB).</exception>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfRectangleGrips.RotationMode">
            <summary>
            Gets or sets the mode used for the rotation grip.
            </summary>
            <value>The mode used for the rotation grip.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfRectangleGrips.GripsToDisplay">
            <summary>
            Gets or sets the grips to display.
            </summary>
            <value>The grips to display.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfRectangleGrips.AspectRatio">
            <summary>
            Gets or sets the aspect ratio to maintain when the user is resizing the annotation.
            </summary>
            <value>The aspect ratio to maintain when the user is resizing the annotation.</value>
            <remarks>Setting this property to zero will disable the aspect ratio.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRectangleGrips.InitiateRotationGrips">
            <summary>
            Called when the rotation grip needs to be created.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRectangleGrips.InitiateGrips">
            <summary>
            Called when the grips need to be generated.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRectangleGrips.OnMirrorApplied(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
            <summary>
            Called when the annotation is mirrored to allow the grips to mirror.
            </summary>
            <param name="direction">The mirror direction.</param>
            <param name="maintainPosition">Indicates whether the annotation position is maintained or if the mirror pivots along the zero axis.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRectangleGrips.MoveGrips(System.Windows.Point)">
            <summary>
            Called to force the grips to move by a specified offset.
            </summary>
            <param name="offset">The offset to move each grip.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRectangleGrips.UpdateGripPositions">
            <summary>
            Called when the grip positions need to be updated.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRectangleGrips.UpdateGripPositions(System.Windows.Point,System.Windows.Size)">
            <summary>
            Called when the grip positions need to be updated to fit a new annotation location and size.
            </summary>
            <param name="location">The new location of the annotation.</param>
            <param name="size">The new size of the annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRectangleGrips.ValidateGripMove(Atalasoft.Annotate.Wpf.WpfAnnotationGrip,System.Windows.Point)">
            <summary>
            Called when a grip is being moved to allow for validation of this action.
            This method will raise an OperationRequest on the annotation.
            </summary>
            <param name="grip">The grip being moved.</param>
            <param name="newPosition">The requested new position of the grip.</param>
            <returns>
            The grip to be moved or null (Nothing in VB) to reject this action.
            </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfReferencedImageAnnotation">
            <summary>
            This annotation references a local image by filename. When viewing this annotation on multiple systems, the image file must be provided at the same location of each system. 
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfReferencedImageAnnotation.FileNameProperty">
            <summary>
            Identifies the FileName dependency property.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfReferencedImageAnnotation.#ctor">
            <summary>
            Creates a new instance of WpfReferencedImageAnnotation.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfReferencedImageAnnotation.#ctor(Atalasoft.Annotate.ReferencedImageData)">
            <summary>
            Creates a new instance of WpfReferencedImageAnnotation from an ReferencedImageData object.
            </summary>
            <param name="data">The data object for the annotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfReferencedImageAnnotation.#ctor(System.String)">
            <summary>
            Creates a new instance of WpfReferencedImageAnnotation specifying the image filename.
            </summary>
            <param name="fileName">The filename of the image.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the filename cannot be found.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfReferencedImageAnnotation.#ctor(System.String,System.Windows.Point,Atalasoft.Annotate.AnnotationBrush,System.Windows.Point)">
            <summary>
            Creates a new instance of WpfReferencedImageAnnotation specifying its properties.
            </summary>
            <param name="fileName">The filename of the image.</param>
            <param name="location">The location of the annotation.</param>
            <param name="shadow">The brush used for the annotation shadow.</param>
            <param name="shadowOffset">The offset of the shadow.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the filename cannot be found.</exception>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfReferencedImageAnnotation.Source">
            <summary>
            Gets the BitmapSource used to render the image.
            </summary>
            <value>The BitmapSource used to render the image or null (Nothing in VB) if the image cannot be created.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfReferencedImageAnnotation.FileName">
            <summary>
            Gets or sets the filename of the image.
            </summary>
            <value>The filename of the image.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfReferencedImageAnnotation.Shadow">
            <summary>
            Gets or sets the brush used for the annotation shadow.
            </summary>
            <value>The brush used for the annotation shadow.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the shadow.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfReferencedImageAnnotation.ShadowOffset">
            <summary>
            Gets or sets the offset used to position the shadow.
            </summary>
            <value>The offset used to position the shadow.</value>
            <remarks>A negative value will move the shadow to up and to the left. Positive values will move the shadow down and to the right.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfReferencedImageAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfReferencedImageAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation">
            <summary>
            This annotation provides a text message with a rounded rectangle outline similar to a rubber stamp.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.TextProperty">
            <summary>
            Identifies the Text dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.FontProperty">
            <summary>
            Identifies the Font dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.FontBrushProperty">
            <summary>
            Identifies the FontBrush dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.PaddingProperty">
            <summary>
            Identifies the Padding dependency property.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.#ctor">
            <summary>
            Creates a new instance of WpfRubberStampAnnotation using default values.
            </summary>
            <remarks>The default font used is Arial 12 with a black font brush.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.#ctor(Atalasoft.Annotate.RubberStampData)">
            <summary>
            Creates a new instance of WpfRubberStampAnnotation from an RubberStampData object.
            </summary>
            <param name="data">The data object for the annotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush)">
            <summary>
            Creates a new instance of WpfRubberStampAnnotation specifying its text, font and font brush.
            </summary>
            <param name="text">The text of the annotation.</param>
            <param name="font">The font used to render the text.</param>
            <param name="fontBrush">The brush used to render the text.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Creates a new instance of WpfRubberStampAnnotation specifying its text, font, font brush, fill and outline.
            </summary>
            <param name="text">The text of the annotation.</param>
            <param name="font">The font used to render the text.</param>
            <param name="fontBrush">The brush used to render the text.</param>
            <param name="fill">The brush used to fill the annotation.</param>
            <param name="outline">The pen used to render the annotation outline.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Double,System.Double)">
            <summary>
            Creates a new instance of WpfRubberStampAnnotation specifying its properties.
            </summary>
            <param name="text">The text of the annotation.</param>
            <param name="font">The font used to render the text.</param>
            <param name="fontBrush">The brush used to render the text.</param>
            <param name="fill">The brush used to fill the annotation.</param>
            <param name="outline">The pen used to render the annotation outline.</param>
            <param name="cornerRadius">The radius for the annotation corners.</param>
            <param name="padding">The amount of padding around the text.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.Padding">
            <summary>
            Gets or sets the amount of padding around the text.
            </summary>
            <value>The amount of padding around the text.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.Text">
            <summary>
            Gets or sets the text for the annotation.
            </summary>
            <value>The text for the annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.Font">
            <summary>
            Gets or sets the font used to render the text.
            </summary>
            <value>The font used to render the text.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.FontBrush">
            <summary>
            Gets or sets the brush used to render the text.
            </summary>
            <value>The brush used to render the text.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.Fill">
            <summary>
            Gets or sets the brush used to fill the annotation.
            </summary>
            <value>The brush used to fill the annotation.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the fill.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.Outline">
            <summary>
            Gets or sets the pen used for the annotation outline.
            </summary>
            <value>The annotation outline.</value>
            <remarks>Set this property to null (Nothing in VB) to remove the outline.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.CornerRadius">
            <summary>
            Gets or sets the radius used to render rounded corners.
            </summary>
            <value>The radius used to render rounded corners.</value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfRubberStampAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Wpf.WpfTextAnnotation">
            <summary>
            This annotation displays text which can be edited by the user.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfTextAnnotation.TextProperty">
            <summary>
            Identifies the Text dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfTextAnnotation.AlignmentProperty">
            <summary>
            Identifies the Alignment dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfTextAnnotation.FontProperty">
            <summary>
            Identifies the Font dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfTextAnnotation.FontBrushProperty">
            <summary>
            Identifies the FontBrush dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfTextAnnotation.LineAlignmentProperty">
            <summary>
            Identifies the LineAlignment dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfTextAnnotation.PaddingProperty">
            <summary>
            Identifies the Padding dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfTextAnnotation.EditModeProperty">
            <summary>
            Identifies the EditMode dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfTextAnnotation.AllowEditingProperty">
            <summary>
            Identifies the AllowEditing dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfTextAnnotation.CanEditRotatedProperty">
            <summary>
            Identifies the CanEditRotated dependency property.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Wpf.WpfTextAnnotation.CanEditMirroredProperty">
            <summary>
            Identifies the CanEditMirrored dependency property.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.#ctor">
            <summary>
            Creates an instance of WpfTextAnnotation using default property values.
            </summary>
            <remarks>The default properties used are an Arial 12px font, black text, a white background with black outline.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.#ctor(Atalasoft.Annotate.TextData)">
            <summary>
            Creates an instance of WpfTextAnnotation from a TextData object.
            </summary>
            <param name="data">The TextData object to pull property values from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the data argument is null (Nothing in VB).</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.#ctor(System.String)">
            <summary>
            Creates a new instance of WpfTextAnnotation using the specified string.
            </summary>
            <param name="text">The default text for the annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Creates a new instance of WpfTextAnnotation using the specified arguments.
            </summary>
            <param name="text">The default text of the annotation.</param>
            <param name="font">The font used for the text.</param>
            <param name="fontBrush">The brush used for the text.</param>
            <param name="fill">The brush used to fill the annotation. This can be null (Nothing in VB).</param>
            <param name="outline">The pen used for the outline. This can be null (Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Windows.Point)">
            <summary>
            Creates a new instance of WpfTextAnnotation using the specified arguments.
            </summary>
            <param name="text">The default text of the annotation.</param>
            <param name="font">The font used for the text.</param>
            <param name="fontBrush">The brush used for the text.</param>
            <param name="fill">The brush used to fill the annotation. This can be null (Nothing in VB).</param>
            <param name="outline">The pen used for the outline. This can be null (Nothing in VB).</param>
            <param name="shadow">The brush used for the annotation shadow. This can be null (Nothing in VB).</param>
            <param name="shadowOffset">A point specifying the shadow placement relative to the annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.#ctor(System.Windows.Rect,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Creates a new instance of WpfTextAnnotation with the specified bounds and property values.
            </summary>
            <param name="bounds">The bounding rectangle of the annotation.</param>
            <param name="text">The default text of the annotation.</param>
            <param name="font">The font used for the text.</param>
            <param name="fontBrush">The brush used for the text.</param>
            <param name="fill">The brush used to fill the annotation. This can be null (Nothing in VB).</param>
            <param name="outline">The pen used for the outline. This can be null (Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.#ctor(System.Windows.Rect,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Windows.Point)">
            <summary>
            Creates a new instance of WpfTextAnnotation with the specified bounds and property values.
            </summary>
            <param name="bounds">The bounding rectangle of the annotation.</param>
            <param name="text">The default text of the annotation.</param>
            <param name="font">The font used for the text.</param>
            <param name="fontBrush">The brush used for the text.</param>
            <param name="fill">The brush used to fill the annotation. This can be null (Nothing in VB).</param>
            <param name="outline">The pen used for the outline. This can be null (Nothing in VB).</param>
            <param name="shadow">The brush used for the annotation shadow. This can be null (Nothing in VB).</param>
            <param name="shadowOffset">A point specifying the shadow placement relative to the annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.#ctor(System.Windows.Rect,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Windows.Point,System.Double,System.Drawing.StringAlignment,System.Drawing.StringAlignment)">
            <summary>
            Creates a new instance of WpfTextAnnotation with the specified bounds and property values.
            </summary>
            <param name="bounds">The bounding rectangle of the annotation.</param>
            <param name="text">The default text of the annotation.</param>
            <param name="font">The font used for the text.</param>
            <param name="fontBrush">The brush used for the text.</param>
            <param name="fill">The brush used to fill the annotation. This can be null (Nothing in VB).</param>
            <param name="outline">The pen used for the outline. This can be null (Nothing in VB).</param>
            <param name="shadow">The brush used for the annotation shadow. This can be null (Nothing in VB).</param>
            <param name="shadowOffset">A point specifying the shadow placement relative to the annotation.</param>
            <param name="padding">The amount of padding between the annotation border and its text.</param>
            <param name="alignement">The horizontal alignment of the text.</param>
            <param name="lineAlignment">The vertical alignment of the text.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Atalasoft.Annotate.Wpf.WpfAnnotationUI.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.OnAnnotationBrushChanged(Atalasoft.Annotate.AnnotationBrush)">
            <summary>
            Called when the FillProperty has changed.
            </summary>
            <param name="annotationBrush">The new AnnotationBrush for the fill.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.OnAnnotationFontChanged(Atalasoft.Annotate.AnnotationFont)">
            <summary>
            Called when the FontProperty has changed.
            </summary>
            <param name="annotationFont">The new AnnotationFont.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.OnAnnotationPenChanged(Atalasoft.Annotate.AnnotationPen)">
            <summary>
            Called when the OutlineProperty has changed.
            </summary>
            <param name="annotationPen">The new AnnotationPen for the outline.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.CreateDataSnapshotOverride">
            <summary>
            This method is used to serialize the annotation.
            </summary>
            <returns>
            An AnnotationData object with the current annotation settings.
            </returns>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfTextAnnotation.AllowEditing">
            <summary>
            Gets or sets a value indicating whether the text can be modified by double-clicking the annotation.
            </summary>
            <value>Indicates whether the text can be modified by double-clicking the annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfTextAnnotation.CanEditRotated">
            <summary>
            Gets or sets a value indicating whether the text will show rotated while editing.
            </summary>
            <value>Indicates whether the text will show rotated while editing.</value>
            <remarks>If this property is false, the TextBox used for editing will display unrotated.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfTextAnnotation.CanEditMirrored">
            <summary>
            Gets or sets a value indicating whether the text will show mirrored while editing.
            </summary>
            <value>Indicates whether the text will show mirrored while editing.</value>
            <remarks>If this property is false, the TextBox used for editing will display the text without the mirror effect.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfTextAnnotation.EditMode">
            <summary>
            Gets or sets a value indicating whether the annotation is in edit mode.
            </summary>
            <value>Indicates whether the annotation is in edit mode.</value>
            <remarks>When the annotation is in edit mode, a TextBox control is shown to allow the end-user to modify the text.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfTextAnnotation.Padding">
            <summary>
            Gets or sets the amount of padding used around the text.
            </summary>
            <value>The amount of padding around the text.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfTextAnnotation.Alignment">
            <summary>
            Gets or sets the horizontal alignment of the text.
            </summary>
            <value>The horizontal alignment of the text.</value>
            <remarks>This property defaults to System.Drawing.StringAlignment.Near.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfTextAnnotation.LineAlignment">
            <summary>
            Gets or sets the vertical alignment of the text.
            </summary>
            <value>The vertical alignment of the text.</value>
            <remarks>This property defaults to System.Drawing.StringAlignment.Near.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfTextAnnotation.Text">
            <summary>
            Gets or sets the annotation text.
            </summary>
            <value>The annotation text.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfTextAnnotation.Font">
            <summary>
            Gets or sets the font used for rendering the text.
            </summary>
            <value>The font used for rendering the text.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfTextAnnotation.FontBrush">
            <summary>
            Gets or sets the brush used to render the text.
            </summary>
            <value>The brush used to render the text.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfTextAnnotation.Fill">
            <summary>
            Gets or sets the brush used to fill the annotation background.
            </summary>
            <value>The brush used for the annotation background.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfTextAnnotation.Outline">
            <summary>
            Gets or sets the pen used for the annotation outline. This can be null (Nothing in VB).
            </summary>
            <value>The pen used for the annotation outline.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfTextAnnotation.Shadow">
            <summary>
            Gets or sets the brush used for the annotation shadow. This can be null (Nothing in VB).
            </summary>
            <value>The brush used for the annotation shadow.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfTextAnnotation.ShadowOffset">
            <summary>
            Gets or sets the shadow offset from the annotation location.
            </summary>
            <value>The shadow offset from the annotation location.</value>
            <remarks>A negative value will move the shadow to the left and up while a positive value moves the shadow to the right and down.</remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Wpf.WpfTextAnnotation.ChildElement">
            <summary>
            Gets the child UIElement of the annotation, if any.
            </summary>
            <value>
            The child UIElement of the annotation or null (Nothing in VB).
            </value>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.OnSelectedChanged(System.EventArgs)">
            <summary>
            Called when the Selected property has been changed.
            </summary>
            <param name="e">An EventArgs for this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a MouseDown event has been raised for the annotation.
            </summary>
            <param name="e">The MouseButtonEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when a MouseUp event has been raised for the annotation.
            </summary>
            <param name="e">A MouseButtonEventArgs for the event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.OnCanvasChanged(Atalasoft.Annotate.Wpf.ValueChangedEventArgs{Atalasoft.Annotate.Wpf.WpfAnnotationCanvas})">
            <summary>
            Called when the Canvas property has changed.
            </summary>
            <param name="e">An EventArgs for this change.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.ShowEditBox">
            <summary>
            This method is called when the annotation is entering "edit" mode.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.HideEditBox">
            <summary>
            This method is called when the annotation is leaving "edit" mode.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Wpf.WpfTextAnnotation.CloneOverride(Atalasoft.Annotate.Wpf.WpfAnnotationUI)">
            <summary>
            Derived classes must override this method and return a copy of itself.
            </summary>
            <param name="clone">The new clone to add additional properties values.</param>
            <returns>
            A copy of the annotation.
            </returns>
        </member>
    </members>
</doc>
